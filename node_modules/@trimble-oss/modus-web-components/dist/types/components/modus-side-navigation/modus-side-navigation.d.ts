import { EventEmitter } from '../../stencil-public-runtime';
import { ModusSideNavigationItemCustomEvent as ModusSideNavItemEvent } from '../../components';
import { ModusSideNavigationItemInfo, ModusSideNavItemLevelInfo } from './modus-side-navigation.models';
export declare class ModusSideNavigation {
    element: HTMLElement;
    /** (optional) To choose whether to collapse the panel when clicked outside. */
    collapseOnClickOutside: boolean;
    /** (optional) Data property to create the items. */
    data: ModusSideNavigationItemInfo[];
    /** (optional) Maximum width of the side navigation panel in an expanded state. */
    maxWidth: string;
    /** Mode to make side navigation either overlay or push the content for the selector specified in `targetContent` */
    mode: 'overlay' | 'push';
    /** (optional) The expanded state of side navigation panel and items. */
    expanded: boolean;
    /** (optional) Specify the selector for the page's content for which paddings and margins will be set by side navigation based on the `mode`. */
    targetContent: string;
    /** An event that fires on side navigation panel collapse & expand.  */
    sideNavExpand: EventEmitter<boolean>;
    private _callbackQueue;
    private _children;
    private _firstChild;
    private _itemInFocus;
    private _itemSelected;
    private _minWidth;
    private _levelsContainerRef;
    private _retainFocus;
    private _timeout;
    _navigationLevels: ModusSideNavItemLevelInfo[];
    componentDidRender(): void;
    componentWillLoad(): void;
    documentClickHandler(event: MouseEvent): void;
    getNextLevel(id: string): ModusSideNavigationItemInfo;
    gotoNextLevel(id: string): boolean;
    gotoPreviousLevel(): boolean;
    handleItemAdded(event: ModusSideNavItemEvent<HTMLElement>): void;
    handleItemRemoved(event: ModusSideNavItemEvent<HTMLElement>): void;
    handleItemFocus(event: ModusSideNavItemEvent<{
        id: string;
    }>): void;
    handleItemClick(event: ModusSideNavItemEvent<{
        id: string;
        selected: boolean;
    }>): void;
    handleDataChange(val: any): void;
    handleExpandedChange(expand: any): void;
    handleModeChange(mode: any): void;
    handleTargetChange(target: any): void;
    handleBackClick(e: KeyboardEvent | MouseEvent): void;
    handleKeyDown(event: KeyboardEvent): void;
    handleLevelsContainerRef(el: HTMLDivElement): void;
    handleLevelHeadingRef(el: HTMLDivElement): void;
    initializeLevelInfo(data: ModusSideNavigationItemInfo[]): void;
    itemChanged(event: ModusSideNavItemEvent<HTMLElement>): void;
    setTargetContentMargin(isExpanded: boolean, mode: string, target: string): void;
    setFocusItem(itemId: string): void;
    reflow: (element: any) => void;
    render(): any;
}
