import { EventEmitter } from '../../stencil-public-runtime';
export declare class ModusFileDropzone {
    dropzoneFiles: Array<File>;
    error: 'maxFileCount' | 'maxFileNameLength' | 'maxTotalFileSize' | null;
    fileDraggedOver: boolean;
    /** (optional) The dropzone's accepted file types */
    acceptFileTypes: string;
    /** (optional) The dropzone's aria-label. */
    ariaLabel: string | null;
    /** (optional) The dropzone's description text. */
    description: string;
    /** (optional) The dropzone's height. */
    dropzoneHeight: string;
    /** (optional) The dropzone's width. */
    dropzoneWidth: string;
    /** (optional) The dropzone's instruction text when a file is being dragged over. */
    fileDraggedOverInstructions: string;
    /** (optional) Whether to include the upload icon. */
    includeStateIcon: boolean;
    /** (optional) The dropzone's label text. */
    label: string;
    /** (optional) The dropzone's instruction text. */
    instructions: string;
    /** (optional) The dropzone's max file count. */
    maxFileCount: number;
    /** (optional) The dropzone's max file name length of each file. */
    maxFileNameLength: number;
    /** (optional) The dropzone's max total file size. */
    maxTotalFileSizeBytes: number;
    /** (optional) Whether multiple files can be uploaded. */
    multiple: boolean;
    /** An event that fires when files have been added or removed, regardless of whether they're valid. */
    files: EventEmitter<[File[], string | null]>;
    elementKeydownHandler(event: KeyboardEvent): void;
    /** Add a file to the dropzone. */
    addFile(file: File): Promise<void>;
    /** Get the dropzone's error. */
    getError(): Promise<string | null>;
    /** Get the dropzone's files. */
    getFiles(): Promise<File[]>;
    /** Remove a file from the dropzone. */
    removeFile(fileName: string): Promise<void>;
    errorMessageBottom: string;
    errorMessageTop: string;
    fileInput: HTMLInputElement;
    onDragLeave: (event: DragEvent) => void;
    onDragOver: (event: DragEvent) => void;
    onDrop: (event: DragEvent) => void;
    onFileChange: () => void;
    openBrowse: () => void;
    updateDropzoneState: () => void;
    render(): any;
}
