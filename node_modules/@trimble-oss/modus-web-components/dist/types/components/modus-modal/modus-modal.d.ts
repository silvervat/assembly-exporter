import { EventEmitter, JSX } from '../../stencil-public-runtime';
import { ModalFocusWrapping } from './modal-focus-wrapping';
/**
 * @slot footerContent - Slot for a custom footer content
 */
export declare class ModusModal {
    /** Reference to host HTML element. */
    el: HTMLElement;
    /** (optional) The modal's aria-label. */
    ariaLabel: string | null;
    /** (optional) The modal's primary button text. */
    headerText: string;
    /** (optional) The modal's primary button aria-label. */
    primaryButtonAriaLabel: string | null;
    /** (optional) Disable primary button. */
    primaryButtonDisabled: boolean;
    /** (optional) The modal's primary button text. */
    primaryButtonText: string;
    /** (optional) The modal's secondary button aria-label. */
    secondaryButtonAriaLabel: string | null;
    /** (optional) Disable secondary button. */
    secondaryButtonDisabled: boolean;
    /** (optional) The modal's secondary button text. */
    secondaryButtonText: string;
    /** (optional) The modal's z-index. */
    zIndex: string;
    /** (optional) The modal's backdrop. Specify 'static' for a backdrop that doesn't close the modal when clicked outside the modal content */
    backdrop: 'default' | 'static';
    /** (optional) The modal's full screen view */
    fullscreen: boolean;
    /** An event that fires on modal close.  */
    closed: EventEmitter;
    /** An event that fires on modal open.  */
    opened: EventEmitter;
    /** An event that fires on primary button click.  */
    primaryButtonClick: EventEmitter;
    /** An event that fires on secondary button click.  */
    secondaryButtonClick: EventEmitter;
    ignoreOverlayClick: boolean;
    startTrapRef: HTMLElement;
    focusWrapping: ModalFocusWrapping;
    modalContentRef: HTMLDivElement;
    tabbableNodes: HTMLElement[];
    /** Closes the Modal */
    close(): Promise<void>;
    /** Opens the Modal */
    open(): Promise<void>;
    visible: boolean;
    handleModalContentMouseDown(): void;
    documentKeyHandler(event: KeyboardEvent): void;
    handleOverlayClick(event: MouseEvent): void;
    handleEnterKeydown(event: KeyboardEvent, callback: () => void): void;
    handleCloseKeydown(event: KeyboardEvent): void;
    handlePrimaryKeydown(event: KeyboardEvent): void;
    handleSecondaryKeydown(event: KeyboardEvent): void;
    componentDidRender(): void;
    renderModal(): JSX.Element[];
    renderModalHeader(): JSX.Element[];
    renderModalFooter(): JSX.Element[];
    render(): unknown;
}
