import { EventEmitter } from '../../stencil-public-runtime';
import { JSX } from '../../stencil-public-runtime';
import { ButtonColor, ButtonSize, ButtonStyle, ButtonType } from './modus-button.models';
export declare class ModusButton {
    /** (optional) The button's aria-disabled state. */
    ariaDisabled: string | null;
    /** (optional) The button's aria-label. */
    ariaLabel: string | null;
    /** (optional) The style of the button */
    buttonStyle: ButtonStyle;
    /** (optional) The color of the button */
    color: ButtonColor;
    /** (optional) Disables the button. */
    disabled: boolean;
    /** (optional) Takes the icon name and renders an icon-only button. */
    iconOnly: string;
    /** (optional) Takes the icon name and shows the icon aligned to the left of the button text. */
    leftIcon: string;
    /** (optional) Takes the icon name and shows the icon aligned to the right of the button text. */
    rightIcon: string;
    /** (optional) The size of the button. */
    size: ButtonSize;
    /** (optional) Shows a caret icon right side of the button. */
    showCaret: boolean;
    /** (Optional) Button types */
    type: ButtonType;
    /** (optional) An event that fires on button click. */
    buttonClick: EventEmitter;
    el: HTMLElement;
    isActive: boolean;
    pressed: boolean;
    classByButtonStyle: Map<string, string>;
    classByColor: Map<string, string>;
    classBySize: Map<string, string>;
    buttonRef: HTMLButtonElement;
    /** Focus the Button */
    focusButton(): Promise<void>;
    /** Set the button to active or inactive */
    setActive(isActive: boolean): Promise<void>;
    elementKeyupHandler(event: KeyboardEvent): void;
    renderIconWithText(): JSX.Element;
    renderIconOnly(): JSX.Element;
    render(): unknown;
}
