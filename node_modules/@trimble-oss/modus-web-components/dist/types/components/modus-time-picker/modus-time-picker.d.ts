import { EventEmitter } from '../../stencil-public-runtime';
import { ModusTimePickerEventDetails } from './modus-time-picker.models';
/**
 * @slot timeZone - Slot for a Time Zone dropdown
 */
export declare class ModusTimePicker {
    element: HTMLElement;
    /** (optional) Sets 12/24 hour format for the input string. */
    ampm: boolean;
    handleAmPmChange(val: boolean): void;
    /** (optional) Regular expression to allow characters while typing the input.
     * Default is `/[\d:apm\s]/gi` or `/[\d:]/gi` based on the display format.
     */
    allowedCharsRegex: RegExp | string;
    /** (optional) The input's aria-label. */
    ariaLabel: string | null;
    /** (optional) Formats the text while typing in the input field. */
    autoFormat: boolean;
    /** (optional) Sets autofocus on the input. */
    autoFocusInput: boolean;
    /** (optional) Whether the input is disabled. */
    disabled: boolean;
    /** (optional) Disables default validation for the time input. */
    disableValidation: boolean;
    /** (optional) Custom error text displayed for the input. */
    errorText: string;
    /** (optional) Custom helper text displayed below the input. */
    helperText: string;
    /** (optional) The input's label. */
    label: string;
    /** (optional) Minimum time (in 24 hour format). */
    min: string;
    /** (optional) Maximum time (in 24 hour format). */
    max: string;
    /** (optional) The input's placeholder text. */
    placeholder: string;
    /** (optional) Whether the input's content is read-only */
    readOnly: boolean;
    /** (optional) Whether the input is required. */
    required: boolean;
    /** (optional) The input's size. */
    size: 'medium' | 'large';
    /** (optional) The input's valid state text. */
    validText: string;
    /** (optional) Value of the time entered into the input. */
    value: string;
    handleValueChange(val: string): void;
    /** An event that fires on input value out of focus. */
    timeInputBlur: EventEmitter<ModusTimePickerEventDetails>;
    /** An event that fires on input value change. */
    valueChange: EventEmitter<ModusTimePickerEventDetails>;
    readonly classBySize: Map<string, string>;
    private _formatter;
    private _isEditing;
    private _timeInput;
    private _maxLength;
    _timeDisplay: string;
    componentWillLoad(): void;
    /** Public Methods */
    /** Focus the input. */
    focusInput(): Promise<void>;
    handleBlur(): void;
    handleDefaultKeyDown(e: KeyboardEvent, callback: () => void): void;
    handleInputChange(event: Event): void;
    handleInputKeyPress(event: KeyboardEvent): boolean;
    clearValidation(): void;
    getAriaControls(): {
        [key: string]: boolean | string;
    };
    handleAmPmDependencies(hasAmPm: boolean): void;
    validateTimeInput(inputString: string | null): void;
    private renderTimeInput;
    private renderSubText;
    render(): any;
}
