import { EventEmitter } from '../../stencil-public-runtime';
export interface ModusAutocompleteOption {
    id: string;
    value: string;
}
export declare class ModusAutocomplete {
    /** When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input. */
    multiple: boolean;
    /** The autocomplete's aria label. */
    ariaLabel: string | null;
    /** Whether the input has a clear button. */
    clearable: boolean;
    /** Whether the input is disabled. */
    disabled: boolean;
    /** Whether the autocomplete's options always display on select. */
    disableCloseOnSelect: boolean;
    /** The autocomplete's dropdown's max height. */
    dropdownMaxHeight: string;
    /** The autocomplete's dropdown z-index. */
    dropdownZIndex: string;
    /** The autocomplete's error text. */
    errorText: string;
    el: HTMLElement;
    /** Whether the search icon is included. */
    includeSearchIcon: boolean;
    /** The autocomplete's label. */
    label: string;
    /** The autocomplete's no results text. */
    noResultsFoundText: string;
    /** The autocomplete's no results sub-text. */
    noResultsFoundSubtext: string;
    /** The autocomplete's options. */
    options: ModusAutocompleteOption[] | string[];
    /** An array to hold the selected chips. */
    selectedChips: ModusAutocompleteOption[];
    /** The autocomplete's selected option. */
    selectedOption: string;
    /** Whether to show autocomplete's options when focus. */
    showOptionsOnFocus: boolean;
    watchOptions(): void;
    /** The autocomplete's input placeholder. */
    placeholder: string;
    /** Whether the autocomplete is read-only. */
    readOnly: boolean;
    /** Whether the autocomplete is required. */
    required: boolean;
    /** Whether to show the no results found message. */
    showNoResultsFoundMessage: boolean;
    /** The autocomplete's size. */
    size: 'medium' | 'large';
    /** The autocomplete's search value. */
    value: string;
    onValueChange(): void;
    /** An event that fires when a dropdown option is selected. Emits the option id. */
    optionSelected: EventEmitter<string>;
    /** An event that fires when the input value changes. Emits the value string. */
    valueChange: EventEmitter<string>;
    /** An event that fires when an option is selected/removed. Emits the option ids. */
    selectionsChanged: EventEmitter<string[]>;
    containsSlottedElements: boolean;
    hasFocus: boolean;
    visibleOptions: ModusAutocompleteOption[];
    customOptions: Array<any>;
    visibleCustomOptions: Array<any>;
    disableFiltering: boolean;
    focusItemIndex: number;
    ShowItemsOnKeyDown: boolean;
    private listId;
    componentWillLoad(): void;
    componentDidRender(): void;
    onMouseDown(event: MouseEvent): void;
    classBySize: Map<string, string>;
    convertOptions(): void;
    displayNoResults: () => boolean;
    displayOptions: () => boolean;
    addChipValue(value: ModusAutocompleteOption): void;
    handleCustomOptionClick: (option: any) => void;
    handleInputBlur: () => void;
    handleInputKeyDown: (event: KeyboardEvent) => void;
    handleOptionKeyDown: (event: any, option: any, isCustomOption?: boolean) => void;
    handleClear(): void;
    handleOptionClick: (option: ModusAutocompleteOption) => void;
    handleArrowDown: (options: any) => void;
    handleArrowUp: () => void;
    focusOptionItem: () => void;
    handleSearchChange: (search: string) => void;
    handleCloseClick(chipValue: ModusAutocompleteOption): void;
    handleTextInputFocus: () => void;
    handleTextInputValueChange: (event: CustomEvent<string>) => void;
    updateVisibleCustomOptions: (search?: string) => void;
    updateVisibleOptions: (search?: string) => void;
    CustomOptionsSlot: () => any;
    TextInput: () => any;
    valueChangedHandler(event: CustomEvent<string>): void;
    scrollToOptionSelected: () => void;
    render(): unknown;
}
