import { EventEmitter } from '../../stencil-public-runtime';
import { ModusNavbarApp } from './apps-menu/modus-navbar-apps-menu';
import { ModusNavbarButton, ModusNavbarDropdownItem, ModusNavbarDropdownOptions, ModusNavbarLogoOptions, ModusNavbarTooltip, ModusProfileMenuOptions } from './modus-navbar.models';
/**
 * @slot main - Renders custom main menu content
 * @slot notifications - Renders custom notifications content
 */
export declare class ModusNavbar {
    element: HTMLElement;
    /** (optional) The navbar's aria-label. */
    navAriaLabel?: string;
    /** (optional) The apps to render in the apps menu. */
    apps: ModusNavbarApp[];
    /** (optional) The buttons to render in the Navbar. */
    buttons: ModusNavbarButton[];
    /** (optional) Whether to show search overlay or not. */
    enableSearchOverlay: boolean;
    /** (optional) Set the primary logo to display when the screen size is greater than 576 pixels, and the secondary logo to display when the screen size is less than or equal to 576 pixels. */
    logoOptions: ModusNavbarLogoOptions;
    /** (optional) Dropdown options. */
    dropdownOptions: ModusNavbarDropdownOptions;
    /** (optional) The selected dropdown item. */
    selectedDropdownItem: ModusNavbarDropdownItem;
    /** (required) Profile menu options. */
    profileMenuOptions: ModusProfileMenuOptions;
    /** (optional) Whether to display the navbar items in reverse order. */
    reverse: boolean;
    /** (optional) Search tooltip. */
    searchTooltip: ModusNavbarTooltip;
    /** (optional) Whether to show the apps menu. */
    showAppsMenu: boolean;
    /** (optional) Whether to show the main menu. */
    showMainMenu: boolean;
    /** (optional) Whether to show notifications. */
    showNotifications: boolean;
    /** (optional) Whether to show badge on top of notification */
    notificationCount: number;
    /** (optional) Whether to show the placeholder for Pendo. */
    showPendoPlaceholder: boolean;
    /** (optional) Whether to show profile.  **/
    showProfile: boolean;
    /** (optional) Whether to show search. */
    showSearch: boolean;
    /** (optional) Whether to show a shadow under the navbar. */
    showShadow: boolean;
    /** (optional) Whether to show help. */
    showHelp: boolean;
    /** (optional) Help tooltip. */
    helpTooltip: ModusNavbarTooltip;
    /** (optional) Help URL. */
    helpUrl: string;
    /** (optional) Color variants for NavBar. */
    variant: 'default' | 'blue';
    /** An event that fires when the apps menu opens. */
    appsMenuOpen: EventEmitter<void>;
    /** An event that fires when an apps menu app opens. */
    appsMenuAppOpen: EventEmitter<ModusNavbarApp>;
    /** An event that fires when a button in the custom button list is clicked. */
    buttonClick: EventEmitter<string>;
    /** An event that fires when the help link opens. */
    helpOpen: EventEmitter<void>;
    /** An event that fires when a dropdown item is selected **/
    dropdownItemSelect: EventEmitter<ModusNavbarDropdownItem>;
    /** An event that fires on main menu click. */
    mainMenuClick: EventEmitter<KeyboardEvent | MouseEvent>;
    /** An event that fires when the notifications menu opens. */
    notificationsMenuOpen: EventEmitter<void>;
    /** An event that fires on product logo click. */
    productLogoClick: EventEmitter<MouseEvent>;
    /** An event that fires on profile menu link click. */
    profileMenuLinkClick: EventEmitter<string>;
    /** An event that fires when the profile menu opens. */
    profileMenuOpen: EventEmitter<void>;
    /** An event that fires on profile menu sign out click. */
    profileMenuSignOutClick: EventEmitter<KeyboardEvent | MouseEvent>;
    /** An event that fires on search value change. */
    searchChange: EventEmitter<string>;
    /** An event that fires on search button click. */
    searchMenuClick: EventEmitter<void>;
    hideMainMenu(): Promise<void>;
    appsMenuVisible: boolean;
    mainMenuVisible: boolean;
    notificationsMenuVisible: boolean;
    profileMenuVisible: boolean;
    slots: string[];
    componentId: string;
    searchOverlayVisible: boolean;
    openButtonMenuId: string;
    readonly SLOT_MAIN = "main";
    readonly SLOT_NOTIFICATIONS = "notifications";
    readonly SLOT_PROFILE_MENU = "profileMenu";
    profileAvatarElement: HTMLImageElement;
    searchButton: HTMLElement;
    documentClickHandler(event: MouseEvent): void;
    linkClickHandler(linkClickEvent: CustomEvent<string>): void;
    signOutClickHandler(event: KeyboardEvent | MouseEvent): void;
    componentDidRender(): void;
    appsMenuClickHandler(event: MouseEvent): void;
    appsMenuKeydownHandler(event: KeyboardEvent): void;
    appsMenuToggle(): void;
    handleAppsMenuAppOpen(event: CustomEvent<ModusNavbarApp>): void;
    mainMenuClickHandler(event: MouseEvent): void;
    mainMenuKeydownHandler(event: KeyboardEvent): void;
    mainMenuToggle(event: KeyboardEvent | MouseEvent): void;
    notificationsMenuClickHandler(event: MouseEvent): void;
    notificationsMenuKeydownHandler(event: KeyboardEvent): void;
    notificationsMenuToggle(): void;
    profileMenuClickHandler(event: MouseEvent): void;
    profileMenuKeydownHandler(event: KeyboardEvent): void;
    profileMenuToggle(): void;
    private hideMenus;
    helpMenuClickHandler(event: MouseEvent): void;
    helpMenuKeyHandler(event: KeyboardEvent): void;
    openHelpMenu(): void;
    searchMenuClickHandler(event: MouseEvent): void;
    searchMenuKeydownHandler(event: KeyboardEvent): void;
    searchOverlayCloseEventHandler(): void;
    showButtonMenuById(id: string): void;
    buttonMenuClickHandler(event: MouseEvent, button: ModusNavbarButton): void;
    buttonMenuKeyDownHandler(event: KeyboardEvent, button: ModusNavbarButton): void;
    dropdownItemSelectHandler(item: ModusNavbarDropdownItem): void;
    getNotificationCount(): string;
    render(): unknown;
}
