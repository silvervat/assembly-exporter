import { EventEmitter } from '../../../stencil-public-runtime';
import { TreeViewItemOptions, TreeViewItemInfo, TreeViewItemDragState, Position } from '../modus-content-tree.types';
export declare class ModusTreeView {
    element: HTMLElement;
    /** (optional) Enables checkbox selection on each tree item */
    checkboxSelection: boolean;
    /** (optional) Set checked tree items */
    checkedItems: string[];
    /** (optional) Disable usage of `tab` key to focus elements inside a tree view. Use `Arrow Up/Down` for focussing a tree item and `Shift + Arrow Right` for focussing a checkbox inside the item.*/
    disableTabbing: boolean;
    /** (optional) Set expanded tree items */
    expandedItems: string[];
    /** (optional) Enables multiple checkbox selection */
    multiCheckboxSelection: boolean;
    /** (optional) Enables multiple tree items selection */
    multiSelection: boolean;
    /** (optional) Set selected tree items */
    selectedItems: string[];
    /** (optional) The default size of all tree items */
    size: 'condensed' | 'large' | 'standard';
    /** (optional) Whether the content tree and items have a border or not */
    borderless: boolean;
    itemDragState: TreeViewItemDragState;
    isDraggingWithKeyboard: boolean;
    itemDrop: EventEmitter<{
        [key: string]: TreeViewItemInfo;
    }>;
    private currentItem;
    private focusItem;
    private items;
    private syncItems;
    private onMouseMove;
    private onMouseUp;
    private onKeyDown;
    readonly INITIAL_DRAG_POSITION: Position;
    clearItemDropState(): TreeViewItemDragState;
    handleDocumentClick(event: MouseEvent): void;
    handleItemDragState(newValue: TreeViewItemDragState, oldValue: TreeViewItemDragState): void;
    handleDraggingWithKeyboard(newValue: boolean): void;
    handleItemDragStart(itemId: string, dragContent: HTMLElement, event: MouseEvent): void;
    handleItemDragStartKeyboard(itemId: string, dragContent: HTMLElement, event: KeyboardEvent): void;
    handleKeys(direction: number, skipTwo?: boolean): void;
    handleArrowKeys(event: KeyboardEvent): void;
    handleItemDragOver(event: MouseEvent): void;
    handleItemDrop(): void;
    handleItemsProps(newValue: string[], oldValue: string[]): void;
    handleOptionsProps(): void;
    /**
     * Fired when an action is clicked within any tree item. Includes both the `actionId` and `nodeId` of the action and item, respectively.
     */
    itemActionClick: EventEmitter;
    handleTreeSlotChange(): void;
    getItemWithinBounds(x: any, y: any): TreeViewItemInfo;
    getParentIds(itemId: string): string[];
    addItem(ele: HTMLElement): void;
    componentDidUpdate(): void;
    deleteItem(itemId: string): void;
    getChildrenIds(itemId: string, recursive?: boolean): string[];
    getLevel(itemId: string): number;
    getFirstItem(): string;
    getLastItem(): string;
    getNavigableChildrenIds(parentId: string): string[];
    getNextNavigableItem(itemId: string, skipTwo?: boolean): string;
    getPrevNavigableItem(itemId: string, skipTwo?: boolean): string;
    getTreeViewItemOptions(): TreeViewItemOptions;
    handleCheckboxSelection(currentId: string, syncOnly?: boolean): void;
    handleItemAdded(event: CustomEvent<HTMLElement>): void;
    handleItemClick(event: CustomEvent): void;
    handleItemExpand(itemId: string): void;
    handleItemFocus(itemId: string): void;
    handleItemSelection(itemId: string, event?: KeyboardEvent | MouseEvent): void;
    handleKeyDown(event: KeyboardEvent): void;
    isItemChecked(itemId: string): boolean;
    isItemExpanded(itemId: string): boolean;
    isItemInFocus(itemId: string): boolean;
    isItemSelected(itemId: string): boolean;
    isItemIndeterminate(itemId: string): boolean;
    isItemDisabled(itemId: string): boolean;
    resetFocusItem(): void;
    showSelectionIndicator(itemId: string): boolean;
    syncTreeViewItem(itemId: string): void;
    updateItem(newValue: TreeViewItemInfo, oldValue?: TreeViewItemInfo): void;
    render(): HTMLUListElement;
}
