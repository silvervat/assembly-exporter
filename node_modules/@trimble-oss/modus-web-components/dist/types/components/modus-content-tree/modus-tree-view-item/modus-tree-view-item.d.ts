import { EventEmitter, FunctionalComponent } from '../../../stencil-public-runtime';
import { TreeViewItemOptions } from '../modus-content-tree.types';
import { ModusActionBarOptions } from '../../modus-action-bar/modus-action-bar';
/**
 * @slot collapseIcon - Slot for custom collapse icon
 * @slot dragIcon - Slot for custom drag icon
 * @slot expandIcon - Slot for custom expand icon
 * @slot itemIcon - Slot for custom item icon
 * @slot label - Slot for custom label element
 */
export declare class ModusTreeViewItem {
    element: HTMLElement;
    /** An event that fires on tree item checkbox click */
    checkboxClick: EventEmitter<boolean>;
    /** An event that fires on tree item label changes */
    itemLabelChange: EventEmitter<string>;
    /** (optional) Disables the tree item */
    disabled: boolean;
    /** (optional) Allows the item to be dragged across the tree */
    draggableItem: boolean;
    /** (optional) Allows the item to be a drop zone so other tree items can be dropped above it */
    droppableItem: boolean;
    /** (optional) Changes the label field into a text box */
    editable: boolean;
    /** An event that fires on tree item click */
    itemClick: EventEmitter<boolean>;
    /** An event that fires on tree item expand/collapse */
    itemExpandToggle: EventEmitter<boolean>;
    /** (required) Label for the tree item */
    label: string;
    /** (required) Unique tree item identifier */
    nodeId: string;
    /** (optional) Tab Index for the tree item */
    tabIndexValue: string | number;
    /** (optional) Actions that can be performed on each item. A maximum of 3 icons will be shown, including overflow menu and expand icons. */
    actions: ModusActionBarOptions[];
    /** To be set true when the tree item is an expandable last child */
    isLastChild: boolean;
    isExpanded: boolean;
    isChildren: boolean;
    handleActionBarClick(event: CustomEvent): void;
    /**
     * @internal
     */
    itemAdded: EventEmitter<HTMLElement>;
    /**
     * Fired when an action button within the tree item is clicked. Includes the `actionId`.
     */
    actionClick: EventEmitter;
    childrenIds: string[];
    forceUpdate: {};
    slots: Map<string, boolean>;
    private refItemContent;
    private refLabelInput;
    private refCheckbox;
    private options;
    readonly SLOT_COLLAPSE_ICON = "collapseIcon";
    readonly SLOT_DRAG_ICON = "dragIcon";
    readonly SLOT_EXPAND_ICON = "expandIcon";
    readonly SLOT_ITEM_ICON = "itemIcon";
    readonly SLOT_LABEL = "label";
    CustomSlot: FunctionalComponent<{
        name: string;
        className?: string;
        defaultContent?: string | HTMLElement;
        display?: boolean;
        tabIndex?: number;
        onClick?: (e: MouseEvent) => void;
        onMouseDown?: (e: MouseEvent) => void;
        onKeyDown?: (e: KeyboardEvent) => void;
        role?: string;
    }>;
    connectedCallback(): void;
    componentDidRender(): void;
    setChildren(): Promise<void>;
    componentWillLoad(): void;
    disconnectedCallback(): void;
    /** Focus the tree item */
    focusItem(): Promise<void>;
    /** Focus the checkbox inside a tree item */
    focusCheckbox(): Promise<void>;
    getChildrenIds(): string[];
    handleCheckboxClick(e?: Event): void;
    handleDefaultKeyDown(e: KeyboardEvent, handler: () => void): void;
    handleDefaultSlotChange(): void;
    handleDrag(e: MouseEvent): void;
    handleDragKeyDown(e: KeyboardEvent): void;
    handleExpandToggle(e?: Event): void;
    handleFocus(): void;
    handleItemClick(e?: KeyboardEvent | MouseEvent): void;
    handleKeyDownTreeItem(e: KeyboardEvent): void;
    handleLabelInputClick(e: Event): void;
    handleLabelInputBlur(): void;
    handleLabelInputKeyDown(e: KeyboardEvent): void;
    handlePropDisabledChange(newValue: boolean): void;
    handlePropNodeIdChange(newValue: string, oldValue: string): void;
    handleRefItemContent(ref: any): void;
    handleTreeSlotChange(): void;
    /**
     * @internal
     */
    initTreeViewItem(newValue: TreeViewItemOptions): Promise<void>;
    rootOptions(): {
        selected: boolean;
        checked: boolean;
        indeterminate: boolean;
        expanded: boolean;
        expandable: boolean;
        level: number;
        checkboxSelection: boolean;
        multiCheckboxSelection: boolean;
        size: string;
        borderless: boolean;
        isDisabled: boolean;
        selectionIndicator: boolean;
    } | {
        level: number;
        selected?: undefined;
        checked?: undefined;
        indeterminate?: undefined;
        expanded?: undefined;
        expandable?: undefined;
        checkboxSelection?: undefined;
        multiCheckboxSelection?: undefined;
        size?: undefined;
        borderless?: undefined;
        isDisabled?: undefined;
        selectionIndicator?: undefined;
    };
    shouldHandleEvent(e?: Event): boolean;
    /**
     * @internal
     */
    updateComponent(): Promise<void>;
    updateLabelInput(): void;
    render(): HTMLLIElement;
}
