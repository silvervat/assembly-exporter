import { Table } from '@tanstack/table-core';
import ColumnDragState from '../models/column-drag-state.model';
export declare class TableHeaderDragDrop {
    columnOrder: string[];
    columnReorder: boolean;
    columnResizeEnabled: boolean;
    container: HTMLElement;
    headersList: HTMLElement[];
    table: Table<unknown>;
    itemDragState: ColumnDragState;
    frozenColumns: string[];
    tableHeaderRowEl: HTMLElement;
    setValues(columnOrder: string[], columnReorder: boolean, columnResizeEnabled: boolean, container: HTMLElement, table: Table<unknown>, itemDragState: ColumnDragState, frozenColumns: string[]): void;
    /**
     * Is invoked on drag start, sets itemDragState item. Calculates the position for drag start.
     * Adds drag item to ModusTableDragItem
     */
    handleDragStart(event: MouseEvent | KeyboardEvent, draggedColumnId: string, elementRef: HTMLTableHeaderCellElement, mouseInteracted: boolean): void;
    /**
     * When being dragged over, the function get the element's id if the element is inside the boundaries.
     * ItemDragState is updated following receipt of the id.
     */
    handleDragOver(event: MouseEvent): void;
    /**
     * Enabled use to move drag item left or right and calls handleDrop on drop.
     */
    handleKeyDown(event: KeyboardEvent): void;
    /**
     * Calls getItemWithinBounds to check the bounds for drop.
     * Updates node class if within bound and updated the itemDragState.
     * @param clientX x-cordinate
     * @param clientY y-cordinate
     */
    updateNodeAndDragState(clientX: number, clientY: number): void;
    /**
     * Reorders columns when dropped in drop zone.
     */
    handleDrop(): void;
    /**
     * This function determines if an object is in a drop zone or not while dragging it.
     * @param x x-cordinate
     * @param y y-cordinate
     * @returns Drop zone element
     */
    getItemWithinBounds(x: number, y: number): HTMLElement;
}
