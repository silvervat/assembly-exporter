import { EventEmitter } from '../../stencil-public-runtime';
import { ModusDateInputEventDetails, ModusDateInputType } from './utils/modus-date-input.models';
export declare class ModusDateInput {
    element: HTMLElement;
    /** (optional) Regular expression to allow characters while typing the input.
     */
    allowedCharsRegex: RegExp | string;
    /** (optional) The input's aria-label. */
    ariaLabel: string | null;
    /** (optional) Sets autofocus on the input. */
    autoFocusInput: boolean;
    /** (optional) Whether the input is disabled. */
    disabled: boolean;
    /** (optional) Disables default validation for the date input. */
    disableValidation: boolean;
    /** (optional) Custom error text displayed for the input. */
    errorText: string;
    /** (optional) Filler date is used as fillers for parts not in the display format when constructing a full date string, for 'value'. It must be in the ISO String format YYYY-MM-DD. Default is {current year}-01-01. */
    fillerDate: string;
    handleFillerDateChange(val: string): void;
    /**
     * Format string for the date input. Default 'mm/dd/yyyy'.
     * Use 'm','mm' for month, 'd','dd' for date and 'yy','yyyy' for year with any separator that is not a regular expression. */
    format: string;
    handleFormatChange(val: string): void;
    /**
     * Alternative formats string for the date input split by | separator.
     * Use 'm','mm' for month, 'd','dd' for date and 'yy','yyyy' for year with any separator that is not a regular expression. */
    altFormats: string;
    handleAltFormatsChange(altFormats: string): void;
    /** (optional) Custom helper text displayed below the input. */
    helperText: string;
    /** (optional) The input's label. */
    label: string;
    /** (optional) The input's placeholder text. */
    placeholder: string;
    /** (optional) Whether the input's content is read-only */
    readOnly: boolean;
    /** (optional) Whether the input is required. */
    required: boolean;
    /** (optional) Show a calendar icon. Note: Clicking on this icon will only emit an event `calendarIconClicked`.  */
    showCalendarIcon: boolean;
    /** (optional) The input's size. */
    size: 'medium' | 'large';
    /** (optional) Denotes what type of date and the types are 'start','end','single'. Required when using `modus-date-picker`. */
    type: ModusDateInputType;
    /** (optional) The input's valid state text. */
    validText: string;
    /** (optional) The minimum date allowed. The date is formatted according to ISO8601 'yyyy-mm-dd'. */
    min: string;
    /** (optional) The maximum date allowed. The date is formatted according to ISO8601 'yyyy-mm-dd'. */
    max: string;
    /** (optional) A string representing the date entered to the input. The date is formatted according to ISO8601 'yyyy-mm-dd'. The displayed date format will differ from the 'value'. */
    value: string;
    handleValueChange(val: string): void;
    /** An event that fires on calendar icon click. */
    calendarIconClicked: EventEmitter<ModusDateInputEventDetails>;
    /** An event that fires on input value out of focus. */
    dateInputBlur: EventEmitter<ModusDateInputEventDetails>;
    /** An event that fires on input value change. */
    valueChange: EventEmitter<ModusDateInputEventDetails>;
    /** An event that fires on value error.*/
    valueError: EventEmitter<string>;
    private classBySize;
    private _dateInput;
    private _dateInputId;
    private _formatter;
    private _altFormatters;
    private _isEditing;
    private autoFormat;
    _dateDisplay: string;
    componentWillLoad(): void;
    /** Methods */
    /** Focus the input. */
    focusInput(): Promise<void>;
    /** Validate the input. */
    validate(): Promise<void>;
    /** Handlers */
    handleCalendarClick(): void;
    handleDefaultKeyDown(e: KeyboardEvent, callback: () => void): void;
    handleBlur(): void;
    handleInputKeyPress(event: KeyboardEvent): boolean;
    handleInputKeyDown(event: KeyboardEvent): void;
    handleOnInput(event: Event): void;
    clearValidation(): void;
    /** Check if the input string matches any of the alternative formats. */
    updateDateFromAltFormats(): string;
    keyIsValidDateCharacter(key: string): boolean;
    setDefaultAllowedKeysRegex(autoFormat: boolean): void;
    validateInput(inputString: string | null): void;
    private validateMinMax;
    render(): any;
}
