import { token, tokenType } from './modus-date-input.tokens';
export declare const ISO_DATE_FORMAT: RegExp;
type dateTokens = Map<tokenType, {
    index: number;
    tokenString: token;
}>;
type tokenSeparators = Map<number, string>;
export default class DateInputFormatter {
    private _dateTokens;
    private _dateRegExp;
    private _displayFormat;
    private _fillerDate;
    private _tokenSeparators;
    constructor(fillerDateString: string, format: string);
    /**
     * Note: Auto formatting is not used yet due to the challenges in handling formats like 'm' and 'd' where the user can input single or double-digit
     */
    autoFormatInput(val: string, autoFormat: boolean): string;
    /**
     * Build a regular expression from the date format
     * Returns an array of regular expression, date tokens, token separators
     */
    buildRegexAndTokens(format: string): [string, dateTokens, tokenSeparators];
    /** Format value in ISO 8601 date format to the display format */
    formatDisplayString(val: string): string | null;
    /** Parse display string to ISO 8601 date format YYYY-MM-DD */
    parseDisplayString(val: string): string | null;
    /**
     * Filler date is used as fillers for parts not in the display format when constructing a full date string,
     * ex: 'yyyy-mm' format doesn't have a date part, hence the date is picked from filler  */
    getFillerDate(val: string): Date;
    parseIsoToDate(val: string): Date;
}
export {};
