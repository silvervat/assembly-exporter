import { EventEmitter } from '../../stencil-public-runtime';
export declare class ModusTextareaInput {
    /** (optional) The input's aria-label. */
    ariaLabel: string | null;
    /** (optional) Whether to activate automatic correction while the user is editing this field in Safari. */
    autocorrect: boolean | 'off' | 'on';
    /** (optional) Sets autofocus on the input. */
    autoFocusInput: boolean;
    /** (optional) Whether the input has a clear button. */
    clearable: boolean;
    /** (optional) Whether the input is disabled. */
    disabled: boolean;
    /** (optional) Which action label to present for the enter key on virtual keyboards. */
    enterkeyhint: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';
    /** (optional) The input's error state text. */
    errorText: string;
    /** (optional) The input's helper text displayed below the input. */
    helperText: string;
    /** (optional) The input's label. */
    label: string;
    /** (optional) The input's maximum length. */
    maxLength: number;
    /** (optional) The input's minimum length. */
    minLength: number;
    /** (optional) The input's placeholder text. */
    placeholder: string;
    /** (optional) Whether the input's content is read-only */
    readOnly: boolean;
    /** (optional) Number of rows on textarea */
    rows: number;
    /** (optional) Whether the input is required. */
    required: boolean;
    /** (optional) The input's size. */
    size: 'medium' | 'large';
    /** (optional) Whether to enable spell checking. */
    spellcheck: boolean;
    /** (optional) The input's text alignment. */
    textAlign: 'left' | 'right';
    /** (optional) The input's valid state text. */
    validText: string;
    /** (optional) The input's value. */
    value: string;
    /** An event that fires on input value change. */
    valueChange: EventEmitter<string>;
    private inputId;
    classBySize: Map<string, string>;
    textInput: HTMLTextAreaElement;
    buttonTogglePassword: HTMLDivElement;
    /** Focus the input. */
    focusInput(): Promise<void>;
    handleClearKeyDown(event: KeyboardEvent): void;
    handleClear(): void;
    handleOnInput(event: Event): void;
    get inputAutocorrect(): "off" | "on";
    render(): unknown;
}
