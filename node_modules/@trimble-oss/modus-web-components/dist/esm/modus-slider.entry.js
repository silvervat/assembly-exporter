import { r as registerInstance, c as createEvent, h } from './index-8e730124.js';
import { g as generateElementId } from './utils-3803a333.js';

const modusSliderCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.modus-slider{display:flex;flex-direction:column;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";height:1.5rem;justify-content:center}.modus-slider .slider{appearance:none;background:var(--modus-slider-range-bg, #0063a3);border-radius:0.5rem;height:0.5rem}.modus-slider label{color:var(--modus-body-color, #252a2e);font-size:0.75rem;margin-bottom:0.25rem}.modus-slider label span{color:var(--modus-body-color, #252a2e);margin:0.25rem}.modus-slider .slider::-webkit-slider-thumb{appearance:none;background:#fff;border:0.125rem solid var(--modus-slider-thumb-border-color, #217cbb);border-radius:50%;cursor:pointer;height:1rem;transition:0.2s background;width:1rem}.modus-slider .slider::-webkit-slider-thumb:hover{background:var(--modus-slider-thumb-border-color, #217cbb)}.modus-slider .slider::-moz-range-thumb{background:#fff;border:0.125rem solid var(--modus-slider-thumb-border-color, #217cbb);border-radius:50%;cursor:pointer;height:1rem;transition:0.2s background;width:1rem}.modus-slider .slider::-moz-range-thumb:hover{background:var(--modus-slider-thumb-border-color, #217cbb)}.modus-slider.disabled{opacity:0.9;pointer-events:none}.modus-slider.disabled .slider{background-color:var(--modus-slider-range-disabled-bg, #e0e1e9)}.modus-slider.disabled .slider::-webkit-slider-thumb{background:var(--modus-slider-thumb-disabled-bg, #cbcdd6);border-color:var(--modus-slider-thumb-disabled-border-color, #b7b9c3)}@media (forced-colors: active){.slider{border:1px solid transparent}}";
const ModusSliderStyle0 = modusSliderCss;

const ModusSlider = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.valueChange = createEvent(this, "valueChange", 7);
        this.valueInput = createEvent(this, "valueInput", 7);
        this.sliderId = generateElementId() + '_slider';
        this.ariaLabel = undefined;
        this.disabled = false;
        this.label = undefined;
        this.maxValue = 100;
        this.minValue = 0;
        this.value = undefined;
    }
    handleOnChange(event) {
        const value = event.currentTarget.value;
        this.value = value;
        this.valueChange.emit(value);
    }
    handleOnInput(event) {
        const value = event.currentTarget.value;
        this.value = value;
        this.valueInput.emit(value);
    }
    render() {
        const className = `modus-slider ${this.disabled ? 'disabled' : ''}`;
        return (h("div", { key: '782fe8cb09fcf6164192a27cdf43a70aedbf4c46', "aria-disabled": this.disabled ? 'true' : undefined, "aria-label": this.ariaLabel || undefined, class: className }, this.label && h("label", { htmlFor: this.sliderId }, this.label), h("input", { key: '8d64f9df8ce9a5b871856dbd13b9404c3b797b91', class: "slider", disabled: this.disabled, id: this.sliderId, max: this.maxValue, min: this.minValue, onChange: (event) => this.handleOnChange(event), onInput: (event) => this.handleOnInput(event), type: "range", value: this.value })));
    }
};
ModusSlider.style = ModusSliderStyle0;

export { ModusSlider as modus_slider };
