import { r as registerInstance, h } from './index-8e730124.js';
import { i as KEYBOARD_TAB, g as KEYBOARD_ENTER, k as KEYBOARD_SPACE, w as KEYBOARD_DOWN, v as KEYBOARD_UP, h as KEYBOARD_ESCAPE } from './modus-table.constants-c083d0c0.js';

const modusTableColumnsVisibilityCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.columns-visibility-menu{display:flex;flex-direction:column}.columns-visibility-menu .column-visibility-header{color:var(--modus-primary, #019aeb);font-size:0.875rem;font-weight:700;line-height:18px;margin:12px;margin-bottom:5px}.columns-visibility-menu .column-visibility-content{overflow:auto}.columns-visibility-menu .column-visibility-item{padding:5px 5px 5px 12px}.columns-visibility-menu .column-visibility-item:focus,.columns-visibility-menu .column-visibility-item:hover{background:var(--modus-group-item-hover-bg, #e0e1e9);outline:none}.columns-visibility-menu .column-visibility-item:last-child{margin-bottom:10px}.columns-visibility-menu .column-visibility-buttons-container{display:flex;justify-content:flex-end;margin-bottom:12px;margin-right:12px}modus-button{padding:12px 0 0 12px}";
const ModusTableColumnsVisibilityStyle0 = modusTableColumnsVisibilityCss;

const ModusTableColumnsVisibility = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.refItemContent = [];
        this.getAllLeafColumns = undefined;
        this.columnsVisibility = undefined;
        this.showDropdown = undefined;
        this.menuIconContainerRef = undefined;
        this.toggleDropdown = undefined;
        this.maxHeight = undefined;
        this.columnsVisibilityState = new Map();
    }
    componentWillLoad() {
        // Initialize columns visibility state based on hiddenColumns
        this.initializeVisibilityState();
    }
    applyColumnsVisibility() {
        this.getAllLeafColumns().forEach((column) => {
            if (this.columnsVisibilityState.has(column.id)) {
                column.toggleVisibility(this.columnsVisibilityState.get(column.id));
            }
        });
        this.toggleDropdown(!this.showDropdown);
        this.menuIconContainerRef.focus();
    }
    closeDropdown() {
        this.columnsVisibilityState = new Map();
        this.toggleDropdown(!this.showDropdown);
        this.menuIconContainerRef.focus();
    }
    handleApplyKeyDown(event) {
        if (event.key.toLowerCase() === KEYBOARD_TAB && !event.shiftKey) {
            this.toggleDropdown(false);
        }
    }
    /**
     * Handling columns dropdown keyboard(arrowUp/arrowDown) navigation
     * @param event keyboard event
     * @param columnIndex column index
     */
    handleColumnItemKeyDown(event, columnIndex) {
        let currentRefItemIndex;
        const recursiveTillAnotherFocusItem = (refItemIndex, isIncrement) => {
            this.refItemContent[refItemIndex]
                ? this.refItemContent[refItemIndex].focus()
                : recursiveTillAnotherFocusItem(isIncrement ? refItemIndex + 1 : refItemIndex - 1, isIncrement);
        };
        const eventKey = event.key.toLowerCase();
        if (eventKey === KEYBOARD_ENTER || eventKey === KEYBOARD_SPACE) {
            this.toggleColumnVisibility(columnIndex);
        }
        else if (eventKey === KEYBOARD_DOWN) {
            currentRefItemIndex = columnIndex + 1 < this.refItemContent.length ? columnIndex + 1 : this.refItemContent.length - 1;
            recursiveTillAnotherFocusItem(currentRefItemIndex, true);
            event.preventDefault();
        }
        else if (eventKey === KEYBOARD_UP) {
            currentRefItemIndex = columnIndex - 1 >= 0 ? columnIndex - 1 : 0;
            recursiveTillAnotherFocusItem(currentRefItemIndex, false);
            event.preventDefault();
        }
    }
    /**
     * Adding column item refs(not disabled)
     */
    handleRefColumnItemContent(el, i, requiredColumn) {
        if (!requiredColumn) {
            this.refItemContent[i] = el;
        }
    }
    initializeVisibilityState() {
        // Set the visibility state based on hiddenColumns prop
        this.getAllLeafColumns().forEach((column) => {
            var _a, _b, _c, _d;
            const isRequired = (_b = (_a = this.columnsVisibility) === null || _a === void 0 ? void 0 : _a.requiredColumns) === null || _b === void 0 ? void 0 : _b.includes(column.id);
            const isHidden = (_d = (_c = this.columnsVisibility) === null || _c === void 0 ? void 0 : _c.hiddenColumns) === null || _d === void 0 ? void 0 : _d.includes(column.id);
            if (!isRequired && isHidden) {
                column.toggleVisibility(false);
            }
        });
    }
    toggleColumnVisibility(columnIndex) {
        const shadowRootChildren = this.refItemContent[columnIndex].children[0].shadowRoot
            .children;
        const modusCheckboxElement = shadowRootChildren[shadowRootChildren.length - 1];
        modusCheckboxElement.click();
    }
    /**
     * Returns true if the column is required column
     */
    checkIfRequiredColumn(columnId) {
        var _a, _b;
        return (_b = (_a = this.columnsVisibility) === null || _a === void 0 ? void 0 : _a.requiredColumns) === null || _b === void 0 ? void 0 : _b.includes(columnId);
    }
    renderColumnsChecklist() {
        const columnVisibilityItemControls = (columnId, columnIndex) => {
            return {
                key: columnId,
                tabIndex: this.checkIfRequiredColumn(columnId) ? -1 : 0,
                ref: (el) => {
                    this.handleRefColumnItemContent(el, columnIndex, this.checkIfRequiredColumn(columnId));
                },
                onClick: () => this.toggleColumnVisibility(columnIndex),
                onKeyDown: (event) => this.handleColumnItemKeyDown(event, columnIndex),
            };
        };
        return this.getAllLeafColumns().map((column, index) => {
            var _a, _b;
            return (h("div", Object.assign({}, columnVisibilityItemControls(column.id, index), { class: "column-visibility-item" }), h("modus-checkbox", { ariaLabel: column.columnDef.header, label: column.columnDef.header, checked: column.getIsVisible(), onCheckboxClick: (e) => this.columnsVisibilityState.set(column.id, e.detail), disabled: (_b = (_a = this.columnsVisibility) === null || _a === void 0 ? void 0 : _a.requiredColumns) === null || _b === void 0 ? void 0 : _b.includes(column.id), stopPropagation: true })));
        });
    }
    renderCancelApplyButtons() {
        return (h("div", { class: "column-visibility-buttons-container" }, h("modus-button", { size: "small", buttonStyle: "outline", onClick: () => this.closeDropdown() }, "Cancel"), h("modus-button", { size: "small", onClick: () => this.applyColumnsVisibility(), onKeyDown: (event) => this.handleApplyKeyDown(event) }, "Apply")));
    }
    render() {
        return (h("div", { key: '7357d1c0c3efb961c410ee2191f516673ff1fe31', class: "columns-visibility-menu", style: { maxHeight: this.maxHeight || '60dvh' } }, h("div", { key: '156fc3b9d58040a473f888d81f9e6a00021aac3b', class: "column-visibility-header" }, this.columnsVisibility.title || 'Columns'), h("div", { key: '588ed7b5939c4bced93b593032584c852208cd02', class: "column-visibility-content" }, this.renderColumnsChecklist()), this.renderCancelApplyButtons()));
    }
};
ModusTableColumnsVisibility.style = ModusTableColumnsVisibilityStyle0;

// eslint-disable-next-line
const IconHorizontalEllipsis = (props) => {
    var _a, _b, _c;
    return (h("svg", { class: `icon-horizontal-ellipsis ${props.pressed ? 'pressed' : ''}`, fill: (_a = props.color) !== null && _a !== void 0 ? _a : 'currentColor', height: (_b = props.size) !== null && _b !== void 0 ? _b : 16, onClick: props.onClick ? () => props.onClick() : null, viewBox: "0 0 24 24", width: (_c = props.size) !== null && _c !== void 0 ? _c : 16, xmlns: "http://www.w3.org/2000/svg" },
        h("path", { d: "M10.59 10.59c-.78.78-.78 2.05 0 2.83s2.05.78 2.83 0 .78-2.05 0-2.83-2.05-.78-2.83 0Zm7 0c-.78.78-.78 2.05 0 2.83s2.05.78 2.83 0 .78-2.05 0-2.83-2.05-.78-2.83 0Zm-14 0c-.78.78-.78 2.05 0 2.83s2.05.78 2.83 0 .78-2.05 0-2.83-2.05-.78-2.83 0Z" })));
};

const modusTableDropdownMenuCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.dropdown-menu-container{display:inline-block;padding-left:12px;position:relative}.dropdown-menu-container .dropdown-menu-icon{border-radius:3px;cursor:pointer;display:flex;padding:4px}.dropdown-menu-container .dropdown-menu-icon svg{fill:var(--modus-icon-colour, #252a2e)}.dropdown-menu-container .dropdown-menu-icon:hover{background:var(--modus-group-item-hover-bg, #e0e1e9)}.dropdown-menu-container .dropdown-menu{background-color:var(--modus-group-item-bg, #fff);border:1px solid var(--modus-group-item-border-color, #e0e1e9);box-shadow:0 0 4px var(--modus-card-shadow-color, rgba(54, 53, 69, 0.3019607843));display:none;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";position:absolute;right:0;top:28px;width:240px;z-index:99}.dropdown-menu-container .dropdown-menu.visible{display:block}";
const ModusTableDropdownMenuStyle0 = modusTableDropdownMenuCss;

const ModusTableDropdownMenu = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.context = undefined;
        this.show = false;
    }
    handleClickOutside(event) {
        // Closing the dropdown when click outside
        const withinBoundaries = event.composedPath();
        if (!withinBoundaries.find((item) => item['className'] === 'dropdown-menu-container')) {
            this.show = false;
        }
    }
    handleIconKeyDown(event) {
        const eventKey = event.key.toLowerCase();
        if (eventKey === KEYBOARD_ENTER || eventKey === KEYBOARD_SPACE) {
            this.show = true;
            event.preventDefault();
        }
        else if (eventKey === KEYBOARD_ESCAPE) {
            this.show = false;
            event.preventDefault();
        }
    }
    handleDropdownKeyDown(event) {
        if (event.key.toLowerCase() === KEYBOARD_ESCAPE) {
            this.show = false;
            this.menuIconContainerRef.focus();
            event.preventDefault();
        }
    }
    render() {
        const { tableInstance: { getAllLeafColumns }, toolbarOptions: options, maxHeight, } = this.context;
        return (h("div", { key: 'aab90de74a93625cd6dad906d014cc3afed51693', class: "dropdown-menu-container" }, h("div", { key: 'e9d0bb984aa0442278b86acee7d5d124232f1cf0', tabIndex: 0, class: "dropdown-menu-icon", onClick: () => (this.show = !this.show), onKeyDown: (event) => this.handleIconKeyDown(event), ref: (el) => (this.menuIconContainerRef = el) }, h(IconHorizontalEllipsis, { key: '54f8128ab8b0150fe952f159b2f1578941844624', size: "20" })), (options === null || options === void 0 ? void 0 : options.columnsVisibility) && (h("div", { onKeyDown: (event) => this.handleDropdownKeyDown(event), class: `dropdown-menu ${this.show ? 'visible' : ''}` }, h("modus-table-columns-visibility", { getAllLeafColumns: getAllLeafColumns, columnsVisibility: options === null || options === void 0 ? void 0 : options.columnsVisibility, showDropdown: this.show, menuIconContainerRef: this.menuIconContainerRef, toggleDropdown: (show) => (this.show = show), maxHeight: maxHeight })))));
    }
};
ModusTableDropdownMenu.style = ModusTableDropdownMenuStyle0;

export { ModusTableColumnsVisibility as modus_table_columns_visibility, ModusTableDropdownMenu as modus_table_dropdown_menu };
