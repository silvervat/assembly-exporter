import { r as registerInstance, c as createEvent, h, F as Fragment, H as Host } from './index-8e730124.js';

const modusTableRowActionsCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");modus-table-row-actions{align-items:center;display:flex;gap:8px;justify-content:center}";
const ModusTableRowActionsStyle0 = modusTableRowActionsCss;

const ModusTableRowActions = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.overflowRowActions = createEvent(this, "overflowRowActions", 7);
        this.row = undefined;
        this.context = undefined;
    }
    handleMoreButtonClick(e, menu) {
        const { left, top, height } = this.overflowButtonRef.getBoundingClientRect();
        this.overflowRowActions.emit({
            componentId: this.context.componentId,
            actions: menu,
            position: { x: left, y: top + height },
            row: this.row,
            onClose: () => this.overflowButtonRef.focusButton(),
        });
        e.preventDefault();
    }
    handleMoreButtonKeydown(e, menu) {
        if (e.key.toLowerCase() === 'enter') {
            this.handleMoreButtonClick(e, menu);
            e.preventDefault();
        }
    }
    handleActionButtonClick(e, actionId) {
        const { rowActionClick } = this.context;
        rowActionClick.emit({ actionId, row: this.row.original });
        e.preventDefault();
    }
    handleActionButtonKeydown(e, actionId) {
        if (e.key.toLowerCase() === 'enter') {
            this.handleActionButtonClick(e, actionId);
            e.preventDefault();
        }
    }
    render() {
        const { rowActions } = this.context;
        let actionButtons;
        let overflowMenu;
        if (rowActions) {
            actionButtons = rowActions.filter((action) => !action.isOverflow);
            overflowMenu = rowActions.filter((action) => action.isOverflow);
        }
        return (h(Host, { key: '8350a91bfd70d6399a0e1792ac3c00b429b9c5ad' }, actionButtons === null || actionButtons === void 0 ? void 0 :
            actionButtons.map(({ label, icon, id, isDisabled = () => false }) => {
                const disabled = isDisabled(this.row.original);
                return (h("modus-button", { class: "row-actions", "button-style": "borderless", color: "secondary", "icon-only": icon, size: "small", ariaLabel: label, disabled: disabled, onKeyDown: (e) => this.handleActionButtonKeydown(e, id), onClick: (e) => (!disabled ? this.handleActionButtonClick(e, id) : e.preventDefault()) }));
            }), (overflowMenu === null || overflowMenu === void 0 ? void 0 : overflowMenu.length) > 0 && (h(Fragment, null, h("modus-button", { ref: (el) => (this.overflowButtonRef = el), class: "row-actions-menu-button", "button-style": "borderless", color: "secondary", "icon-only": "more_vertical", ariaLabel: "overflow button", size: "small", onKeyDown: (e) => this.handleMoreButtonKeydown(e, overflowMenu), onClick: (e) => this.handleMoreButtonClick(e, overflowMenu) })))));
    }
};
ModusTableRowActions.style = ModusTableRowActionsStyle0;

export { ModusTableRowActions as modus_table_row_actions };
