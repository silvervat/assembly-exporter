import { r as registerInstance, c as createEvent, h } from './index-8e730124.js';
import { I as IconInfo, a as IconCheckCircle, b as IconWarning } from './icon-warning-7cc591c1.js';
import { I as IconError } from './icon-error-ccdaca93.js';
import { I as IconClose } from './icon-close-35d657e6.js';

const modusAlertCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");div.alert{align-items:center;border:1px solid;border-left-width:0.5rem;border-radius:4px;box-sizing:border-box;display:flex;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";min-height:56px;padding:1rem;position:relative}div.alert.type-error{background-color:var(--modus-alert-danger-bg, #fff);border-color:var(--modus-alert-danger-border-color, #da212c);color:var(--modus-alert-danger-color, #da212c)}div.alert.type-error ::slotted(a){color:var(--modus-alert-danger-link-color, #a01820)}div.alert.type-error .icon-check-circle path,div.alert.type-error .icon-error path,div.alert.type-error .icon-info path,div.alert.type-error .icon-warning path{fill:var(--modus-alert-danger-color, #da212c)}div.alert.with-action-button{padding:12px 16px}div.alert.type-info{background-color:var(--modus-alert-primary-bg, #fff);border-color:var(--modus-alert-primary-border-color, #0063a3);color:var(--modus-alert-primary-color, #0063a3)}div.alert.type-info ::slotted(a){color:var(--modus-alert-primary-link-color, #003b61)}div.alert.type-info .icon-check-circle path,div.alert.type-info .icon-error path,div.alert.type-info .icon-info path,div.alert.type-info .icon-warning path{fill:var(--modus-alert-primary-color, #0063a3)}div.alert.type-info-gray{background-color:var(--modus-alert-secondary-bg, #fff);border-color:var(--modus-alert-secondary-border-color, #6a6e79);color:var(--modus-alert-secondary-color, #6a6e79)}div.alert.type-info-gray ::slotted(a){color:var(--modus-alert-secondary-link-color, #4b4e56)}div.alert.type-info-gray .icon-check-circle path,div.alert.type-info-gray .icon-error path,div.alert.type-info-gray .icon-info path,div.alert.type-info-gray .icon-warning path{fill:var(--modus-alert-secondary-color, #6a6e79)}div.alert.type-info-gray-dark{background-color:var(--modus-alert-dark-bg, #fff);border-color:var(--modus-alert-dark-border-color, #464b52);color:var(--modus-alert-dark-color, #252a2e)}div.alert.type-info-gray-dark ::slotted(a){color:var(--modus-alert-dark-link-color, #070809)}div.alert.type-info-gray-dark .icon-check-circle path,div.alert.type-info-gray-dark .icon-error path,div.alert.type-info-gray-dark .icon-info path,div.alert.type-info-gray-dark .icon-warning path{fill:var(--modus-alert-dark-color, #252a2e)}div.alert.type-success{background-color:var(--modus-alert-success-bg, #fff);border-color:var(--modus-alert-success-border-color, #006638);color:var(--modus-alert-success-color, #006638)}div.alert.type-success ::slotted(a){color:var(--modus-alert-success-link-color, #002414)}div.alert.type-success .icon-check-circle path,div.alert.type-success .icon-error path,div.alert.type-success .icon-info path,div.alert.type-success .icon-warning path{fill:var(--modus-alert-success-color, #006638)}div.alert.type-warning{background-color:var(--modus-alert-warning-bg, #fff);border-color:var(--modus-alert-warning-border-color, #e49325);color:var(--modus-alert-warning-color, #252a2e)}div.alert.type-warning ::slotted(a){color:var(--modus-alert-warning-link-color, #b16f16)}div.alert.type-warning .icon-check-circle path,div.alert.type-warning .icon-error path,div.alert.type-warning .icon-info path,div.alert.type-warning .icon-warning path{fill:var(--modus-alert-warning-color, #252a2e)}div.alert .icon{display:flex}div.alert .message{font-size:0.875rem;font-weight:700}div.alert .icon-check-circle,div.alert .icon-error,div.alert .icon-info,div.alert .icon-warning{margin-right:8px}div.alert .alert-buttons-container{align-items:center;display:flex;margin-left:auto}div.alert .action-button{display:flex;margin-right:2px}div.alert .icon-close-container{cursor:pointer;display:flex}div.alert .icon-close-container .icon-close path{fill:var(--modus-alert-close-color, #252a2e)}div.alert .icon-close-container .icon-close:hover{opacity:var(--modus-alert-close-hover-opacity, 0.5)}";
const ModusAlertStyle0 = modusAlertCss;

const ModusAlert = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.dismissClick = createEvent(this, "dismissClick", 7);
        this.actionClick = createEvent(this, "actionClick", 7);
        this.classByType = new Map([
            ['error', 'type-error'],
            ['info', 'type-info'],
            ['info-gray', 'type-info-gray'],
            ['info-gray-dark', 'type-info-gray-dark'],
            ['success', 'type-success'],
            ['warning', 'type-warning'],
        ]);
        this.infoTypes = ['info', 'info-gray', 'info-gray-dark'];
        this.ariaLabel = undefined;
        this.buttonAriaLabel = undefined;
        this.buttonText = undefined;
        this.dismissible = undefined;
        this.message = undefined;
        this.type = 'info';
    }
    elementKeyupHandler(event) {
        switch (event.code) {
            case 'Escape':
                if (!this.dismissible) {
                    return;
                }
                this.dismissClick.emit();
                break;
        }
    }
    render() {
        var _a, _b, _c;
        const iconSize = '24';
        const MAX_LENGTH = 300;
        const className = {
            alert: true,
            'with-action-button': (this.dismissible && ((_a = this.buttonText) === null || _a === void 0 ? void 0 : _a.length) > 0) || ((_b = this.buttonText) === null || _b === void 0 ? void 0 : _b.length) > 0,
        };
        const typeClass = this.classByType.get(this.type);
        if (typeClass != undefined) {
            className[typeClass] = true;
        }
        return (h("div", { key: '6387fc2db69237ee764673542b75d14e13553481', "aria-label": this.ariaLabel || undefined, class: className, role: "alert" }, h("div", { key: '8b108f38bcafbfe4ac4e2e1301de1fb129ce73aa', class: "icon" }, this.type === 'error' ? h(IconError, { size: iconSize }) : null, this.infoTypes.includes(this.type) ? h(IconInfo, { size: iconSize }) : null, this.type === 'success' ? h(IconCheckCircle, { size: iconSize }) : null, this.type === 'warning' ? h(IconWarning, { size: iconSize }) : null), h("div", { key: '9d7ae86209877e66cb7b4f9cf2bd2faf892f6e26', class: "message" }, this.message && this.message.length > MAX_LENGTH ? `${this.message.substring(0, MAX_LENGTH)}...` : this.message, h("slot", { key: '5e3d771ecbaa77d96b72be774f7939ae67db6bd7' })), h("div", { key: '125451a1aa87b14901085aef746e492e4fc915e1', class: "alert-buttons-container" }, ((_c = this.buttonText) === null || _c === void 0 ? void 0 : _c.length) > 0 && (h("modus-button", { class: "action-button", buttonStyle: "outline", color: "secondary", size: "medium", ariaLabel: this.buttonAriaLabel, onButtonClick: () => this.actionClick.emit(), onKeyDown: (e) => this.handleKeyDown(e, 'action') }, this.buttonText)), this.dismissible && (h("div", { class: "icon-close-container", "aria-label": "Dismiss alert", role: "button", tabIndex: 0, onClick: () => this.dismissClick.emit(), onKeyDown: (e) => this.handleKeyDown(e, 'dismiss') }, h(IconClose, { size: "18" }))))));
    }
    handleKeyDown(e, buttonType) {
        if (e.key.toUpperCase() === 'ENTER') {
            if (buttonType === 'dismiss') {
                this.dismissClick.emit();
                return;
            }
            this.actionClick.emit();
        }
    }
};
ModusAlert.style = ModusAlertStyle0;

export { ModusAlert as modus_alert };
