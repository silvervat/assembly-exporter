import { h, r as registerInstance, c as createEvent } from './index-8e730124.js';
import { I as IconSearch } from './icon-search-004e29b1.js';
import { I as IconClose } from './icon-close-35d657e6.js';
import { g as generateElementId } from './utils-3803a333.js';
import { I as IconVisibilityOn } from './IconVisibilityOn-4d4ac4d9.js';
import { I as IconError } from './icon-error-ccdaca93.js';

// eslint-disable-next-line
const IconVisibilityOff = (props) => {
    var _a, _b, _c;
    return (h("svg", { class: `icon-visibility-off ${props.pressed ? 'pressed' : ''}`, width: (_a = props.size) !== null && _a !== void 0 ? _a : 16, height: (_b = props.size) !== null && _b !== void 0 ? _b : 16, fill: (_c = props.color) !== null && _c !== void 0 ? _c : 'currentColor', onClick: props.onClick ? () => props.onClick() : null, viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg" },
        h("path", { d: "M12 7a4.481 4.481 0 0 1 4.5 4.5 5.08 5.08 0 0 1-.3 1.7l2.7 2.7a9.556 9.556 0 0 0 3.1-4.3 10.796 10.796 0 0 0-10-6.8 10.46 10.46 0 0 0-3.6.6l2 2A2.934 2.934 0 0 1 12 7ZM2.9 4.5 5 6.6l.4.4A10.79 10.79 0 0 0 2 11.5a10.796 10.796 0 0 0 10 6.8 10.571 10.571 0 0 0 4-.8l.4.4 2.7 2.7 1.2-1.2-16.2-16Zm5 5L9.3 11c0 .2-.1.4-.1.6a2.689 2.689 0 0 0 2.7 2.7 1.268 1.268 0 0 0 .6-.1l1.4 1.4a4.552 4.552 0 0 1-2 .5 4.481 4.481 0 0 1-4.5-4.5 7.173 7.173 0 0 1 .5-2.1Zm4-.7 2.9 2.9v-.1a2.689 2.689 0 0 0-2.7-2.7Z" })));
};

const modusTextInputCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.modus-text-input{border-radius:4px;display:inline-flex;flex-direction:column;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";width:100%}.modus-text-input label{color:var(--modus-input-label-color, #464b52);font-size:0.75rem;font-weight:700;margin-bottom:0.25rem}.modus-text-input label span{color:var(--modus-input-border-color, #6a6e79);margin:0.25rem}.modus-text-input .label-container{display:inline-block;margin-bottom:0.25rem}.modus-text-input .label-container .required{bottom:0.0625rem;color:var(--modus-input-validation-error-color, #da212c);margin-left:0.25rem;position:relative}.modus-text-input .input-container{align-items:center;background-color:var(--modus-input-bg, #fff);border:0.0625rem solid var(--modus-input-border-color, #6a6e79);border-radius:4px;box-sizing:border-box;display:flex;flex-direction:row;height:2rem;margin:0;padding:0;position:relative;width:100%}.modus-text-input .input-container svg{padding:0 0.375rem}.modus-text-input .input-container svg path{fill:var(--modus-input-helper-icon-color, #6a6e79)}.modus-text-input .input-container input{background-color:transparent;border:none;color:var(--modus-input-color, #252a2e);font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";font-size:var(--input-font-size, 0.75rem);outline:none;padding:0 0.5rem;width:100%}.modus-text-input .input-container input.has-left-icon{padding-left:0}.modus-text-input .input-container input.has-right-icon{padding-right:0}.modus-text-input .input-container input.text-align-right{text-align:right}.modus-text-input .input-container input::placeholder{color:var(--modus-input-hint-text-color, #a3a6b1)}.modus-text-input .input-container .icons{align-items:center;color:var(--modus-input-helper-icon-color, #6a6e79);cursor:pointer;display:flex;font-size:1rem;height:100%;justify-content:center;width:2rem}.modus-text-input .input-container .icons.clear{cursor:pointer;min-height:1.5rem}.modus-text-input .input-container .icons.clear:hover svg path{opacity:0.75}.modus-text-input .input-container:hover{cursor:text}.modus-text-input .input-container:focus-within{border-color:var(--modus-input-border-active-color, #217cbb);box-shadow:0 0 0 1px var(--modus-input-border-active-color, #217cbb)}.modus-text-input .input-container.error{border-color:var(--modus-input-validation-error-color, #da212c);box-shadow:0 0 0 1px var(--modus-input-validation-error-color, #da212c)}.modus-text-input .input-container.valid{border-color:var(--modus-input-validation-success-color, #006638);box-shadow:0 0 0 1px var(--modus-input-validation-success-color, #006638)}.modus-text-input .input-container.large{height:3rem}.modus-text-input .input-container.large input{font-size:0.875rem;padding:0 1rem}.modus-text-input .input-container:has(input[readonly]){background-color:var(--modus-input-readonly-bg, #e0e1e9);border-color:transparent}.modus-text-input .sub-text{font-size:0.75rem;margin-top:0.25rem}.modus-text-input .sub-text.helper{color:var(--modus-input-label-color, #464b52);display:block;font-weight:600;margin:0}.modus-text-input .sub-text.error{color:var(--modus-input-validation-error-color, #da212c);display:inline-flex}.modus-text-input .sub-text.error svg{margin-right:0.25rem}.modus-text-input .sub-text.valid{color:var(--modus-input-validation-success-color, #006638)}.modus-text-input span.required{color:var(--modus-input-validation-error-color, #da212c)}.modus-text-input.large{font-size:0.875rem;height:48px}.modus-text-input.disabled{pointer-events:none}.modus-text-input.disabled .input-container{background-color:var(--modus-input-disabled-bg, #e0e1e9);border:0.0625rem solid var(--modus-input-disabled-border-color, #e0e1e9);border-color:transparent}.modus-text-input.disabled .input-container svg path{fill:var(--modus-input-disabled-color, #a3a6b1)}.modus-text-input.disabled .input-container .icons{background-color:var(--modus-input-disabled-bg, #e0e1e9);cursor:default}.modus-text-input.disabled .input-container .icons.clear{visibility:hidden}.modus-text-input.disabled .input-container input{background-color:transparent;border-radius:0;color:var(--modus-input-disabled-color, #a3a6b1);height:100%}.modus-text-input ::-ms-reveal{display:none}.modus-text-input .toggle-password svg.visibility,.modus-text-input .toggle-password svg.visibility-off{display:none}.modus-text-input input{background-position:right calc(0.375em + 0.1875rem) center;background-repeat:no-repeat;background-size:calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);padding-right:calc(1.5em + 0.75rem)}.modus-text-input input[type=password]+.toggle-password>svg.visibility{display:inline}.modus-text-input input[type=text]+.toggle-password>svg.visibility-off{display:inline}.modus-text-input input[type=search]::-webkit-search-cancel-button,.modus-text-input input[type=search]::-webkit-search-decoration{-webkit-appearance:none;appearance:none}";
const ModusTextInputStyle0 = modusTextInputCss;

const ModusTextInput = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.valueChange = createEvent(this, "valueChange", 7);
        this.inputId = generateElementId() + '_text_input';
        this.classBySize = new Map([
            ['medium', 'medium'],
            ['large', 'large'],
        ]);
        this.ariaLabel = undefined;
        this.autocapitalize = undefined;
        this.autocorrect = undefined;
        this.autocomplete = undefined;
        this.autoFocusInput = undefined;
        this.clearable = false;
        this.disabled = undefined;
        this.enterkeyhint = undefined;
        this.errorText = undefined;
        this.helperText = undefined;
        this.includeErrorIcon = undefined;
        this.includeSearchIcon = undefined;
        this.includePasswordTextToggle = true;
        this.inputmode = undefined;
        this.label = undefined;
        this.maxLength = undefined;
        this.minLength = undefined;
        this.pattern = undefined;
        this.placeholder = undefined;
        this.readOnly = undefined;
        this.required = undefined;
        this.size = 'medium';
        this.spellcheck = undefined;
        this.textAlign = 'left';
        this.type = 'text';
        this.validText = undefined;
        this.value = undefined;
        this.passwordVisible = true;
    }
    /** Focus the input. */
    async focusInput() {
        this.textInput.focus();
    }
    handleClearKeyDown(event) {
        if (event.key !== 'Enter' && event.key !== ' ') {
            return;
        }
        this.handleClear();
    }
    handleClear() {
        this.textInput.value = null;
        this.value = null;
        this.valueChange.emit(null);
    }
    handleOnInput(event) {
        const value = event.currentTarget.value;
        this.value = value;
        this.valueChange.emit(value);
    }
    handleTogglePasswordKeyDown(event) {
        if (event.key !== 'Enter' && event.key !== ' ') {
            return;
        }
        this.handleTogglePassword();
    }
    handleTogglePassword() {
        if (this.textInput.type === 'password') {
            this.passwordVisible = false;
            this.textInput.type = 'text';
            this.buttonTogglePassword.setAttribute('aria-label', 'Hide password.');
        }
        else {
            this.passwordVisible = true;
            this.textInput.type = 'password';
            this.buttonTogglePassword.setAttribute('aria-label', 'Show password as plain text. ' + 'Warning: this will display your password on the screen.');
        }
    }
    get inputAutocorrect() {
        if (this.autocorrect === true) {
            return 'on';
        }
        else if (this.autocorrect === false) {
            return 'off';
        }
        return this.autocorrect;
    }
    render() {
        var _a, _b;
        const iconSize = this.size === 'large' ? '24' : '16';
        const isPassword = this.type === 'password';
        const showPasswordToggle = !!(this.includePasswordTextToggle && isPassword && ((_a = this.value) === null || _a === void 0 ? void 0 : _a.length));
        const showClearIcon = this.clearable && !this.readOnly && !!this.value;
        const buildTextInputClassNames = () => {
            const classNames = [];
            if (this.includeSearchIcon) {
                classNames.push('has-left-icon');
            }
            if (showClearIcon) {
                classNames.push('has-right-icon');
            }
            classNames.push(`text-align-${this.textAlign}`);
            return classNames.join(' ');
        };
        const buildContainerClassNames = () => {
            const classNames = [];
            classNames.push('modus-text-input');
            if (this.disabled) {
                classNames.push('disabled');
            }
            return classNames.join(' ');
        };
        return (h("div", { class: buildContainerClassNames() }, this.label || this.required ? (h("div", { class: 'label-container' }, this.label ? h("label", { htmlFor: this.inputId }, this.label) : null, this.required ? h("span", { class: "required" }, "*") : null, this.helperText ? h("label", { class: "sub-text helper" }, this.helperText) : null)) : null, h("div", { class: `input-container ${this.errorText ? 'error' : this.validText ? 'valid' : ''} ${this.classBySize.get(this.size)}`, onClick: () => this.textInput.focus(), part: "input-container" }, this.includeSearchIcon ? h(IconSearch, { size: iconSize }) : null, h("input", { id: this.inputId, "aria-invalid": !!this.errorText, "aria-label": this.ariaLabel || undefined, "aria-required": (_b = this.required) === null || _b === void 0 ? void 0 : _b.toString(), autocapitalize: this.autocapitalize, autocomplete: this.autocomplete, autocorrect: this.autocorrect, class: buildTextInputClassNames(), disabled: this.disabled, enterkeyhint: this.enterkeyhint, inputmode: this.inputmode, maxlength: this.maxLength, minlength: this.minLength, onInput: (event) => this.handleOnInput(event), pattern: this.pattern, placeholder: this.placeholder, readonly: this.readOnly, ref: (el) => (this.textInput = el), spellcheck: this.spellcheck, tabIndex: 0, type: this.type, value: this.value, autofocus: this.autoFocusInput }), showPasswordToggle && (h("div", { class: "icons toggle-password", tabIndex: 0, onKeyDown: (event) => this.handleTogglePasswordKeyDown(event), onClick: () => this.handleTogglePassword(), role: "button", "aria-label": "Show password as plain text. Warning: this will display your password on the screen.", ref: (el) => (this.buttonTogglePassword = el) }, this.passwordVisible ? h(IconVisibilityOn, { size: iconSize }) : h(IconVisibilityOff, { size: iconSize }))), showClearIcon && (h("span", { class: "icons clear", tabIndex: 0, onKeyDown: (event) => this.handleClearKeyDown(event), onClick: () => this.handleClear(), role: "button", "aria-label": "Clear entry" }, h(IconClose, { size: iconSize })))), this.errorText ? (h("label", { class: "sub-text error" }, this.includeErrorIcon ? h(IconError, { size: iconSize }) : null, this.errorText)) : this.validText ? (h("label", { class: "sub-text valid" }, this.validText)) : null));
    }
};
ModusTextInput.style = ModusTextInputStyle0;

export { ModusTextInput as modus_text_input };
