import { r as registerInstance, c as createEvent, h, g as getElement } from './index-8e730124.js';

const TIME_12_HOUR_CLOCK_REGEX = /^(1[0-2]|0?[1-9]):([0-5][0-9]) ([AaPp][Mm])$/;
const TIME_24_HOUR_CLOCK_REGEX = /^(2[0-3]|[01]?[0-9]):([0-5][0-9])$/;
// eslint-disable-next-line no-useless-escape
const TIME_12_HOUR_CLOCK_ALLOWED_CHARS_REGEX = /[\d:apm\s]/gi;
const TIME_24_HOUR_CLOCK_ALLOWED_CHARS_REGEX = /[\d:]/gi;
class TimeInputFormatter {
    constructor(hasAmPm) {
        this.hasAmPm = false;
        this.hasAmPm = hasAmPm;
    }
    /** Format time input while typing */
    autoFormatTimeInput(val, autoFormat) {
        if (!val || !autoFormat)
            return val;
        const format = this.getAutoFormatString();
        let edited = val;
        if (format.length > val.length && format[val.length] !== 'x') {
            edited = val + format[val.length];
            const uppercase = edited.toUpperCase();
            if (uppercase && edited !== uppercase) {
                edited = uppercase;
            }
        }
        return edited;
    }
    /** Convert to display format, 12 hour clock if hasAmPm flag is set */
    formatTimeDisplay(val) {
        if (!val)
            return null;
        const parse = this.processTimeRegex(val, TIME_24_HOUR_CLOCK_REGEX);
        if (parse) {
            if (this.hasAmPm) {
                const hours = parseInt(parse[0]);
                const minutes = parseInt(parse[1]);
                return this.create12HourTimeString(hours, minutes);
            }
            else {
                return val;
            }
        }
        return null;
    }
    /** Update date object with time part*/
    setTimeOnDate(date = new Date(), val) {
        const edited = new Date(date);
        const parse = this.processTimeRegex(val, TIME_24_HOUR_CLOCK_REGEX);
        if (parse) {
            const hours = parseInt(parse[0]);
            const minutes = parseInt(parse[1]);
            if (hours >= 0 && hours <= 23 && (minutes === 0 || minutes > 0)) {
                edited.setHours(hours, minutes);
            }
        }
        return edited;
    }
    /** Validate key pressed */
    keyIsValidTimeCharacter(key, allowedKeysRegexInput = null) {
        const allowedKeysRegex = allowedKeysRegexInput != null
            ? new RegExp(allowedKeysRegexInput)
            : new RegExp(this.hasAmPm ? TIME_12_HOUR_CLOCK_ALLOWED_CHARS_REGEX : TIME_24_HOUR_CLOCK_ALLOWED_CHARS_REGEX);
        if (allowedKeysRegex.test(key)) {
            return true;
        }
        return false;
    }
    /** Parse the display time to standard 24 hour clock */
    parseTimeDisplay(val) {
        var _a;
        if (!val)
            return null;
        const parse = this.processTimeRegex(val, this.hasAmPm ? TIME_12_HOUR_CLOCK_REGEX : TIME_24_HOUR_CLOCK_REGEX);
        if (parse) {
            if (this.hasAmPm) {
                const hours = parseInt(parse[0]);
                const minutes = parseInt(parse[1]);
                const ampm = (_a = parse[2]) === null || _a === void 0 ? void 0 : _a.toUpperCase();
                return this.create24HourTimeString(hours, minutes, ampm);
            }
            else {
                return val;
            }
        }
        return null;
    }
    // Local functions
    create24HourTimeString(hours, minutes, ampm) {
        let editedHours = hours;
        // Subtract 12 hours for 12:00 AM or midnight to 12:59 AM
        if (ampm === 'AM') {
            editedHours = hours - hours === 12 ? 12 : 0;
        }
        // Add 12 hours for 1:00 PM to 11:59 PM
        else if (ampm === 'PM') {
            editedHours = hours + hours !== 12 ? 12 : 0;
        }
        if (editedHours >= 0 && editedHours <= 23 && (minutes === 0 || minutes > 0))
            return `${this.pad(editedHours)}:${this.pad(minutes)}`;
        return null;
    }
    create12HourTimeString(hours, minutes) {
        let ampm = 'AM';
        let editedHours = hours;
        if (hours === 0) {
            editedHours = hours + 12;
        }
        else if (hours === 12) {
            ampm = 'PM';
        }
        else if (hours > 12) {
            editedHours = hours - 12;
            ampm = 'PM';
        }
        if (editedHours && editedHours <= 12 && (minutes === 0 || minutes > 0))
            return `${this.pad(editedHours)}:${this.pad(minutes)} ${ampm}`;
        return null;
    }
    getAutoFormatString() {
        if (this.hasAmPm)
            return 'xx:xx xM';
        else
            return 'xx:xx';
    }
    processTimeRegex(val, exp) {
        const timeFormatRegex = new RegExp(exp);
        const parse = timeFormatRegex.exec(val);
        if ((parse === null || parse === void 0 ? void 0 : parse.length) > 1) {
            parse.shift();
            return parse;
        }
        return null;
    }
    pad(val) {
        if (val < 10)
            return `0${val}`;
        return val.toString();
    }
}

const modusTimePickerCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.modus-time-picker{box-sizing:border-box;display:inline-flex;flex-direction:row;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";position:relative;width:100%}.modus-time-picker .time-input-wrapper{display:flex;flex-direction:column;width:100%}.modus-time-picker button{background:0;border:0;cursor:pointer;margin:0;padding:0}.modus-time-picker label{color:var(--modus-input-label-color, #464b52);margin-bottom:0.25rem}.modus-time-picker .label-container{display:flex}.modus-time-picker .label-container label{font-size:0.75rem;font-weight:700}.modus-time-picker .label-container span.required{bottom:0.0625rem;color:var(--modus-input-validation-error-color, #da212c);margin-left:0.25rem;position:relative}.modus-time-picker .input-container{align-items:center;background-color:var(--modus-input-bg, #fff);border:0.0625rem solid var(--modus-input-border-color, #6a6e79);border-radius:4px;box-sizing:border-box;display:flex;flex-direction:row;height:2rem;position:relative;width:100%}.modus-time-picker .input-container input{background-color:transparent;background-position:right calc(0.375em + 0.1875rem) center;background-repeat:no-repeat;background-size:calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);border:none;color:var(--modus-input-color, #252a2e);font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";font-size:0.75rem;outline:none;padding:0 0.5rem;padding-right:calc(1.5em + 0.75rem);width:100%}.modus-time-picker .input-container input::placeholder{color:var(--modus-input-hint-text-color, #a3a6b1)}.modus-time-picker .input-container:hover{cursor:text}.modus-time-picker .input-container:focus-within{border-color:var(--modus-input-border-active-color, #217cbb);box-shadow:0 0 0 1px var(--modus-input-border-active-color, #217cbb)}.modus-time-picker .input-container.error{border-color:var(--modus-input-validation-error-color, #da212c);box-shadow:0 0 0 1px var(--modus-input-validation-error-color, #da212c)}.modus-time-picker .input-container.valid{border-color:var(--modus-input-validation-success-color, #006638);box-shadow:0 0 0 1px var(--modus-input-validation-success-color, #006638)}.modus-time-picker .input-container.large{height:3rem}.modus-time-picker .input-container.large input{font-size:0.875rem;padding:0 1rem}.modus-time-picker .input-container.large:focus-within,.modus-time-picker .input-container.large.error,.modus-time-picker .input-container.large.valid{height:2.9375rem}.modus-time-picker .input-container:has(input[readonly]){background-color:var(--modus-input-readonly-bg, #e0e1e9);border-color:transparent}.modus-time-picker .sub-text{font-size:0.75rem;margin-top:0.25rem}.modus-time-picker .sub-text.helper{color:var(--modus-input-label-color, #464b52);display:block;font-weight:600;margin:0}.modus-time-picker .sub-text.error{color:var(--modus-input-validation-error-color, #da212c)}.modus-time-picker .sub-text.valid{color:var(--modus-input-validation-success-color, #006638)}.modus-time-picker.large{font-size:0.875rem;height:48px}.modus-time-picker.disabled{pointer-events:none}.modus-time-picker.disabled .input-container{background-color:var(--modus-input-disabled-bg, #e0e1e9);border-color:transparent}.modus-time-picker.disabled .input-container input{background-color:transparent;border-radius:0;color:var(--modus-input-disabled-color, #a3a6b1);height:100%}";
const ModusTimePickerStyle0 = modusTimePickerCss;

const ModusTimePicker = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.timeInputBlur = createEvent(this, "timeInputBlur", 7);
        this.valueChange = createEvent(this, "valueChange", 7);
        this.classBySize = new Map([
            ['medium', 'medium'],
            ['large', 'large'],
        ]);
        this._maxLength = 5;
        this.ampm = undefined;
        this.allowedCharsRegex = undefined;
        this.ariaLabel = undefined;
        this.autoFormat = undefined;
        this.autoFocusInput = undefined;
        this.disabled = undefined;
        this.disableValidation = undefined;
        this.errorText = undefined;
        this.helperText = undefined;
        this.label = undefined;
        this.min = undefined;
        this.max = undefined;
        this.placeholder = undefined;
        this.readOnly = undefined;
        this.required = undefined;
        this.size = 'medium';
        this.validText = undefined;
        this.value = undefined;
        this._timeDisplay = undefined;
    }
    handleAmPmChange(val) {
        this.handleAmPmDependencies(val);
    }
    handleValueChange(val) {
        if (!this._isEditing) {
            this._timeDisplay = this._formatter.formatTimeDisplay(val);
        }
        this.valueChange.emit({
            value: val,
            inputString: this._timeDisplay,
        });
    }
    // Life cycle methods
    componentWillLoad() {
        this.handleAmPmDependencies(this.ampm);
        this._timeDisplay = this._formatter.formatTimeDisplay(this.value);
    }
    /** Public Methods */
    /** Focus the input. */
    async focusInput() {
        this._timeInput.focus();
    }
    // Handlers
    handleBlur() {
        var _a;
        this._isEditing = false;
        const inputString = (_a = this._timeInput) === null || _a === void 0 ? void 0 : _a.value;
        this.validateTimeInput(inputString);
        this.timeInputBlur.emit({
            value: this.value,
            inputString,
        });
    }
    handleDefaultKeyDown(e, callback) {
        const code = e.code.toUpperCase();
        if (code === 'ENTER' || code === 'SPACE')
            callback();
    }
    handleInputChange(event) {
        var _a;
        event.stopPropagation();
        event.preventDefault();
        this._isEditing = true;
        const inputString = (_a = event.currentTarget) === null || _a === void 0 ? void 0 : _a.value;
        this._timeDisplay = this._formatter.autoFormatTimeInput(inputString, this.autoFormat);
        this.value = this._formatter.parseTimeDisplay(this._timeDisplay);
    }
    handleInputKeyPress(event) {
        const key = event.key;
        const keyIsValid = this._formatter.keyIsValidTimeCharacter(key, this.allowedCharsRegex);
        if (!keyIsValid) {
            event.preventDefault();
        }
        return keyIsValid;
    }
    // Helpers
    clearValidation() {
        this.errorText = null;
    }
    getAriaControls() {
        return {
            'aria-invalid': !!this.errorText,
            'aria-label': this.ariaLabel || undefined,
            'aria-required': this.required,
        };
    }
    handleAmPmDependencies(hasAmPm) {
        this._formatter = new TimeInputFormatter(hasAmPm);
        this._maxLength = hasAmPm ? 8 : 5;
    }
    validateTimeInput(inputString) {
        if (this.disableValidation)
            return;
        if (!inputString) {
            if (this.required)
                this.errorText = 'Required';
            else
                this.clearValidation();
        }
        else if (!this.value)
            this.errorText = 'Invalid time';
        else if (this.min || this.max) {
            const today = new Date();
            const minDate = this._formatter.setTimeOnDate(today, this.min);
            const maxDate = this._formatter.setTimeOnDate(today, this.max);
            const inputDate = this._formatter.setTimeOnDate(today, this.value);
            if (this.min && inputDate < minDate) {
                this.errorText = 'Time input is lesser than minimum time allowed';
            }
            else if (this.max && inputDate > maxDate) {
                this.errorText = 'Time input is greater than maximum time allowed';
            }
            else
                this.clearValidation();
        }
        else
            this.clearValidation();
    }
    // Renderers
    renderTimeInput() {
        const ariaControls = this.getAriaControls();
        return (h("input", Object.assign({}, ariaControls, { id: "time-input", "aria-label": (this.label ? null : this.ariaLabel) || undefined, "aria-placeholder": this.placeholder, disabled: this.disabled, onInput: (event) => this.handleInputChange(event), placeholder: this.placeholder, readonly: this.readOnly, ref: (el) => (this._timeInput = el), tabIndex: 0, type: "text", value: this._timeDisplay, autofocus: this.autoFocusInput, onBlur: () => this.handleBlur(), maxLength: this._maxLength, onKeyPress: (e) => this.handleInputKeyPress(e) })));
    }
    renderSubText() {
        return this.errorText ? (h("label", { class: "sub-text error" }, this.errorText)) : this.validText ? (h("label", { class: "sub-text valid" }, this.validText)) : null;
    }
    render() {
        return (h("div", { key: 'c344689b86d18990cc4c003e77a3cd1837586aed', class: { 'modus-time-picker': true, disabled: this.disabled } }, h("div", { key: '75eb15def70838fdf3c2f3cb7e5fcd42e6b173d4', class: "time-input-wrapper" }, this.label || this.required ? (h("div", { class: 'label-container' }, this.label ? h("label", { htmlFor: "time-input" }, this.label) : null, this.required ? h("span", { class: "required" }, "*") : null, this.helperText ? h("label", { class: "sub-text helper" }, this.helperText) : null)) : null, h("div", { key: '4870c5600280829e12db2c44efbe5d69139ab161', class: `input-container ${this.errorText ? 'error' : this.validText ? 'valid' : ''} ${this.classBySize.get(this.size)}` }, this.renderTimeInput()), this.renderSubText()), h("div", { key: '4f8ee49d018277ec22755451e9f2d45889497312', class: "time-zone-wrapper" }, h("slot", { key: '11e3d8d2626a7bc5c72696ca019690874ececf7a', name: "timeZone" }))));
    }
    get element() { return getElement(this); }
    static get watchers() { return {
        "ampm": ["handleAmPmChange"],
        "value": ["handleValueChange"]
    }; }
};
ModusTimePicker.style = ModusTimePickerStyle0;

export { ModusTimePicker as modus_time_picker };
