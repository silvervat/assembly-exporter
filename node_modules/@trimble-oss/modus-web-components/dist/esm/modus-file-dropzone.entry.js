import { h, r as registerInstance, c as createEvent, H as Host } from './index-8e730124.js';

// eslint-disable-next-line
const IconUploadCloud = (props) => {
    var _a, _b, _c;
    return (h("svg", { class: `upload-cloud ${props.pressed ? 'pressed' : ''}`, fill: (_a = props.color) !== null && _a !== void 0 ? _a : 'currentColor', height: (_b = props.size) !== null && _b !== void 0 ? _b : 16, onClick: props.onClick, viewBox: "0 0 24 24", width: (_c = props.size) !== null && _c !== void 0 ? _c : 16, xmlns: "http://www.w3.org/2000/svg" },
        h("path", { d: "M19.93 11.12c.04-.29.07-.57.07-.87C20 6.8 17.2 4 13.75 4c-2.53 0-4.7 1.5-5.68 3.66-.42-.1-.86-.16-1.32-.16C3.57 7.5 1 10.07 1 13.25S3.57 19 6.75 19H19c2.21 0 4-1.79 4-4a3.99 3.99 0 0 0-3.07-3.88Zm-4.41 1.31h-1.96V17c0 .27-.22.5-.5.5h-2.11c-.27 0-.5-.23-.5-.5v-4.57H8.48c-.23 0-.35-.28-.18-.44l3.35-3.35c.2-.2.51-.2.71 0l3.35 3.35c.16.16.05.44-.18.44Z" })));
};

// eslint-disable-next-line
const IconCancel = (props) => {
    var _a, _b, _c;
    return (h("svg", { class: `icon-cancel ${props.pressed ? 'pressed' : ''}`, fill: (_a = props.color) !== null && _a !== void 0 ? _a : 'currentColor', height: (_b = props.size) !== null && _b !== void 0 ? _b : 16, onClick: props.onClick, viewBox: "0 0 32 32", width: (_c = props.size) !== null && _c !== void 0 ? _c : 16, xmlns: "http://www.w3.org/2000/svg" },
        h("path", { d: "M21.3027,10.6973a1.503,1.503,0,0,0-2.1211,0L16,13.8789l-3.1821-3.1816a1.5,1.5,0,0,0-2.1211,2.1211L13.8789,16l-3.1821,3.1816a1.5012,1.5012,0,0,0,0,2.1211,1.5363,1.5363,0,0,0,2.1211,0L16,18.1211l3.1816,3.1816a1.5,1.5,0,1,0,2.1211-2.1211L18.1211,16l3.1816-3.1816A1.5012,1.5012,0,0,0,21.3027,10.6973Z" }),
        h("path", { d: "M16,2A14,14,0,1,0,30,16,14.0158,14.0158,0,0,0,16,2Zm0,26A12,12,0,1,1,28,16,12.0134,12.0134,0,0,1,16,28Z" })));
};

const modusFileDropzoneCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.modus-file-dropzone{color:var(--modus-body-color, #252a2e);display:flex;flex-direction:column;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"}.modus-file-dropzone input{display:none}.modus-file-dropzone .header{align-items:start;display:flex;flex-direction:column}.modus-file-dropzone .header label{font-size:1.5rem;font-weight:600;margin-bottom:0.5rem}.modus-file-dropzone .header span{margin-bottom:0.5rem}.modus-file-dropzone .dropzone{align-items:center;background-color:var(--modus-file-upload-dropzone-bg, rgba(241, 241, 246, 0.8));border:0.125rem dashed var(--modus-file-upload-dropzone-border-color, #6a6e79);border-radius:0.25rem;color:var(--modus-file-upload-dropzone-color, #6a6e79);display:flex;flex-direction:column;font-weight:600;justify-content:center;padding:0.75rem 1rem}.modus-file-dropzone .dropzone .browse{color:var(--modus-file-upload-dropzone-browse-color, #0063a3);text-decoration:underline}.modus-file-dropzone .dropzone .browse:hover{cursor:pointer}.modus-file-dropzone .dropzone.highlight{background-color:var(--modus-file-upload-dropzone-highlight-bg, #dcedf9);border-color:var(--modus-file-upload-dropzone-highlight-border-color, #0063a3);color:var(--modus-file-upload-dropzone-highlight-color, #0063a3)}.modus-file-dropzone .dropzone.highlight svg{fill:var(--modus-file-upload-dropzone-highlight-color, #0063a3)}.modus-file-dropzone .dropzone.error{background-color:var(--modus-file-upload-dropzone-error-bg, #fbd4d7);border-color:var(--modus-file-upload-dropzone-error-border-color, #ab1f26);color:var(--modus-file-upload-dropzone-error-color, #ab1f26)}.modus-file-dropzone .dropzone.error svg{fill:var(--modus-file-upload-dropzone-error-color, #ab1f26)}.modus-file-dropzone .dropzone .error-messages{align-items:center;display:flex;flex-direction:column}.modus-file-dropzone .dropzone svg{fill:var(--modus-file-upload-dropzone-color, #6a6e79);margin-bottom:0.25rem}";
const ModusFileDropzoneStyle0 = modusFileDropzoneCss;

const ModusFileDropzone = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.files = createEvent(this, "files", 7);
        this.onDragLeave = (event) => {
            this.fileDraggedOver = false;
            event.preventDefault();
        };
        this.onDragOver = (event) => {
            if (this.error) {
                return;
            }
            this.fileDraggedOver = true;
            event.preventDefault();
        };
        this.onDrop = (event) => {
            this.fileDraggedOver = false;
            event.preventDefault();
            this.dropzoneFiles = [...this.dropzoneFiles, ...Array.from(event.dataTransfer.files)];
            this.updateDropzoneState();
            this.files.emit([this.dropzoneFiles, this.error]);
            this.fileInput.value = null;
        };
        this.onFileChange = () => {
            this.dropzoneFiles = [...this.dropzoneFiles, ...Array.from(this.fileInput.files)];
            this.updateDropzoneState();
            this.files.emit([this.dropzoneFiles, this.error]);
            this.fileInput.value = null;
        };
        this.openBrowse = () => {
            this.fileInput.click();
        };
        this.updateDropzoneState = () => {
            // Raise error if having multiple files is invalid.
            if (!this.multiple && this.dropzoneFiles.length > 1) {
                this.error = 'maxFileCount';
                this.errorMessageTop = 'Multiple files are not allowed.';
                return;
            }
            // Raise error if the max file count has been exceeded.
            if (this.maxFileCount && this.maxFileCount < this.dropzoneFiles.length) {
                this.error = 'maxFileCount';
                this.errorMessageTop = `You can only upload ${this.maxFileCount} ${this.maxFileCount > 1 ? 'files' : 'file'}.`;
                return;
            }
            // Raise error if the max file name length has been exceeded.
            if (this.dropzoneFiles.some((file) => file.name.length > this.maxFileNameLength)) {
                this.error = 'maxFileNameLength';
                this.errorMessageTop = `File name exceeds length limit: ${this.dropzoneFiles.find((file) => file.name.length > this.maxFileNameLength).name}`;
                return;
            }
            // Raise error if the max total file size has been exceeded.
            const totalFileSize = this.dropzoneFiles.reduce((total, file) => total + file.size, 0);
            if (this.maxTotalFileSizeBytes && this.maxTotalFileSizeBytes < totalFileSize) {
                this.error = 'maxTotalFileSize';
                this.errorMessageTop = 'File exceeds size limit.';
                this.errorMessageBottom = `You can only upload a total file size of ${this.maxTotalFileSizeBytes} bytes.`;
                return;
            }
            this.error = null;
            this.errorMessageTop = '';
            this.errorMessageBottom = '';
        };
        this.dropzoneFiles = [];
        this.error = null;
        this.fileDraggedOver = false;
        this.acceptFileTypes = undefined;
        this.ariaLabel = undefined;
        this.description = undefined;
        this.dropzoneHeight = undefined;
        this.dropzoneWidth = undefined;
        this.fileDraggedOverInstructions = 'Drag files here.';
        this.includeStateIcon = true;
        this.label = undefined;
        this.instructions = 'Drag files here or browse to upload.';
        this.maxFileCount = undefined;
        this.maxFileNameLength = undefined;
        this.maxTotalFileSizeBytes = undefined;
        this.multiple = true;
    }
    elementKeydownHandler(event) {
        switch (event.code) {
            case 'Enter':
                this.fileInput.click();
                break;
        }
    }
    /** Add a file to the dropzone. */
    async addFile(file) {
        this.dropzoneFiles.push(file);
        this.updateDropzoneState();
        this.files.emit([this.dropzoneFiles, this.error]);
    }
    /** Get the dropzone's error. */
    async getError() {
        return this.error;
    }
    /** Get the dropzone's files. */
    async getFiles() {
        return this.dropzoneFiles;
    }
    /** Remove a file from the dropzone. */
    async removeFile(fileName) {
        const file = this.dropzoneFiles.find((f) => f.name === fileName);
        const index = this.dropzoneFiles.indexOf(file);
        if (index > -1) {
            this.dropzoneFiles.splice(index, 1);
            this.dropzoneFiles = [...this.dropzoneFiles];
        }
        this.updateDropzoneState();
        this.files.emit([this.dropzoneFiles, this.error]);
    }
    render() {
        return (h(Host, { key: 'a28efaad7589a66012dff1179ae68de225276078', "aria-label": this.ariaLabel, role: "button" }, h("div", { key: '7c7fd3c81b581411a22edab8ede593841d06d630', class: "modus-file-dropzone" }, h("input", { key: '3af2cda73276898e5cacdf03d9800e7e2d3e238f', onChange: this.onFileChange, multiple: this.multiple, ref: (el) => (this.fileInput = el), type: "file", accept: this.acceptFileTypes }), h("div", { key: 'eeaa4f3dd26eb355552664b4ba0ddc0478445c18', class: "header" }, h("label", { key: 'af7d02cc07567f4d4bb0b1742002887454b56b03' }, this.label), h("span", { key: 'bc7128592d6512f2257f5bca8cb9228c804a4331' }, this.description)), h("div", { key: '887d2793101068701278c088ce11afb66e03a645', class: {
                dropzone: true,
                error: !!this.error,
                highlight: this.fileDraggedOver,
            }, onDragLeave: (e) => this.onDragLeave(e), onDragOver: (e) => this.onDragOver(e), onDrop: (e) => this.onDrop(e), style: { height: this.dropzoneHeight, width: this.dropzoneWidth }, tabIndex: 0 }, this.includeStateIcon && (this.error ? h(IconCancel, { size: '36' }) : h(IconUploadCloud, { size: '36' })), !this.error &&
            (this.fileDraggedOver ? (this.fileDraggedOverInstructions) : (h("div", { class: "browse", onClick: this.openBrowse }, this.instructions))), this.error && (h("div", { class: "error-messages", role: "alert" }, this.errorMessageTop && h("span", null, this.errorMessageTop), this.errorMessageBottom && h("span", null, this.errorMessageBottom)))))));
    }
};
ModusFileDropzone.style = ModusFileDropzoneStyle0;

export { ModusFileDropzone as modus_file_dropzone };
