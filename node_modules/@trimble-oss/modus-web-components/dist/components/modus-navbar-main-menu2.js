import { proxyCustomElement, HTMLElement, h } from '@stencil/core/internal/client';

const DEFAULT_CONTAINER_LAYOUT = Object.freeze({
    position: 'fixed',
    top: '0px',
    left: '0px',
    height: '0px',
});
const DOM_OBSERVER_CONFIG = Object.freeze({
    childList: true,
});

const modusNavbarMainMenuCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.main-menu{background-color:var(--modus-body-bg, #fff);border:0.0625rem solid var(--modus-navbar-popup-border-color, #cbcdd6);border-radius:0.25rem;box-shadow:0 0 8px rgba(36, 35, 45, 0.3);color:var(--modus-body-color, #252a2e);display:flex;flex-direction:column;max-width:384px;padding:0;position:absolute;right:0;top:48px;z-index:100;background-color:var(--modus-navbar-popup-bg, #fff);border:unset;border-radius:0 0 0.125rem 0.125rem;box-sizing:border-box;clip-path:inset(0 -10px -10px -10px);cursor:default;max-width:616px;min-width:248px;padding:0;width:max-content}";
const ModusNavbarMainMenuStyle0 = modusNavbarMainMenuCss;

const ModusNavbarMainMenu = /*@__PURE__*/ proxyCustomElement(class ModusNavbarMainMenu extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.observer = null;
        this.updateContainerLayout = () => {
            var _a;
            const navbarRect = (_a = document.getElementById(this.navbarId)) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect();
            if (!navbarRect) {
                return;
            }
            const availableHeight = window.innerHeight - navbarRect.bottom;
            const containerHeight = Math.min(availableHeight, window.innerHeight);
            this.containerLayout = Object.assign(Object.assign({}, this.containerLayout), { top: `${navbarRect.bottom}px`, left: `${navbarRect.left}px`, height: `${containerHeight}px` });
        };
        this.navbarId = undefined;
        this.containerLayout = DEFAULT_CONTAINER_LAYOUT;
    }
    componentDidLoad() {
        this.updateContainerLayout();
        this.addSubscriptions();
    }
    disconnectedCallback() {
        this.removeSubscriptions();
    }
    addSubscriptions() {
        window.addEventListener('resize', this.updateContainerLayout);
        window.addEventListener('scroll', this.updateContainerLayout);
        this.connectDOMObserver();
    }
    removeSubscriptions() {
        window.removeEventListener('resize', this.updateContainerLayout);
        window.removeEventListener('scroll', this.updateContainerLayout);
        this.disconnectDOMObserver();
    }
    connectDOMObserver() {
        this.observer = new MutationObserver(this.updateContainerLayout);
        this.observer.observe(document.body, DOM_OBSERVER_CONFIG);
    }
    disconnectDOMObserver() {
        if (this.observer) {
            this.observer.disconnect();
        }
    }
    render() {
        const positionStyle = Object.assign({}, this.containerLayout);
        return (h("div", { key: '02e018f7fb564d69734e8379d544bee3dfc8ce86', class: "main-menu", style: positionStyle, onClick: (event) => event.preventDefault() }, h("slot", { key: 'ebe10c15157bae37db6fea07c714257e753e7872' })));
    }
    static get style() { return ModusNavbarMainMenuStyle0; }
}, [1, "modus-navbar-main-menu", {
        "navbarId": [1, "navbar-id"],
        "containerLayout": [32]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["modus-navbar-main-menu"];
    components.forEach(tagName => { switch (tagName) {
        case "modus-navbar-main-menu":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ModusNavbarMainMenu);
            }
            break;
    } });
}

export { ModusNavbarMainMenu as M, defineCustomElement as d };
