import { proxyCustomElement, HTMLElement, createEvent, h, Fragment } from '@stencil/core/internal/client';

const modusUtilityPanelCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.utility-panel{background-color:var(--modus-utility-panel-bg, #fff);box-shadow:0 0 10px rgba(0, 0, 0, 0.5);color:var(--modus-utility-panel-color, #000);height:100%;position:absolute;right:-324px;top:0;transition:right 0.3s ease-out;width:312px}.utility-panel.open{right:0;transition:right 0.3s ease-out}.utility-panel .overlay{height:100%;position:absolute;right:0;top:0;width:100%}.utility-panel .panel-content{display:flex;flex-direction:column;height:100%}.utility-panel .panel-content .panel-header,.utility-panel .panel-content .panel-footer{align-items:center;display:flex;height:50px;padding:0 1rem}.utility-panel .panel-content .panel-body{flex:1;overflow:auto;padding:1rem}.utility-panel .panel-content hr{border:none;border-top:1px solid #cbcdd6;margin:0}";
const ModusUtilityPanelStyle0 = modusUtilityPanelCss;

const ModusUtilityPanel$1 = /*@__PURE__*/ proxyCustomElement(class ModusUtilityPanel extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.panelOpened = createEvent(this, "panelOpened", 7);
        this.panelClosed = createEvent(this, "panelClosed", 7);
        this.handlePanelClose = () => {
            this.closePanel();
        };
        this.expanded = false;
        this.pushContent = false;
        this.targetContent = undefined;
    }
    handleExpandedChange(newValue) {
        if (newValue) {
            this.openPanel();
        }
        else {
            this.closePanel();
        }
    }
    async openPanel() {
        this.panelOpened.emit();
        if (this.pushContent) {
            this.adjustContent();
        }
    }
    async closePanel() {
        this.panelClosed.emit();
        if (this.pushContent) {
            this.adjustContent();
        }
    }
    adjustContent() {
        const content = document.querySelector(this.targetContent);
        if (content) {
            content.style.transition = 'margin-right 0.2s ease-out';
            if (this.expanded) {
                content.style.marginRight = '312px';
            }
            else {
                content.style.marginRight = '0';
            }
        }
    }
    hasSlotContent(slotName) {
        const slot = this.el.querySelector(`[slot="${slotName}"]`);
        return !!slot;
    }
    render() {
        const hasHeader = this.hasSlotContent('header');
        const hasFooter = this.hasSlotContent('footer');
        return (h("div", { key: '5b6407fdf464a29dffef00e9b0972c795a05318e', class: { 'utility-panel': true, open: this.expanded, overlay: !this.pushContent } }, h("div", { key: '57df595135741093fe21fa4400053f2f34763393', class: "panel-content" }, hasHeader && (h(Fragment, null, h("div", { class: "panel-header", "aria-labelledby": "header" }, h("slot", { name: "header" })), h("hr", null))), h("div", { key: 'cfd3e968d9d78ceb0d1a2f04c923747d55ba034f', class: "panel-body", "aria-labelledby": "body" }, h("slot", { key: '59cb2bc025128a8bea72f2804ec66b4f8630cab8', name: "body" })), hasFooter && (h(Fragment, null, h("hr", null), h("div", { class: "panel-footer", "aria-labelledby": "footer" }, h("slot", { name: "footer" })))))));
    }
    get el() { return this; }
    static get watchers() { return {
        "expanded": ["handleExpandedChange"]
    }; }
    static get style() { return ModusUtilityPanelStyle0; }
}, [1, "modus-utility-panel", {
        "expanded": [4],
        "pushContent": [4, "push-content"],
        "targetContent": [1, "target-content"]
    }, undefined, {
        "expanded": ["handleExpandedChange"]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["modus-utility-panel"];
    components.forEach(tagName => { switch (tagName) {
        case "modus-utility-panel":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ModusUtilityPanel$1);
            }
            break;
    } });
}

const ModusUtilityPanel = ModusUtilityPanel$1;
const defineCustomElement = defineCustomElement$1;

export { ModusUtilityPanel, defineCustomElement };
