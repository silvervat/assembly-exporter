import { proxyCustomElement, HTMLElement, h } from '@stencil/core/internal/client';

const modusSpinnerCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");@keyframes spin{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}div.spinner{animation:spin 0.75s linear infinite;border:0.25em solid #0063a3;border-radius:50%;border-right-color:transparent;display:inline-flex;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";forced-color-adjust:none}";
const ModusSpinnerStyle0 = modusSpinnerCss;

const ModusSpinner$1 = /*@__PURE__*/ proxyCustomElement(class ModusSpinner extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.variants = new Map([
            ['primary', '#0063a3'],
            ['secondary', '#6a6e79'],
            ['tertiary', '#cbcdd6'],
            ['dark', '#252a2e'],
            ['success', '#006638'],
            ['danger', '#da212c'],
            ['warning', '#e49325'],
        ]);
        this.color = 'primary';
        this.size = '2rem';
    }
    render() {
        const borderColor = this.variants.has(this.color)
            ? `var(--modus-${this.color}, ${this.variants.get(this.color)})`
            : this.color;
        return (h("div", { key: '356a23fd14627f54653952f359ae0f659e0f51a0', "aria-busy": "true", class: "spinner", style: {
                'border-color': borderColor,
                'border-right-color': 'transparent',
                height: this.size,
                width: this.size,
            } }));
    }
    static get style() { return ModusSpinnerStyle0; }
}, [1, "modus-spinner", {
        "color": [1],
        "size": [1]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["modus-spinner"];
    components.forEach(tagName => { switch (tagName) {
        case "modus-spinner":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ModusSpinner$1);
            }
            break;
    } });
}

const ModusSpinner = ModusSpinner$1;
const defineCustomElement = defineCustomElement$1;

export { ModusSpinner, defineCustomElement };
