import { h, proxyCustomElement, HTMLElement, createEvent } from '@stencil/core/internal/client';
import { M as ModusIconMap } from './ModusIconMap.js';
import { d as defineCustomElement$5 } from './modus-badge2.js';
import { d as defineCustomElement$4 } from './modus-checkbox2.js';
import { d as defineCustomElement$3 } from './modus-dropdown2.js';
import { d as defineCustomElement$2 } from './modus-tooltip2.js';

class ModusDataTableUtilities {
    static convertToTColumns(columns) {
        return columns === null || columns === void 0 ? void 0 : columns.map((column) => {
            var _a, _b, _c, _d, _e, _f, _g;
            return {
                align: (_a = column.align) !== null && _a !== void 0 ? _a : 'left',
                display: (_b = column.display) !== null && _b !== void 0 ? _b : column,
                id: (_e = (_c = column.id) !== null && _c !== void 0 ? _c : (_d = column.display) === null || _d === void 0 ? void 0 : _d.toLocaleLowerCase()) !== null && _e !== void 0 ? _e : column.toLocaleLowerCase(),
                readonly: (_f = column.readonly) !== null && _f !== void 0 ? _f : false,
                width: (_g = column.width) !== null && _g !== void 0 ? _g : '',
            };
        });
    }
    static convertToTRows(data, columns) {
        if ((data === null || data === void 0 ? void 0 : data.length) && !Array.isArray(data[0])) {
            return data;
        }
        return data === null || data === void 0 ? void 0 : data.map((row) => {
            var _a, _b;
            const tRows = {
                _id: (_a = row._id) !== null && _a !== void 0 ? _a : '',
                _selected: (_b = row._selected) !== null && _b !== void 0 ? _b : false,
            };
            row.forEach((cell, rowIndex) => {
                tRows[columns[rowIndex].id] = cell;
            });
            return tRows;
        });
    }
    static sortData(data, columnId, direction) {
        const dataCopy = [...data];
        if (direction === 'asc') {
            return dataCopy.sort((row1, row2) => {
                if (row1[columnId]['_type'] === 'badge') {
                    return row1[columnId].text > row2[columnId].text
                        ? 1
                        : -1;
                }
                if (row1[columnId]['_type'] === 'link') {
                    return row1[columnId].display > row2[columnId].display
                        ? 1
                        : -1;
                }
                return row1[columnId] > row2[columnId] ? 1 : -1;
            });
        }
        else {
            return dataCopy.sort((row1, row2) => {
                if (row1[columnId]['_type'] === 'badge') {
                    return row1[columnId].text > row2[columnId].text
                        ? -1
                        : 1;
                }
                if (row1[columnId]['_type'] === 'link') {
                    return row1[columnId].display > row2[columnId].display
                        ? -1
                        : 1;
                }
                return row1[columnId] > row2[columnId] ? -1 : 1;
            });
        }
    }
}

// eslint-disable-next-line
const IconSortAZ = (props) => {
    var _a, _b, _c;
    return (h("svg", { "data-test-id": "iconSortAZ", class: `${props.pressed ? 'pressed' : ''}`, fill: (_a = props.color) !== null && _a !== void 0 ? _a : 'currentColor', height: (_b = props.size) !== null && _b !== void 0 ? _b : 16, onClick: props.onClick, viewBox: "0 0 32 32", width: (_c = props.size) !== null && _c !== void 0 ? _c : 16, xmlns: "http://www.w3.org/2000/svg" },
        h("path", { d: "M17.658 14.94a.997.997 0 0 0 1.281-.598L20.155 11h3.69l1.216 3.342a1 1 0 1 0 1.878-.684l-4-11a.999.999 0 0 0-1.878 0l-4 11a1 1 0 0 0 .597 1.282zM22 5.926 23.118 9h-2.236L22 5.926zM26 28h-5.919l6.7-8.375A1.002 1.002 0 0 0 26 18h-8a1 1 0 1 0 0 2h5.919l-6.7 8.375A1.002 1.002 0 0 0 18 30h8a1 1 0 1 0 0-2zm-14.766-5H9V3a1 1 0 1 0-2 0v20H4.766a.86.86 0 0 0-.782.492c-.146.304-.107.655.074.876l3.264 5.085c.165.207.413.326.678.326s.513-.119.709-.369l3.203-4.999a.862.862 0 0 0 .104-.919.86.86 0 0 0-.782-.492z" })));
};

// eslint-disable-next-line
const IconSortZA = (props) => {
    var _a, _b, _c;
    return (h("svg", { "data-test-id": "iconSortZA", class: `${props.pressed ? 'pressed' : ''}`, xmlns: "http://www.w3.org/2000/svg", width: (_a = props.size) !== null && _a !== void 0 ? _a : 16, height: (_b = props.size) !== null && _b !== void 0 ? _b : 16, fill: (_c = props.color) !== null && _c !== void 0 ? _c : 'currentColor', onClick: props.onClick, viewBox: "0 0 32 32" },
        h("path", { d: "M17.658 14.94a.997.997 0 0 0 1.281-.598L20.155 11h3.69l1.216 3.342a1 1 0 1 0 1.878-.684l-4-11a.999.999 0 0 0-1.878 0l-4 11a1 1 0 0 0 .597 1.282zM22 5.926 23.118 9h-2.236L22 5.926zM26 28h-5.919l6.7-8.375A1.002 1.002 0 0 0 26 18h-8a1 1 0 1 0 0 2h5.919l-6.7 8.375A1.002 1.002 0 0 0 18 30h8a1 1 0 1 0 0-2zM8.678 2.547c-.33-.414-.995-.457-1.387.043L4.088 7.589a.862.862 0 0 0-.104.919.86.86 0 0 0 .782.492H7v20a1 1 0 1 0 2 0V9h2.234a.86.86 0 0 0 .782-.492c.146-.304.106-.655-.074-.876L8.678 2.547z" })));
};

// eslint-disable-next-line
function convertToSingleSpaceTitleCase(title) {
    return title === null || title === void 0 ? void 0 : title.replace(/\w\S*/g, (word) => {
        return word.charAt(0).toUpperCase() + word.substring(1).toLowerCase();
    }).replace(/\s+/g, ' ');
}
const ModusDataTableHeader = (props) => {
    const sortIcon = props.sortState.direction !== 'none' ? (h("modus-tooltip", { position: "bottom", text: `${props.sortState.direction === 'asc' ? 'Sort descending' : 'Remove sort'}` },
        h("div", { class: "icon-container" },
            h("div", { class: "sort-icon" }, props.sortState.direction === 'asc' ? h(IconSortAZ, { size: '16' }) : h(IconSortZA, { size: '16' }))))) : null;
    const sortIconPlaceholder = h("div", { style: { width: '16px' } });
    return (h("th", { class: `${props.sortOptions.canSort ? 'can-sort' : ''}`, onClick: () => props.onColumnHeaderClick(props.column.id) },
        h("div", { class: `column-header align-${props.column.align}` },
            props.column.align === 'right' && props.sortState.columnId !== props.column.id && sortIconPlaceholder,
            props.column.align === 'right' &&
                props.sortState.columnId === props.column.id &&
                props.sortState.direction === 'none' &&
                sortIconPlaceholder,
            props.column.align === 'right' && props.sortState.columnId === props.column.id && sortIcon,
            h("div", null, convertToSingleSpaceTitleCase(props.column.display)),
            props.column.align === 'left' && props.sortState.columnId === props.column.id && sortIcon,
            props.column.align === 'center' && props.sortState.columnId === props.column.id && (h("div", { style: { position: 'relative' } },
                h("div", { style: { display: 'flex', justifyContent: 'flex-end', position: 'absolute' } }, sortIcon))))));
};

// eslint-disable-next-line
const ModusDataTableCellLinkPart = (props) => {
    return (h("div", { class: "cell-link", onClick: () => props.onLinkClick(props.link) }, props.link.display));
};

// eslint-disable-next-line
const ModusDataTableCellBadgePart = (props) => {
    return (h("div", { class: "cell-badge" },
        h("modus-badge", { color: props.badge.color, type: props.badge.type }, props.badge.text)));
};

// eslint-disable-next-line
const ModusDataTableRowActionDropdown = (props) => {
    return (h("modus-dropdown", { "toggle-element-id": `dropdownToggle-${props.rowId}`, "animate-list": props.animateDropdown, customPlacement: { left: -194 }, showDropdownListBorder: false },
        h("div", { class: "row-action", id: `dropdownToggle-${props.rowId}`, slot: "dropdownToggle" },
            h(ModusIconMap, { icon: "more_vertical", size: "24" })),
        h("div", { slot: "dropdownList" },
            h("div", { class: "list-container" },
                h("div", { class: "items-container" }, props.actions.map((action) => (h("div", { class: "action-item", onClick: () => props.onRowActionClick(action._id, props.rowId) },
                    h("div", { class: "action-item-content" },
                        action.display.icon && h(ModusIconMap, { icon: action.display.icon, size: '16' }),
                        h("div", { class: "display-text" }, action.display.text))))))))));
};

const modusDataTableCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");table{border:0.0625rem var(--modus-table-border-color, #b7b9c3) solid;border-collapse:collapse;width:100%}table th{background-color:var(--modus-table-header-bg, #f1f1f6);border:0.0625rem var(--modus-table-header-border-color, #b7b9c3) solid;color:var(--modus-table-header-color, #464b52);font-size:0.875rem;font-weight:600;min-height:3rem}table th.can-sort{cursor:pointer}table th .column-header{display:flex;flex-direction:row;justify-content:center;min-height:1.25rem;padding:0 0.5rem}table th .column-header.align-left,table th .column-header.align-right{justify-content:space-between}table th .column-header.align-center{justify-content:center}table th .column-header .icon-container{align-items:center;display:flex;height:1rem;justify-content:center}table th .column-header .icon-container .sort-icon{border-radius:0.25rem;display:flex;padding:0.25rem}table th .column-header .icon-container .sort-icon:hover{background-color:var(--modus-btn-icon-only-dark-hover-bg, #e0e1e9)}table th .column-header .icon-container .sort-icon:hover svg path{fill:var(--modus-btn-icon-only-dark-hover-color, #353a40)}table th .column-header .icon-container .sort-icon:active{background-color:var(--modus-btn-icon-only-dark-active-bg, #cbcdd6)}table th .column-header .icon-container .sort-icon:active svg path{fill:var(--modus-btn-icon-only-dark-active-color, #2b2a37)}table th .column-header .icon-container .sort-icon svg path{fill:var(--modus-btn-icon-only-dark-color, #252a2e)}table tr{color:var(--modus-table-color, #464b52);font-size:0.875rem;height:3rem}table tr td{background-color:var(--modus-table-bg, #fff);border:0.0625rem var(--modus-table-border-color, #b7b9c3) solid;padding:0 0.5rem}table tr td.align-center{text-align:center}table tr td.align-center div{display:flex;height:100%;justify-content:center;width:100%}table tr td.align-left{text-align:left}table tr td.align-right{text-align:right}table tr td.readonly{background-color:var(--modus-table-readonly-bg, #e0e1e9);color:var(--modus-table-readonly-color, #464b52)}table tr td.selected{background-color:var(--modus-table-selected-bg, #dcedf9)}table tr td .cell-link{color:var(--modus-link-color, #217cbb);cursor:pointer;display:inline-block;font-weight:600}table tr td .cell-link:hover{text-decoration:underline}table tr td .cell-badge{align-items:center;display:flex;justify-content:center}table.borderless{border:none !important}table.cell-borderless th,table.cell-borderless td{border:none !important}table.row-stripe tr{border-bottom:0.0625rem var(--modus-table-border-color, #b7b9c3) solid}table.size-small th,table.size-small tr{height:2rem}modus-dropdown .row-action{border-radius:50%;cursor:pointer;padding:0.125rem;transition:background-color 0.15s ease-in-out}modus-dropdown .row-action svg{fill:var(--modus-btn-icon-only-dark-color, #252a2e)}modus-dropdown .row-action:hover{background-color:var(--modus-btn-icon-only-dark-hover-bg, #e0e1e9)}modus-dropdown .row-action:hover svg path{fill:var(--modus-btn-icon-only-dark-hover-color, #353a40)}modus-dropdown .row-action:active{background-color:var(--modus-btn-icon-only-dark-active-bg, #cbcdd6)}modus-dropdown .row-action:active svg path{fill:var(--modus-btn-icon-only-dark-active-color, #2b2a37)}modus-dropdown .list-container{position:relative;top:-6px}modus-dropdown .list-container .items-container{display:inline-block;position:sticky;width:200px}modus-dropdown .list-container .items-container .action-item{height:1.5rem;padding:0.5rem;text-align:left;user-select:none;width:200px}modus-dropdown .list-container .items-container .action-item .action-item-content{align-items:center;background-color:var(--modus-list-item-bg, #fff);border:0.0625rem solid var(--modus-list-item-border-color, #e0e1e9);color:var(--modus-list-item-color, #252a2e);display:flex;height:1.5rem;justify-content:flex-start;overflow:hidden;padding:0.5rem 1rem}modus-dropdown .list-container .items-container .action-item .action-item-content svg{margin-right:0.5rem}modus-dropdown .list-container .items-container .action-item .action-item-content svg path{fill:var(--modus-btn-icon-only-dark-color, #252a2e)}modus-dropdown .list-container .items-container .action-item .action-item-content .display-text{display:block;font-size:1rem;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%}modus-dropdown .list-container .items-container .action-item:hover .action-item-content{background-color:var(--modus-list-item-hover-bg, #e0e1e9)}";
const ModusDataTableStyle0 = modusDataTableCss;

const ModusDataTable$1 = /*@__PURE__*/ proxyCustomElement(class ModusDataTable extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.cellLinkClick = createEvent(this, "cellLinkClick", 7);
        this.rowDoubleClick = createEvent(this, "rowDoubleClick", 7);
        this.selection = createEvent(this, "selection", 7);
        this.sort = createEvent(this, "sort", 7);
        this.rowActionClick = createEvent(this, "rowActionClick", 7);
        this.classBySize = new Map([
            ['small', 'size-small'],
            ['large', 'size-large'],
        ]);
        this.columns = undefined;
        this.data = undefined;
        this.displayOptions = {
            animateRowActionsDropdown: false,
            borderless: true,
            cellBorderless: true,
            rowStripe: false,
            size: 'large',
        };
        this.rowActions = [];
        this.selectionOptions = {
            canSelect: false,
            checkboxSelection: false,
        };
        this.sortOptions = {
            canSort: false,
            serverSide: false,
        };
        this.allSelected = false;
        this.sortState = {
            columnId: '',
            direction: 'none',
        };
    }
    dataChanged(_, oldValue) {
        var _a;
        this.originalData = (_a = this.originalData) !== null && _a !== void 0 ? _a : ModusDataTableUtilities.convertToTRows(oldValue, this.columns);
    }
    componentWillLoad() {
        this.convertColumnsAndRows();
        this.updateAllSelected();
    }
    componentDidLoad() {
        this.originalData = ModusDataTableUtilities.convertToTRows(this.data, this.columns);
    }
    componentWillUpdate() {
        this.convertColumnsAndRows();
    }
    convertColumnsAndRows() {
        this.columns = ModusDataTableUtilities.convertToTColumns(this.columns);
        this.data = ModusDataTableUtilities.convertToTRows(this.data, this.columns);
    }
    emitSelection() {
        this.selection.emit(this.data.filter((row) => row._selected).map((row) => row._id));
    }
    handleCheckboxClick(rowId) {
        this.data = this.data.map((row) => {
            return Object.assign(Object.assign({}, row), { _selected: row._id === rowId ? !row._selected : row._selected });
        });
        this.updateAllSelected();
        this.emitSelection();
    }
    handleColumnHeaderClick(columnId) {
        if (!this.sortOptions.canSort) {
            return;
        }
        if (columnId === this.sortState.columnId) {
            this.sortState = Object.assign(Object.assign({}, this.sortState), { direction: this.sortState.direction === 'asc' ? 'desc' : this.sortState.direction === 'desc' ? 'none' : 'asc' });
        }
        else {
            this.sortState = Object.assign(Object.assign({}, this.sortState), { direction: 'asc', columnId: columnId });
        }
        this.sort.emit({
            columnId: this.sortState.columnId,
            direction: this.sortState.direction,
        });
        if (!this.sortOptions.serverSide) {
            this.data =
                this.sortState.direction === 'none'
                    ? this.originalData.map((originalRow) => {
                        return Object.assign(Object.assign({}, originalRow), { _selected: this.data.find((dataRow) => dataRow._id === originalRow._id)._selected });
                    })
                    : ModusDataTableUtilities.sortData(this.data, this.sortState.columnId, this.sortState.direction);
            this.updateAllSelected();
        }
    }
    handleHeaderCheckboxClick(selectAll) {
        this.data = this.data.map((row) => {
            return Object.assign(Object.assign({}, row), { _selected: selectAll });
        });
        this.emitSelection();
    }
    handleRowClick(rowId) {
        if (!this.selectionOptions.canSelect || this.selectionOptions.checkboxSelection) {
            return;
        }
        this.data = this.data.map((row) => {
            return Object.assign(Object.assign({}, row), { _selected: row._id === rowId ? !row._selected : row._selected });
        });
        this.emitSelection();
    }
    handleRowDoubleClick(rowId) {
        this.rowDoubleClick.emit(rowId);
    }
    updateAllSelected() {
        var _a;
        this.allSelected = (_a = this.data) === null || _a === void 0 ? void 0 : _a.every((row) => row._selected);
    }
    render() {
        var _a, _b, _c;
        const className = `
      ${this.displayOptions.borderless ? 'borderless' : ''}
      ${this.displayOptions.cellBorderless ? 'cell-borderless' : ''}
      ${this.displayOptions.rowStripe ? 'row-stripe' : ''}
      ${this.classBySize.get(this.displayOptions.size)}
    `;
        return (h("table", { key: 'bb903b6dd2d3c5aa025b858f9a26a66ff1248cac', class: className }, h("colgroup", { key: 'afd0ce04b4c068839824ddc648e42e6241459752' }, this.selectionOptions.canSelect && this.selectionOptions.checkboxSelection && h("col", { style: { width: '34px' } }), (_a = this.columns) === null || _a === void 0 ? void 0 :
            _a.map((column) => h("col", { style: { width: column.width } })), !!this.rowActions.length && h("col", { style: { width: '34px' } })), h("thead", { key: '6f9c407f63ff0817314f3d665bde71ac52c51601' }, h("tr", { key: '8947edd43bb022c4d4ad350a10c4cd573fbcd2c1' }, this.selectionOptions.canSelect && this.selectionOptions.checkboxSelection && (h("th", null, h("div", { class: "column-header align-center" }, h("modus-checkbox", { checked: this.allSelected, onCheckboxClick: (e) => this.handleHeaderCheckboxClick(e.detail) })))), (_b = this.columns) === null || _b === void 0 ? void 0 :
            _b.map((column) => (h(ModusDataTableHeader, { column: column, onColumnHeaderClick: (id) => this.handleColumnHeaderClick(id), sortOptions: this.sortOptions, sortState: this.sortState }))), !!this.rowActions.length && h("th", null))), h("tbody", { key: 'e9c4b28917968636b3813f9d7561a527ed0a6d86' }, (_c = this.data) === null || _c === void 0 ? void 0 : _c.map((row) => {
            var _a;
            return (h("tr", { onClick: () => this.handleRowClick(row._id), onDblClick: () => this.handleRowDoubleClick(row._id) }, this.selectionOptions.canSelect && this.selectionOptions.checkboxSelection && (h("td", { class: `align-center ${row._selected ? 'selected' : ''}`, onClick: (e) => e.stopPropagation(), onDblClick: (e) => e.stopPropagation() }, h("div", null, h("modus-checkbox", { checked: row._selected, onCheckboxClick: () => this.handleCheckboxClick(row._id) })))), (_a = this.columns) === null || _a === void 0 ? void 0 :
                _a.map((column) => {
                    var _a, _b, _c, _d;
                    return (h("td", { class: `align-${column.align} ${column.readonly ? 'readonly' : ''} ${row._selected ? 'selected' : ''}` }, ((_a = row[column.id]) === null || _a === void 0 ? void 0 : _a._type) === 'link' && (h(ModusDataTableCellLinkPart, { link: row[column.id], onLinkClick: () => this.cellLinkClick.emit(row[column.id]) })), ((_b = row[column.id]) === null || _b === void 0 ? void 0 : _b._type) === 'badge' && h(ModusDataTableCellBadgePart, { badge: row[column.id] }), !((_c = row[column.id]) === null || _c === void 0 ? void 0 : _c._type) && ((_d = row[column.id]) === null || _d === void 0 ? void 0 : _d.toString())));
                }), !!this.rowActions.length && (h("td", { class: `align-center ${row._selected ? 'selected' : ''}`, onClick: (e) => e.stopPropagation(), onDblClick: (e) => e.stopPropagation() }, h(ModusDataTableRowActionDropdown, { actions: this.rowActions, animateDropdown: this.displayOptions.animateRowActionsDropdown, onRowActionClick: (actionId, rowId) => this.rowActionClick.emit({ actionId, rowId }), rowId: row._id })))));
        }))));
    }
    static get watchers() { return {
        "data": ["dataChanged"]
    }; }
    static get style() { return ModusDataTableStyle0; }
}, [1, "modus-data-table", {
        "columns": [1040],
        "data": [1040],
        "displayOptions": [16],
        "rowActions": [16],
        "selectionOptions": [16],
        "sortOptions": [16],
        "allSelected": [32],
        "sortState": [32]
    }, undefined, {
        "data": ["dataChanged"]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["modus-data-table", "modus-badge", "modus-checkbox", "modus-dropdown", "modus-tooltip"];
    components.forEach(tagName => { switch (tagName) {
        case "modus-data-table":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ModusDataTable$1);
            }
            break;
        case "modus-badge":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "modus-checkbox":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "modus-dropdown":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "modus-tooltip":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}

const ModusDataTable = ModusDataTable$1;
const defineCustomElement = defineCustomElement$1;

export { ModusDataTable, defineCustomElement };
