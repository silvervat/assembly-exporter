import { proxyCustomElement, HTMLElement, h } from '@stencil/core/internal/client';

const modusListCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");ul{border-radius:0.25rem;display:flex;flex-direction:column;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";list-style:none;margin:0;padding:0;position:relative}";
const ModusListStyle0 = modusListCss;

const ModusList = /*@__PURE__*/ proxyCustomElement(class ModusList extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
    }
    handleKeyDown(e) {
        const itemsLength = this.element.children.length;
        if (e.key.toLowerCase() === 'arrowdown') {
            const index = Array.prototype.indexOf.call(this.element.children, e.target);
            let next = this.element.children.item((index + 1) % itemsLength);
            while (next === null || next === void 0 ? void 0 : next.disabled) {
                next = this.element.children.item((index + 2) % itemsLength);
            }
            next === null || next === void 0 ? void 0 : next.focusItem();
            e.preventDefault();
        }
        if (e.key.toLowerCase() === 'arrowup') {
            const index = Array.prototype.indexOf.call(this.element.children, e.target);
            let prev = this.element.children.item((index - 1) % itemsLength);
            while (prev === null || prev === void 0 ? void 0 : prev.disabled) {
                prev = this.element.children.item((index - 2) % itemsLength);
            }
            prev === null || prev === void 0 ? void 0 : prev.focusItem();
            e.preventDefault();
        }
    }
    render() {
        return (h("ul", { key: '736a3b1e1b49cfef17e38f3cf46461dbd3f688ef', part: "list-items", onKeyDown: (e) => this.handleKeyDown(e) }, h("slot", { key: '185e7bdd4c8d27b9d0c78af47db1ea4a76685608' })));
    }
    get element() { return this; }
    static get style() { return ModusListStyle0; }
}, [1, "modus-list"]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["modus-list"];
    components.forEach(tagName => { switch (tagName) {
        case "modus-list":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ModusList);
            }
            break;
    } });
}

export { ModusList as M, defineCustomElement as d };
