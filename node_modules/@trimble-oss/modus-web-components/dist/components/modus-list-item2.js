import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import { I as IconCheck } from './icon-check.js';
import { M as ModusIconMap } from './ModusIconMap.js';

const modusListItemCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");li{align-items:center;background-color:var(--modus-list-item-bg, #fff);border:1px solid var(--modus-list-item-border-color, #e0e1e9);border-radius:4px;box-sizing:border-box;color:var(--modus-list-item-color, #252a2e);display:flex;fill:var(--modus-list-item-color, #252a2e);font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";gap:1rem;justify-content:space-between;min-height:2.5rem;padding:0.375rem 0.75rem}li .text-container{display:flex;flex-direction:column;flex-grow:1;justify-content:center;min-width:0}li .slot{font-size:0.875rem;line-height:1.125rem;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}li .sub-text{display:block;font-size:0.75rem;line-height:1rem}li .wrap{word-wrap:break-word}li .no-wrap{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}li .icon-check{flex-shrink:0;margin-left:auto}li.borderless,li.borderless:hover:not(.disabled){border:none}li:hover:not(.disabled){background-color:var(--modus-list-item-hover-bg, #e0e1e9);border:1px solid var(--modus-list-item-border-color, #e0e1e9);color:var(--modus-list-item-color, #252a2e);fill:var(--modus-list-item-color, #252a2e)}li.small{gap:0.625rem;min-height:2rem;padding:0.25rem 0.625rem}li.small .slot{font-size:0.75rem;line-height:0.875rem}li.small .sub-text{font-size:0.625rem;line-height:0.75rem}li.large{min-height:3rem;padding:0.625rem 1rem}li.disabled{color:var(--modus-list-item-disabled-color, #b7b9c3);cursor:default;fill:var(--modus-list-item-disabled-color, #b7b9c3)}li.selected{background-color:var(--modus-list-item-selected-bg, #dcedf9);border:1px solid var(--modus-list-item-selected-border-color, #dcedf9);color:var(--modus-list-item-color, #252a2e);fill:var(--modus-list-item-color, #252a2e)}";
const ModusListItemStyle0 = modusListItemCss;

const ModusListItem = /*@__PURE__*/ proxyCustomElement(class ModusListItem extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.itemClick = createEvent(this, "itemClick", 7);
        this.classBySize = new Map([
            ['condensed', 'small'],
            ['standard', 'standard'],
            ['large', 'large'],
        ]);
        this.borderless = undefined;
        this.disabled = undefined;
        this.selected = undefined;
        this.leftIcon = undefined;
        this.size = 'standard';
        this.subText = undefined;
        this.wrapSubText = true;
        this.type = 'standard';
    }
    async focusItem() {
        var _a;
        (_a = this.listItemRef) === null || _a === void 0 ? void 0 : _a.focus();
    }
    handleKeydown(e) {
        if (e.key.toLowerCase() === 'enter' && !this.disabled) {
            this.itemClick.emit();
        }
    }
    render() {
        const containerClass = `${this.classBySize.get(this.size)} ${this.disabled ? 'disabled' : ''} ${this.selected ? 'selected' : ''} ${this.borderless ? 'borderless' : ''}`;
        const iconCheckSize = this.size === 'condensed' ? '16' : '24';
        return (h("li", { key: 'c97f89b0f60a33c31724c333d530d40099fba009', ref: (el) => (this.listItemRef = el), class: containerClass, tabIndex: this.disabled ? -1 : 0, onClick: () => (!this.disabled ? this.itemClick.emit() : null), onKeyDown: (e) => this.handleKeydown(e) }, this.leftIcon && (h("span", { class: "icon left-icon" }, h(ModusIconMap, { icon: this.leftIcon, size: "24" }))), h("div", { key: '1056fa568c426956c63dbc77894bf76abd923ad9', class: "text-container" }, h("span", { key: '4beca0a38e0455008f30ee42a6eef4750adb9281', class: "slot" }, h("slot", { key: '61c9b46b7092fd7a4ea15a2421bb2030b69c89a7' })), this.subText && h("span", { class: 'sub-text ' + (this.wrapSubText ? 'wrap' : 'no-wrap') }, this.subText)), this.selected && h(IconCheck, { size: iconCheckSize })));
    }
    static get style() { return ModusListItemStyle0; }
}, [1, "modus-list-item", {
        "borderless": [4],
        "disabled": [4],
        "selected": [4],
        "leftIcon": [1, "left-icon"],
        "size": [1],
        "subText": [1, "sub-text"],
        "wrapSubText": [4, "wrap-sub-text"],
        "type": [1],
        "focusItem": [64]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["modus-list-item"];
    components.forEach(tagName => { switch (tagName) {
        case "modus-list-item":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ModusListItem);
            }
            break;
    } });
}

export { ModusListItem as M, defineCustomElement as d };
