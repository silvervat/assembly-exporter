import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { N as NavigateTableCells } from './table-cell-navigation.utility.js';
import { g as KEYBOARD_ENTER } from './modus-table.constants.js';
import { d as defineCustomElement$2 } from './modus-button2.js';
import { d as defineCustomElement$1 } from './modus-table-row-actions2.js';

const ModusTableRowActionsCell = /*@__PURE__*/ proxyCustomElement(class ModusTableRowActionsCell extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.onCellKeyDown = (e) => this.handleCellKeydown(e);
        this.handleCellKeydown = (event) => {
            var _a, _b, _c;
            if (event.defaultPrevented)
                return;
            const key = (_a = event.key) === null || _a === void 0 ? void 0 : _a.toLowerCase();
            if (key === KEYBOARD_ENTER) {
                (_c = (_b = this.el.firstChild) === null || _b === void 0 ? void 0 : _b.firstChild) === null || _c === void 0 ? void 0 : _c.focusButton();
                event.stopPropagation();
            }
            else {
                NavigateTableCells({
                    eventKey: event.key,
                    cellElement: this.cellEl,
                });
            }
        };
        this.row = undefined;
        this.context = undefined;
    }
    connectedCallback() {
        this.cellEl = this.el.parentElement;
        this.cellEl.addEventListener('keydown', this.onCellKeyDown);
    }
    disconnectedCallback() {
        if (this.cellEl) {
            this.cellEl.removeEventListener('keydown', this.onCellKeyDown);
        }
    }
    render() {
        return (h(Host, { key: 'a7c39d0729d1b511ce0b50e1a2a0c4530bb2be8a' }, h("modus-table-row-actions", { key: '18eb35d80a7917256ea02074fe46dac4a4383f3a', row: this.row, context: this.context })));
    }
    get el() { return this; }
}, [0, "modus-table-row-actions-cell", {
        "row": [16],
        "context": [16]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["modus-table-row-actions-cell", "modus-button", "modus-table-row-actions"];
    components.forEach(tagName => { switch (tagName) {
        case "modus-table-row-actions-cell":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ModusTableRowActionsCell);
            }
            break;
        case "modus-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "modus-table-row-actions":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}

export { ModusTableRowActionsCell as M, defineCustomElement as d };
