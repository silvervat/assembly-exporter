import { h, proxyCustomElement, HTMLElement, createEvent } from '@stencil/core/internal/client';

// eslint-disable-next-line
const ModusRadioButton = (props) => (h("div", { class: `modus-radio-button ${props.disabled ? 'disabled' : ''}` },
    h("div", { class: `radio ${props.size}`, tabIndex: 0, onClick: () => props.handleButtonClick(props.id), onKeyDown: (event) => props.handleKeydown(event, props.id) },
        h("input", { id: `radio-${props.id}`, checked: props.checked, disabled: props.disabled, name: props.name, type: "radio" }),
        h("span", { class: `checkmark` }),
        h("label", { htmlFor: `radio-${props.id}` }, props.label))));

const modusRadioGroupCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");div.modus-radio-group{display:flex;flex-direction:column;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";margin:0;padding:0;position:relative}.modus-radio-button{display:inline-block}.modus-radio-button .radio{align-items:center;display:inline-flex;height:2rem;outline:none}.modus-radio-button .radio input{display:none}.modus-radio-button .radio .checkmark{background-color:var(--modus-radio-btn-bg, #fff);border:0.125rem solid var(--modus-radio-btn-border-color, #90939f);border-radius:50%;height:0.75rem;position:absolute;transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;width:0.75rem}.modus-radio-button .radio.small .checkmark{border:0.125rem solid var(--modus-radio-btn-border-color, #90939f);height:0.625rem;width:0.625rem}.modus-radio-button .radio.small input:checked~.checkmark::after{height:0.38rem;left:0.15rem;top:0.125rem;width:0.38rem}.modus-radio-button .radio.small:focus .checkmark{outline:0.125rem solid var(--modus-radio-btn-focus-color, #3db0ee);outline-offset:0.0625rem}.modus-radio-button .radio.small label{font-size:0.625rem;margin-left:1.25rem}.modus-radio-button .radio .checkmark::after{background:var(--modus-radio-btn-selected-border-color, #217cbb);border-radius:90%;content:\"\";display:none;forced-color-adjust:none;height:0.44rem;left:0.155rem;position:absolute;top:0.155rem;width:0.44rem}.modus-radio-button .radio input:checked~.checkmark{background-color:var(--modus-radio-btn-bg, #fff);border-color:var(--modus-radio-btn-selected-border-color, #217cbb)}.modus-radio-button .radio input:checked~.checkmark::after{display:block}.modus-radio-button .radio label{color:var(--modus-radio-btn-label-color, #464b52);font-size:0.75rem;margin-left:1.925rem}.modus-radio-button .radio:active .checkmark{background-color:var(--modus-radio-btn-selected-border-color, #217cbb);border-color:var(--modus-radio-btn-selected-border-color, #217cbb)}.modus-radio-button .radio:hover .checkmark{border-color:var(--modus-radio-btn-hover-border-color, #217cbb)}.modus-radio-button .radio:focus .checkmark{border-color:var(--modus-radio-btn-hover-border-color, #217cbb);outline:0.1875rem solid var(--modus-radio-btn-focus-color, #3db0ee);outline-offset:0.125rem}.modus-radio-button.disabled{opacity:var(--modus-radio-btn-disabled-opacity, 0.3);pointer-events:none}";
const ModusRadioGroupStyle0 = modusRadioGroupCss;

const ModusRadioGroup$1 = /*@__PURE__*/ proxyCustomElement(class ModusRadioGroup extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.buttonClick = createEvent(this, "buttonClick", 7);
        this.ariaLabel = undefined;
        this.checkedId = undefined;
        this.name = undefined;
        this.radioButtons = [];
        this.size = 'medium';
    }
    componentWillLoad() {
        this.radioButtons.forEach((radioButton) => {
            this.checkedId = radioButton.checked ? radioButton.id : this.checkedId;
        });
    }
    handleButtonClick(id) {
        this.setCheckedIdAndUpdateRadioButtons(id);
        this.buttonClick.emit(this.checkedId);
    }
    handleButtonKeydown(event, id) {
        if (event.code !== 'Enter') {
            return;
        }
        this.handleButtonClick(id);
    }
    setCheckedIdAndUpdateRadioButtons(id) {
        this.checkedId = id;
        this.radioButtons.forEach((radioButton) => {
            radioButton.checked = radioButton.id === this.checkedId;
        });
    }
    render() {
        return (h("div", { key: '70f3b4f61ab1787271891923198db83eca0a67cb', class: "modus-radio-group", "aria-label": this.ariaLabel }, this.radioButtons.map((radioButton) => {
            return (h(ModusRadioButton, { size: this.size, checked: radioButton.checked, disabled: radioButton.disabled, label: radioButton.label, name: this.name, id: radioButton.id, handleButtonClick: (id) => this.handleButtonClick(id), handleKeydown: (event, id) => this.handleButtonKeydown(event, id) }));
        })));
    }
    static get watchers() { return {
        "checkedId": ["setCheckedIdAndUpdateRadioButtons"]
    }; }
    static get style() { return ModusRadioGroupStyle0; }
}, [1, "modus-radio-group", {
        "ariaLabel": [1, "aria-label"],
        "checkedId": [1025, "checked-id"],
        "name": [1],
        "radioButtons": [1040],
        "size": [1]
    }, undefined, {
        "checkedId": ["setCheckedIdAndUpdateRadioButtons"]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["modus-radio-group"];
    components.forEach(tagName => { switch (tagName) {
        case "modus-radio-group":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ModusRadioGroup$1);
            }
            break;
    } });
}

const ModusRadioGroup = ModusRadioGroup$1;
const defineCustomElement = defineCustomElement$1;

export { ModusRadioGroup, defineCustomElement };
