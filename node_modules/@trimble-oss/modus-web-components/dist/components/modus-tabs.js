import { proxyCustomElement, HTMLElement, createEvent, h, Fragment } from '@stencil/core/internal/client';
import { M as ModusIconMap } from './ModusIconMap.js';

const modusTabsCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.modus-tabs{border:solid var(--modus-tab-bottom-line-color, #cbcdd6);border-width:0 0 0.0625rem 0;display:inline-flex;flex-direction:row;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";justify-content:flex-start;width:100%}.modus-tabs.medium{height:48px}.modus-tabs.small{height:32px}.modus-tabs .tab{align-items:center;background-color:transparent;border:solid transparent 0.1875rem;border-radius:0.25rem 0.25rem 0 0;color:var(--modus-tab-color, #252a2e);display:flex;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";font-weight:600;justify-content:center;overflow:hidden;text-transform:uppercase;text-wrap:none;user-select:none}.modus-tabs .tab .icon{align-items:center;display:flex;flex:0 0 auto;pointer-events:none}.modus-tabs .tab .icon.left-icon{padding-right:0.5rem}.modus-tabs .tab .icon.right-icon{padding-left:0.5rem}.modus-tabs .tab.resizable{width:100%}.modus-tabs .tab.medium{font-size:0.875rem;padding:0 32px}.modus-tabs .tab.small{font-size:0.75rem;padding:0 1rem}.modus-tabs .tab.active{border-color:transparent transparent var(--modus-tab-active-color, #217cbb) transparent;color:var(--modus-tab-active-color, #217cbb)}.modus-tabs .tab:hover{background-color:var(--modus-tab-hover-bg, #dcedf9);color:var(--modus-tab-hover-color, #217cbb);cursor:pointer}";
const ModusTabsStyle0 = modusTabsCss;

const ModusTabs$1 = /*@__PURE__*/ proxyCustomElement(class ModusTabs extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.tabChange = createEvent(this, "tabChange", 7);
        this.classBySize = new Map([
            ['medium', 'medium'],
            ['small', 'small'],
        ]);
        this.fullWidth = false;
        this.ariaLabel = undefined;
        this.size = 'medium';
        this.tabs = [];
    }
    handleKeyDown(event, id) {
        if (event.code !== 'Enter') {
            return;
        }
        this.handleTabChange(id);
    }
    handleTabChange(id) {
        const activeTab = this.tabs.find((tab) => tab.active);
        if ((activeTab === null || activeTab === void 0 ? void 0 : activeTab.id) === id) {
            return;
        }
        this.tabs = this.tabs.map((tab) => {
            return Object.assign(Object.assign({}, tab), { active: tab.id === id });
        });
        this.tabChange.emit(id);
    }
    renderIconWithText(label, leftIcon, rightIcon) {
        return (h(Fragment, null, leftIcon && (h("span", { class: "icon left-icon" }, h(ModusIconMap, { icon: leftIcon, size: this.size === 'small' ? '16' : '24' }))), h("span", { class: "label" }, label), rightIcon && (h("span", { class: "icon right-icon" }, h(ModusIconMap, { icon: rightIcon, size: this.size === 'small' ? '16' : '24' })))));
    }
    renderIconOnly(iconOnly) {
        return (h("span", { class: "icon" }, h(ModusIconMap, { icon: iconOnly, size: this.size === 'small' ? '16' : '24' })));
    }
    render() {
        const tabs = this.tabs.map((tab) => {
            return (h("button", { id: `${tab.id}`, class: `tab ${tab.active ? 'active' : ''} ${this.classBySize.get(this.size)} ${this.fullWidth ? 'resizable' : ''} `, onClick: () => this.handleTabChange(tab.id), onKeyDown: (event) => this.handleKeyDown(event, tab.id) }, tab.iconOnly
                ? this.renderIconOnly(tab.iconOnly)
                : this.renderIconWithText(tab.label, tab.leftIcon, tab.rightIcon)));
        });
        return (h("div", { "aria-label": this.ariaLabel || undefined, class: `modus-tabs ${this.classBySize.get(this.size)}` }, tabs));
    }
    static get style() { return ModusTabsStyle0; }
}, [1, "modus-tabs", {
        "fullWidth": [4, "full-width"],
        "ariaLabel": [1, "aria-label"],
        "size": [1],
        "tabs": [1040]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["modus-tabs"];
    components.forEach(tagName => { switch (tagName) {
        case "modus-tabs":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ModusTabs$1);
            }
            break;
    } });
}

const ModusTabs = ModusTabs$1;
const defineCustomElement = defineCustomElement$1;

export { ModusTabs, defineCustomElement };
