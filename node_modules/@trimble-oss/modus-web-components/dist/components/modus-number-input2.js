import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import { g as generateElementId } from './utils.js';

const modusNumberInputCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.modus-number-input{display:inline-flex;flex-direction:column;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";width:100%}.modus-number-input label{color:var(--modus-input-label-color, #464b52);font-size:0.75rem;font-weight:700;margin-bottom:0.25rem}.modus-number-input label span{color:var(--modus-input-border-color, #6a6e79);margin:0.25rem}.modus-number-input .label-container{align-items:baseline;display:inline-block;margin-bottom:0.25rem}.modus-number-input .label-container .required{color:var(--modus-input-validation-error-color, #da212c);margin-left:0.25rem}.modus-number-input .input-container{align-items:center;background-color:var(--modus-input-bg, #fff);border:0.0625rem solid var(--modus-input-border-color, #6a6e79);border-radius:4px;display:flex;flex-direction:row;height:32px}.modus-number-input .input-container input{background-color:transparent;border:none;color:var(--modus-input-color, #252a2e);font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";outline:0;padding:0 0.5rem;width:100%}.modus-number-input .input-container input.text-align-right{padding-right:0;text-align:right}.modus-number-input .input-container input::placeholder{color:var(--modus-input-hint-text-color, #a3a6b1)}.modus-number-input .input-container:focus-within{border-color:var(--modus-input-border-active-color, #217cbb);box-shadow:0 0 0 1px var(--modus-input-border-active-color, #217cbb)}.modus-number-input .input-container.error{border-color:var(--modus-input-validation-error-color, #da212c);box-shadow:0 0 0 1px var(--modus-input-validation-error-color, #da212c)}.modus-number-input .input-container.valid{border-color:var(--modus-input-validation-success-color, #006638);box-shadow:0 0 0 1px var(--modus-input-validation-success-color, #006638)}.modus-number-input .input-container.large{height:48px}.modus-number-input .input-container.large input{font-size:0.875rem;height:47px;padding:0 1rem}.modus-number-input .input-container:has(input[readonly]){background-color:var(--modus-input-readonly-bg, #e0e1e9);border-color:var(--modus-input-disabled-bottom-line-color, #a3a6b1)}.modus-number-input .sub-text{font-size:0.75rem;margin-top:0.25rem}.modus-number-input .sub-text.helper{color:var(--modus-input-label-color, #464b52);display:block;font-weight:600;margin:0}.modus-number-input .sub-text.error{color:var(--modus-input-validation-error-color, #da212c)}.modus-number-input .sub-text.valid{color:var(--modus-input-validation-success-color, #006638)}.modus-number-input.disabled{pointer-events:none}.modus-number-input.disabled .input-container{background-color:var(--modus-input-disabled-bg, #e0e1e9);border-color:transparent}.modus-number-input.disabled .input-container input{background-color:transparent;color:var(--modus-input-disabled-color, #a3a6b1)}";
const ModusNumberInputStyle0 = modusNumberInputCss;

const ModusNumberInput = /*@__PURE__*/ proxyCustomElement(class ModusNumberInput extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.valueChange = createEvent(this, "valueChange", 7);
        this.inputId = generateElementId() + '_number-input';
        this.classBySize = new Map([
            ['medium', 'medium'],
            ['large', 'large'],
        ]);
        this.ariaLabel = undefined;
        this.disabled = undefined;
        this.errorText = undefined;
        this.helperText = undefined;
        this.label = undefined;
        this.maxValue = undefined;
        this.minValue = undefined;
        this.placeholder = undefined;
        this.readOnly = undefined;
        this.required = undefined;
        this.size = 'medium';
        this.step = undefined;
        this.textAlign = 'left';
        this.validText = undefined;
        this.value = undefined;
    }
    handleOnInput() {
        this.value = this.numberInput.value;
        this.valueChange.emit(this.value);
    }
    /** Focus the input. */
    async focusInput() {
        this.numberInput.focus();
    }
    watchValue(newValue, oldValue) {
        if (isNaN(+newValue)) {
            this.value = oldValue;
        }
        else {
            this.value = newValue;
        }
    }
    render() {
        var _a;
        const textAlignClassName = `text-align-${this.textAlign}`;
        const buildContainerClassNames = () => {
            const classNames = [];
            classNames.push('modus-number-input');
            if (this.disabled) {
                classNames.push('disabled');
            }
            return classNames.join(' ');
        };
        const buildInputContainerClassNames = () => {
            const classNames = [];
            classNames.push('input-container');
            classNames.push(this.classBySize.get(this.size));
            if (this.errorText) {
                classNames.push('error');
            }
            if (this.validText) {
                classNames.push('valid');
            }
            return classNames.join(' ');
        };
        return (h("div", { class: buildContainerClassNames() }, this.label || this.required ? (h("div", { class: "label-container" }, this.label ? h("label", { htmlFor: this.inputId }, this.label) : null, this.required ? h("span", { class: "required" }, "*") : null, this.helperText ? h("label", { class: "sub-text helper" }, this.helperText) : null)) : null, h("div", { class: buildInputContainerClassNames(), part: "input-container" }, h("input", { id: this.inputId, "aria-label": this.ariaLabel, "aria-invalid": !!this.errorText, "aria-required": (_a = this.required) === null || _a === void 0 ? void 0 : _a.toString(), "aria-valuemax": this.maxValue, "aria-valuemin": this.minValue, "aria-valuenow": this.value, class: textAlignClassName, disabled: this.disabled, max: this.maxValue, min: this.minValue, onInput: () => this.handleOnInput(), placeholder: this.placeholder, readonly: this.readOnly, ref: (el) => (this.numberInput = el), step: this.step, tabIndex: 0, type: "number", value: this.value })), this.errorText ? (h("label", { class: "sub-text error" }, this.errorText)) : this.validText ? (h("label", { class: "sub-text valid" }, this.validText)) : null));
    }
    static get watchers() { return {
        "value": ["watchValue"]
    }; }
    static get style() { return ModusNumberInputStyle0; }
}, [1, "modus-number-input", {
        "ariaLabel": [1, "aria-label"],
        "disabled": [4],
        "errorText": [1, "error-text"],
        "helperText": [1, "helper-text"],
        "label": [1],
        "maxValue": [2, "max-value"],
        "minValue": [2, "min-value"],
        "placeholder": [1],
        "readOnly": [4, "read-only"],
        "required": [4],
        "size": [1],
        "step": [2],
        "textAlign": [1, "text-align"],
        "validText": [1, "valid-text"],
        "value": [1025],
        "focusInput": [64]
    }, undefined, {
        "value": ["watchValue"]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["modus-number-input"];
    components.forEach(tagName => { switch (tagName) {
        case "modus-number-input":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ModusNumberInput);
            }
            break;
    } });
}

export { ModusNumberInput as M, defineCustomElement as d };
