import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import { I as IconSearch, d as defineCustomElement$1 } from './modus-text-input2.js';
import { g as generateElementId } from './utils.js';
import { I as IconCheck } from './IconCheck.js';
import { d as defineCustomElement$2 } from './modus-chip2.js';

const modusAutocompleteCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.autocomplete{position:relative}.autocomplete ul{list-style-type:none;margin:0;padding:0}.autocomplete label{color:var(--modus-autocomplete-label-color, #464b52);font-size:0.75rem;font-weight:700;margin-bottom:0.25rem}.autocomplete .label-container{display:inline-block;margin-bottom:0.25rem}.autocomplete .label-container .required{bottom:0.0625rem;color:var(--modus-autocomplete-validation-error-color, #da212c);margin-left:0.25rem;position:relative}.autocomplete .chips-container{align-items:center;background-color:var(--modus-autocomplete-bg, #fff);border:var(--modus-autocomplete-border, 0.0625rem solid var(--modus-input-border-color, #6a6e79));border-bottom-color:var(--modus-input-border-color, #6a6e79);border-radius:4px;box-sizing:border-box;display:flex;flex-flow:row wrap;height:auto;margin:0;min-height:32px;padding:0;position:relative;width:100%}.autocomplete .chips-container:focus-within{border-color:var(--modus-input-border-active-line-color, #217cbb);box-shadow:0 0 0 1px var(--modus-input-border-active-line-color, #217cbb)}.autocomplete .chips-container .icon-search{margin-left:4px;margin-right:0}.autocomplete .chips-container modus-chip{margin-left:4px;margin-right:4px}.autocomplete .chips-container .input{display:flex;flex:1;height:auto !important;position:relative;--input-font-size:var(--modus-autocomplete-font-size, 12px)}.autocomplete .chips-container .input::part(input-container){border:none !important;box-shadow:none;height:1.875rem}.autocomplete .error{color:var(--modus-autocomplete-validation-error-color, #da212c)}.autocomplete .options-container{background-color:var(--modus-list-item-bg, #fff);border-radius:4px;box-shadow:0 0 4px rgba(36, 35, 45, 0.3);font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";margin:0;padding:0;position:absolute;width:100%}.autocomplete .options-container .icon-check{display:inline-flex;margin-left:auto}.autocomplete .options-container .text-option{align-items:center;border:1px solid var(--modus-list-item-border-color, #e0e1e9);color:var(--modus-list-item-color, #252a2e);cursor:pointer;display:flex;flex-direction:row;font-size:0.75rem;min-height:2rem;padding:0 8px}.autocomplete .options-container .text-option.selected{background-color:var(--modus-blue-pale, #dcedf9)}.autocomplete .options-container .text-option:hover{background-color:var(--modus-list-item-hover-bg, #e0e1e9)}.autocomplete .options-container .text-option:focus{background-color:var(--modus-list-item-hover-bg, #e0e1e9)}.autocomplete .options-container .custom-option{border:1px solid var(--modus-list-item-border-color, #e0e1e9);cursor:pointer}.autocomplete .options-container .custom-option.selected{background-color:var(--modus-blue-pale, #dcedf9)}.autocomplete .options-container .custom-option:hover{background-color:var(--modus-list-item-hover-bg, #e0e1e9)}.autocomplete .options-container .custom-option:focus{background-color:var(--modus-list-item-hover-bg, #e0e1e9)}.autocomplete .options-container .no-results{align-items:center;border:1px solid var(--modus-list-item-border-color, #e0e1e9);border-radius:4px;display:flex;flex-direction:column;height:100px;justify-content:center}.autocomplete .options-container .no-results path{fill:var(--modus-autocomplete-no-results-message-color, #252a2e)}.autocomplete .options-container .no-results .message{color:var(--modus-autocomplete-no-results-message-color, #252a2e);font-size:1.25rem;font-weight:600;margin:0 0 0.375rem 0.25rem}.autocomplete .options-container .no-results .subtext{color:var(--modus-autocomplete-no-results-subtext-color, #252a2e);font-size:0.875rem}.autocomplete.large .chips-container .input::part(input-container){height:3rem}.autocomplete.large .icon-search{margin-left:8px}.autocomplete.large .options-container>.text-option{font-size:0.875rem;min-height:3rem;padding:0 1rem}.autocomplete[aria-disabled=true] .chips-container{background-color:var(--modus-input-disabled-bg, #e0e1e9);border-color:transparent;pointer-events:none;user-select:none}.autocomplete[aria-disabled=true] .chips-container .input::part(input-container){background-color:var(--modus-input-disabled-bg, #e0e1e9);border-color:transparent;color:var(--modus-input-disabled-color, #a3a6b1);pointer-events:none;user-select:none}";
const ModusAutocompleteStyle0 = modusAutocompleteCss;

const DATA_ID = 'data-id';
const DATA_SEARCH_VALUE = 'data-search-value';
const ModusAutocomplete = /*@__PURE__*/ proxyCustomElement(class ModusAutocomplete extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.optionSelected = createEvent(this, "optionSelected", 7);
        this.valueChange = createEvent(this, "valueChange", 7);
        this.selectionsChanged = createEvent(this, "selectionsChanged", 7);
        this.listId = generateElementId() + '_list';
        this.classBySize = new Map([
            ['medium', 'medium'],
            ['large', 'large'],
        ]);
        this.displayNoResults = () => {
            var _a, _b, _c;
            return this.showNoResultsFoundMessage &&
                this.hasFocus &&
                !((_a = this.visibleOptions) === null || _a === void 0 ? void 0 : _a.length) &&
                !((_b = this.visibleCustomOptions) === null || _b === void 0 ? void 0 : _b.length) &&
                ((_c = this.value) === null || _c === void 0 ? void 0 : _c.length) > 0;
        };
        this.displayOptions = () => {
            var _a;
            const showOptions = this.showOptionsOnFocus || ((_a = this.value) === null || _a === void 0 ? void 0 : _a.length) > 0 || this.disableCloseOnSelect || this.ShowItemsOnKeyDown;
            return this.hasFocus && showOptions && !this.disabled;
        };
        this.handleCustomOptionClick = (option) => {
            const optionValue = option.getAttribute(DATA_SEARCH_VALUE);
            const optionId = option.getAttribute(DATA_ID);
            if (this.multiple) {
                this.addChipValue({ id: optionId, value: optionValue });
            }
            else {
                this.selectedOption = optionValue;
                this.disableFiltering = this.disableCloseOnSelect;
                this.handleSearchChange(optionValue);
                this.focusItemIndex = this.visibleCustomOptions.findIndex((el) => el.getAttribute(DATA_ID) === optionId);
            }
            this.hasFocus = this.disableCloseOnSelect;
            this.optionSelected.emit(optionId);
        };
        this.handleInputBlur = () => {
            this.hasFocus = !this.disableCloseOnSelect;
        };
        this.handleInputKeyDown = (event) => {
            if (event.defaultPrevented) {
                return; // Do nothing if event already handled
            }
            if (event.code.toUpperCase() === 'ARROWDOWN') {
                this.ShowItemsOnKeyDown = true;
                if (this.displayOptions() && !this.displayNoResults()) {
                    this.focusItemIndex = 0;
                    this.focusOptionItem();
                }
            }
            else if (event.code.toUpperCase() === 'ESCAPE') {
                this.ShowItemsOnKeyDown = false;
            }
        };
        this.handleOptionKeyDown = (event, option, isCustomOption = false) => {
            this.disableFiltering = !this.disableCloseOnSelect;
            switch (event.key.toUpperCase()) {
                case 'ENTER':
                case ' ':
                    if (isCustomOption) {
                        this.handleCustomOptionClick(option);
                    }
                    else {
                        this.handleOptionClick(option);
                    }
                    break;
                case 'ARROWDOWN':
                    if (isCustomOption) {
                        this.handleArrowDown(this.visibleCustomOptions);
                    }
                    else {
                        this.handleArrowDown(this.visibleOptions);
                    }
                    event.preventDefault();
                    break;
                case 'ARROWUP':
                    this.handleArrowUp();
                    break;
                default:
                    return;
            }
        };
        this.handleOptionClick = (option) => {
            if (this.multiple) {
                this.addChipValue(option);
            }
            else {
                this.selectedOption = option.value;
                this.disableFiltering = this.disableCloseOnSelect;
                this.focusItemIndex = this.visibleOptions.findIndex((el) => el.id === option.id);
                this.handleSearchChange(option.value);
            }
            this.hasFocus = this.disableCloseOnSelect;
            this.optionSelected.emit(option.id);
        };
        this.handleArrowDown = (options) => {
            this.focusItemIndex = Math.min(options.length - 1, this.focusItemIndex + 1);
            this.focusOptionItem();
        };
        this.handleArrowUp = () => {
            this.focusItemIndex = Math.max(0, this.focusItemIndex - 1);
            this.focusOptionItem();
        };
        this.focusOptionItem = () => {
            this.el.shadowRoot.querySelectorAll('[role="option"]')[this.focusItemIndex].focus();
        };
        this.handleSearchChange = (search) => {
            this.updateVisibleOptions(search);
            this.updateVisibleCustomOptions(search);
            this.value = search;
            this.valueChange.emit(search);
        };
        this.handleTextInputFocus = () => {
            var _a;
            const hasDefaultTextInput = ((_a = this.value) === null || _a === void 0 ? void 0 : _a.length) > 0 && !this.disableCloseOnSelect;
            if (hasDefaultTextInput) {
                this.disableFiltering = true;
            }
        };
        this.handleTextInputValueChange = (event) => {
            // Cancel the modus-text-input's value change event or else it will bubble to consumer.
            event.stopPropagation();
            this.disableFiltering = !this.disableCloseOnSelect;
            this.handleSearchChange(event.detail);
        };
        this.updateVisibleCustomOptions = (search = '') => {
            var _a, _b, _c;
            if (!this.hasFocus) {
                return;
            }
            const slotted = (_a = this.el.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('slot');
            if (!slotted || typeof slotted.assignedNodes !== 'function') {
                return;
            }
            this.customOptions = slotted.assignedNodes().filter((node) => node.nodeName !== '#text');
            search = search || '';
            const isSearchEmpty = search.length === 0;
            if (isSearchEmpty) {
                this.selectedOption = '';
            }
            if (!this.disableFiltering) {
                this.visibleCustomOptions = (_b = this.customOptions) === null || _b === void 0 ? void 0 : _b.filter((o) => {
                    return o.getAttribute(DATA_SEARCH_VALUE).toLowerCase().includes(search.toLowerCase());
                });
            }
            else {
                this.visibleCustomOptions = this.customOptions;
            }
            if (((_c = this.visibleCustomOptions) === null || _c === void 0 ? void 0 : _c.length) === 0) {
                this.showNoResultsFoundMessage = true;
            }
            this.containsSlottedElements = this.customOptions.length > 0;
        };
        this.updateVisibleOptions = (search = '') => {
            var _a, _b;
            if (!this.hasFocus) {
                return;
            }
            search = search || '';
            const isSearchEmpty = search.length === 0;
            if (isSearchEmpty) {
                this.selectedOption = '';
            }
            if (!this.disableFiltering) {
                this.visibleOptions = (_a = this.options) === null || _a === void 0 ? void 0 : _a.filter((o) => {
                    return o.value.toLowerCase().includes(search.toLowerCase());
                });
            }
            else {
                this.visibleOptions = this.options;
            }
            if (((_b = this.visibleOptions) === null || _b === void 0 ? void 0 : _b.length) === 0) {
                this.showNoResultsFoundMessage = true;
            }
        };
        // Do not display the slot for the custom options. We use this hidden slot to reference the slot's children.
        this.CustomOptionsSlot = () => (h("div", { style: { display: 'none' } }, h("slot", { onSlotchange: () => this.updateVisibleCustomOptions(this.value) })));
        this.TextInput = () => (h("modus-text-input", { class: "input", autocomplete: "off", clearable: this.clearable && !this.readOnly && !!this.value, errorText: this.hasFocus ? '' : this.errorText, includeSearchIcon: false, onFocus: this.handleTextInputFocus, onValueChange: (searchEvent) => this.handleTextInputValueChange(searchEvent), placeholder: this.placeholder, size: this.size, type: "search", value: this.value, onBlur: this.handleInputBlur, role: "combobox", "aria-autocomplete": "list", "aria-controls": this.listId, "aria-expanded": this.displayOptions() }));
        this.scrollToOptionSelected = () => {
            if (this.multiple || this.focusItemIndex === 0) {
                return;
            }
            const optionList = this.el.shadowRoot.querySelector(`.options-container`);
            const selectedOption = optionList.querySelector('li.selected');
            if (selectedOption) {
                selectedOption.scrollIntoView({ behavior: 'smooth', inline: 'nearest' });
            }
        };
        this.multiple = undefined;
        this.ariaLabel = undefined;
        this.clearable = false;
        this.disabled = undefined;
        this.disableCloseOnSelect = undefined;
        this.dropdownMaxHeight = '300px';
        this.dropdownZIndex = '1';
        this.errorText = undefined;
        this.includeSearchIcon = true;
        this.label = undefined;
        this.noResultsFoundText = 'No results found';
        this.noResultsFoundSubtext = 'Check spelling or try a different keyword';
        this.options = undefined;
        this.selectedChips = [];
        this.selectedOption = undefined;
        this.showOptionsOnFocus = undefined;
        this.placeholder = undefined;
        this.readOnly = undefined;
        this.required = undefined;
        this.showNoResultsFoundMessage = true;
        this.size = 'medium';
        this.value = undefined;
        this.containsSlottedElements = false;
        this.hasFocus = false;
        this.visibleOptions = [];
        this.customOptions = [];
        this.visibleCustomOptions = [];
        this.disableFiltering = false;
        this.focusItemIndex = 0;
        this.ShowItemsOnKeyDown = false;
    }
    watchOptions() {
        this.convertOptions();
        this.updateVisibleOptions(this.value);
    }
    onValueChange() {
        if (this.hasFocus && !this.disableCloseOnSelect) {
            this.disableFiltering = false;
            this.updateVisibleOptions(this.value);
            this.updateVisibleCustomOptions(this.value);
        }
    }
    componentWillLoad() {
        this.convertOptions();
    }
    componentDidRender() {
        if (this.displayOptions()) {
            this.scrollToOptionSelected();
        }
    }
    onMouseDown(event) {
        if (!this.hasFocus) {
            return;
        }
        if (this.el !== event.target || !this.el.contains(event.target)) {
            this.hasFocus = false;
            this.ShowItemsOnKeyDown = false;
        }
    }
    convertOptions() {
        var _a;
        if (this.options && this.options.length > 0) {
            if (typeof this.options[0] === 'string') {
                this.options = (_a = this.options) === null || _a === void 0 ? void 0 : _a.map((option) => ({
                    id: option,
                    value: option,
                }));
            }
        }
    }
    addChipValue(value) {
        if (this.selectedChips.includes(value)) {
            return;
        }
        this.selectedChips = [...this.selectedChips, value];
        this.valueChange.emit(this.selectedChips.map((opt) => opt.value).join(','));
        this.selectionsChanged.emit(this.selectedChips.map((opt) => opt.id));
        this.value = '';
    }
    handleClear() {
        this.selectedChips = [];
        this.selectedOption = '';
    }
    handleCloseClick(chipValue) {
        if (this.selectedChips.length != 0) {
            this.selectedChips = this.selectedChips.filter((chip) => chip.id !== chipValue.id);
            this.valueChange.emit(this.selectedChips.join(','));
            this.selectionsChanged.emit(this.selectedChips.map((opt) => opt.id));
        }
    }
    valueChangedHandler(event) {
        if (event.detail == null) {
            this.handleClear();
        }
    }
    render() {
        var _a, _b;
        const classes = `autocomplete ${this.classBySize.get(this.size)}`;
        return (h("div", { key: '165a50a77a5ded35f0c8537c76100e4ee3e4554d', "aria-disabled": this.disabled ? 'true' : undefined, "aria-invalid": !!this.errorText, "aria-label": this.ariaLabel || undefined, "aria-readonly": this.readOnly, "aria-required": this.required, class: classes, onFocusin: () => {
                if (this.hasFocus) {
                    return;
                }
                this.hasFocus = true;
                this.updateVisibleOptions(this.value);
                this.updateVisibleCustomOptions(this.value);
            }, onFocusout: () => {
                if (this.hasFocus) {
                    this.hasFocus = this.disableCloseOnSelect;
                }
            }, onKeyDown: (e) => this.handleInputKeyDown(e) }, this.label || this.required ? (h("div", { class: 'label-container' }, this.label ? h("label", null, this.label) : null, this.required ? h("span", { class: "required" }, "*") : null)) : null, h("div", { key: 'c6c10f829e890b7cfbc69f3adb42ad3b564b025d', class: "chips-container" }, this.includeSearchIcon ? h(IconSearch, { size: "16" }) : null, this.selectedChips.map((chip) => (h("modus-chip", { value: chip.value, chipId: chip.id, size: this.size === 'large' ? 'medium' : 'small', "show-close": true, onCloseClick: () => this.handleCloseClick(chip) }))), this.TextInput()), h("div", { key: '8180012cd41df4c11c2d120a194e674abb69a1d0', class: 'error' }, this.errorText ? h("label", { class: "sub-text error" }, this.errorText) : null), h("div", { key: '5447a91e2fc49f013869f2a2102636fccced1534', class: "options-container", style: { maxHeight: this.dropdownMaxHeight, zIndex: this.dropdownZIndex, overflowY: 'auto' } }, h("ul", { key: '4bf60b01f2a76d18384a34f5c604c5da164e481f', id: this.listId, "aria-label": "options", role: "listbox" }, this.displayOptions() &&
            ((_a = this.visibleOptions) === null || _a === void 0 ? void 0 : _a.map((option) => {
                let className;
                let isSelected;
                if (this.multiple) {
                    isSelected = this.selectedChips.includes(option);
                    className = 'text-option' + (isSelected ? ' selected' : '');
                }
                else {
                    isSelected = this.selectedOption === option.value;
                    className = 'text-option' + (isSelected ? ' selected' : '');
                }
                return (h("li", { class: className, tabindex: "-1", role: "option", onClick: () => this.handleOptionClick(option), onKeyDown: (e) => this.handleOptionKeyDown(e, option) }, option.value, isSelected && h(IconCheck, { size: "16" })));
            })), this.displayOptions() &&
            ((_b = this.visibleCustomOptions) === null || _b === void 0 ? void 0 : _b.map((option) => {
                const optionValue = option.getAttribute(DATA_SEARCH_VALUE);
                let className;
                if (this.multiple) {
                    className = 'custom-option' + (this.selectedChips.includes(optionValue) ? ' selected' : '');
                }
                else {
                    className = 'custom-option' + (this.selectedOption === optionValue ? ' selected' : '');
                }
                return (h("li", { class: className, tabindex: "-1", role: "option", onClick: () => this.handleCustomOptionClick(option), onKeyDown: (e) => this.handleOptionKeyDown(e, option, true), innerHTML: option.outerHTML }));
            }))), this.displayNoResults() && h(NoResultsFound, { text: this.noResultsFoundText, subtext: this.noResultsFoundSubtext })), this.CustomOptionsSlot()));
    }
    get el() { return this; }
    static get watchers() { return {
        "options": ["watchOptions"],
        "value": ["onValueChange"]
    }; }
    static get style() { return ModusAutocompleteStyle0; }
}, [1, "modus-autocomplete", {
        "multiple": [4],
        "ariaLabel": [1, "aria-label"],
        "clearable": [4],
        "disabled": [4],
        "disableCloseOnSelect": [4, "disable-close-on-select"],
        "dropdownMaxHeight": [1, "dropdown-max-height"],
        "dropdownZIndex": [1, "dropdown-z-index"],
        "errorText": [1, "error-text"],
        "includeSearchIcon": [4, "include-search-icon"],
        "label": [1],
        "noResultsFoundText": [1, "no-results-found-text"],
        "noResultsFoundSubtext": [1, "no-results-found-subtext"],
        "options": [1040],
        "showOptionsOnFocus": [4, "show-options-on-focus"],
        "placeholder": [1],
        "readOnly": [4, "read-only"],
        "required": [4],
        "showNoResultsFoundMessage": [4, "show-no-results-found-message"],
        "size": [1],
        "value": [1025],
        "selectedChips": [32],
        "selectedOption": [32],
        "containsSlottedElements": [32],
        "hasFocus": [32],
        "visibleOptions": [32],
        "customOptions": [32],
        "visibleCustomOptions": [32],
        "disableFiltering": [32],
        "focusItemIndex": [32],
        "ShowItemsOnKeyDown": [32]
    }, [[5, "mousedown", "onMouseDown"], [0, "valueChange", "valueChangedHandler"]], {
        "options": ["watchOptions"],
        "value": ["onValueChange"]
    }]);
const NoResultsFound = (props) => (h("div", { class: "no-results" }, h("div", { style: { display: 'flex' } }, h(IconSearch, { size: "28px" }), h("div", { class: "message" }, props.text)), h("div", { class: "subtext" }, props.subtext)));
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["modus-autocomplete", "modus-chip", "modus-text-input"];
    components.forEach(tagName => { switch (tagName) {
        case "modus-autocomplete":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ModusAutocomplete);
            }
            break;
        case "modus-chip":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "modus-text-input":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}

export { ModusAutocomplete as M, defineCustomElement as d };
