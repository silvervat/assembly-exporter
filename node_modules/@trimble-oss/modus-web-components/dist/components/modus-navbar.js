import { h, proxyCustomElement, HTMLElement, createEvent, Host, Fragment } from '@stencil/core/internal/client';
import { I as IconSearch, d as defineCustomElement$3 } from './modus-text-input2.js';
import { I as IconHelp } from './icon-help.js';
import { c as createGuid } from './utils.js';
import { M as ModusIconMap } from './ModusIconMap.js';
import { d as defineCustomElement$e } from './modus-badge2.js';
import { d as defineCustomElement$d } from './modus-button2.js';
import { d as defineCustomElement$c } from './modus-dropdown2.js';
import { d as defineCustomElement$b } from './modus-list2.js';
import { d as defineCustomElement$a } from './modus-list-item2.js';
import { d as defineCustomElement$9 } from './modus-navbar-apps-menu2.js';
import { d as defineCustomElement$8 } from './modus-navbar-button-menu2.js';
import { d as defineCustomElement$7 } from './modus-navbar-main-menu2.js';
import { d as defineCustomElement$6 } from './modus-navbar-notifications-menu2.js';
import { d as defineCustomElement$5 } from './modus-navbar-profile-menu2.js';
import { d as defineCustomElement$4 } from './modus-navbar-search-overlay2.js';
import { d as defineCustomElement$2 } from './modus-tooltip2.js';

// eslint-disable-next-line
const IconMenu = (props) => {
    var _a, _b, _c;
    return (h("svg", { class: `icon-menu ${props.pressed ? 'pressed' : ''}`, height: (_a = props.size) !== null && _a !== void 0 ? _a : 16, width: (_b = props.size) !== null && _b !== void 0 ? _b : 16, onClick: props.onClick ? (event) => props.onClick(event) : null, viewBox: "0 0 24 24", fill: (_c = props.color) !== null && _c !== void 0 ? _c : 'currentColor', xmlns: "http://www.w3.org/2000/svg" },
        h("path", { d: "M3 18H21V16H3V18ZM3 13H21V11H3V13ZM3 6V8H21V6H3Z" })));
};

// eslint-disable-next-line
const IconNotifications = (props) => {
    var _a, _b, _c;
    return (h("svg", { class: `icon-notifications ${props.pressed ? 'pressed' : ''}`, height: (_a = props.size) !== null && _a !== void 0 ? _a : 16, width: (_b = props.size) !== null && _b !== void 0 ? _b : 16, onClick: props.onClick ? (event) => props.onClick(event) : null, viewBox: "0 0 24 24", fill: (_c = props.color) !== null && _c !== void 0 ? _c : 'currentColor', xmlns: "http://www.w3.org/2000/svg" },
        h("path", { d: "M10 20h4c0 1.1-.9 2-2 2s-2-.9-2-2Zm9.67-2.69C18.36 15.96 17 13.66 17 10a5 5 0 0 0-4-4.9V4c0-.55-.45-1-1-1s-1 .45-1 1v1.1A5 5 0 0 0 7 10c0 3.66-1.37 5.96-2.67 7.31-.61.64-.16 1.69.72 1.69h13.91c.88 0 1.33-1.05.72-1.69Z" })));
};

// eslint-disable-next-line
const IconApps = (props) => {
    var _a, _b, _c;
    return (h("svg", { class: `icon-apps ${props.pressed ? 'pressed' : ''}`, height: (_a = props.size) !== null && _a !== void 0 ? _a : 16, width: (_b = props.size) !== null && _b !== void 0 ? _b : 16, onClick: props.onClick ? (event) => props.onClick(event) : null, viewBox: "0 0 24 24", fill: (_c = props.color) !== null && _c !== void 0 ? _c : 'currentColor', xmlns: "http://www.w3.org/2000/svg" },
        h("path", { d: "M4 8H8V4H4V8ZM10 20H14V16H10V20ZM4 20H8V16H4V20ZM4 14H8V10H4V14ZM10 14H14V10H10V14ZM16 4V8H20V4H16ZM10 8H14V4H10V8ZM16 14H20V10H16V14ZM16 20H20V16H16V20Z" })));
};

// eslint-disable-next-line
const ModusNavbarProductLogo = ({ logos, onClick }) => {
    var _a, _b;
    const { primary, secondary } = logos || {};
    const handleKeyDown = (event) => {
        if (event.key !== 'Enter' && event.key !== ' ') {
            return;
        }
        if (onClick) {
            onClick(event);
        }
    };
    return (h("div", { "aria-label": "Logo", onClick: onClick, onKeyDown: handleKeyDown, tabindex: "0", role: "button", class: "product-logo" },
        primary && (h("img", { class: secondary && 'product-logo-primary', height: (_a = primary.height) !== null && _a !== void 0 ? _a : '24', src: primary.url, alt: "Modus Navbar primary product logo", "data-test-id": "primary-logo" })),
        secondary && (h("img", { class: primary && 'product-logo-secondary', height: (_b = secondary.height) !== null && _b !== void 0 ? _b : '24', src: secondary.url, alt: "Modus Navbar secondary product logo", "data-test-id": "secondary-logo" }))));
};

const ModusNavbarButtonList = ({ buttons, reverse, onClick, onKeyDown, openButtonMenuId }) => {
    const navbarButtons = buttons || [];
    return navbarButtons.map((button, index) => {
        var _a;
        return (h("div", { onClick: (event) => onClick(event, button), onKeyDown: (event) => onKeyDown(event, button) },
            h("modus-dropdown", { "toggle-element-id": 'navbar-button-' + index, showDropdownListBorder: false },
                h("div", { class: "navbar-button", id: 'navbar-button-' + index, slot: "dropdownToggle" },
                    h("span", { class: "navbar-button-icon", role: "button", tabIndex: 0 },
                        h("modus-tooltip", { text: (_a = button.tooltip) === null || _a === void 0 ? void 0 : _a.text, position: "bottom" },
                            h("div", { class: "icon-button" },
                                h(ModusIconMap, { icon: button.icon, size: "24", pressed: openButtonMenuId === button.id }))))),
                !button.hideMenu && (h("modus-navbar-button-menu", { slot: "dropdownList", reverse: reverse },
                    h("slot", { name: button.id }))))));
    });
};

const ModusNavbarDropdown = ({ itemSelect, options, reverse, selectedItem }) => {
    const direction = reverse ? 'rtl' : 'ltr';
    const toggleElementId = 'navbar-dropdown';
    const itemSelectHandler = (item) => {
        itemSelect(item);
    };
    return (h("modus-dropdown", { "toggle-element-id": toggleElementId },
        h("modus-button", { "aria-label": options.ariaLabel, "button-style": 'borderless', color: 'secondary', id: toggleElementId, slot: 'dropdownToggle', "show-caret": true }, selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.text),
        h("modus-list", { dir: direction, slot: 'dropdownList' }, options.items.map((item) => (h("modus-list-item", { key: item.value, onItemClick: () => itemSelectHandler(item), selected: item === selectedItem }, item.text))))));
};

const modusNavbarCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");nav{align-items:center;background-color:var(--modus-navbar-bg, #fff);display:flex;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";height:56px}nav.reverse{flex-direction:row-reverse}nav.shadow{box-shadow:0 0 4px rgba(36, 35, 45, 0.3)}nav .badge{border-radius:50%;color:white;height:22px;position:absolute;right:2px;top:2px;width:22px}nav .icon-search,nav .icon-notifications,nav .icon-help,nav .icon-apps,nav .icon-menu,nav .icon-close,nav .icon-button svg{border-radius:0.25rem;padding:0.75rem}nav .icon-search path,nav .icon-notifications path,nav .icon-help path,nav .icon-apps path,nav .icon-menu path,nav .icon-close path,nav .icon-button svg path{fill:var(--modus-navbar-icon-color, #252a2e)}nav .icon-search:hover:not(.pressed),nav .icon-notifications:hover:not(.pressed),nav .icon-help:hover:not(.pressed),nav .icon-apps:hover:not(.pressed),nav .icon-menu:hover:not(.pressed),nav .icon-close:hover:not(.pressed),nav .icon-button svg:hover:not(.pressed){background-color:var(--modus-navbar-icon-hover-bg, #e0e1e9)}nav .icon-search:hover:not(.pressed) path,nav .icon-notifications:hover:not(.pressed) path,nav .icon-help:hover:not(.pressed) path,nav .icon-apps:hover:not(.pressed) path,nav .icon-menu:hover:not(.pressed) path,nav .icon-close:hover:not(.pressed) path,nav .icon-button svg:hover:not(.pressed) path{fill:var(--modus-navbar-icon-hover-color, #3c444a)}nav .icon-search:active,nav .icon-search.pressed,nav .icon-notifications:active,nav .icon-notifications.pressed,nav .icon-help:active,nav .icon-help.pressed,nav .icon-apps:active,nav .icon-apps.pressed,nav .icon-menu:active,nav .icon-menu.pressed,nav .icon-close:active,nav .icon-close.pressed,nav .icon-button svg:active,nav .icon-button svg.pressed{background-color:var(--modus-navbar-icon-active-bg, #cbcdd6)}nav .icon-search:active path,nav .icon-search.pressed path,nav .icon-notifications:active path,nav .icon-notifications.pressed path,nav .icon-help:active path,nav .icon-help.pressed path,nav .icon-apps:active path,nav .icon-apps.pressed path,nav .icon-menu:active path,nav .icon-menu.pressed path,nav .icon-close:active path,nav .icon-close.pressed path,nav .icon-button svg:active path,nav .icon-button svg.pressed path{fill:var(--modus-navbar-icon-active-color, #0e1012)}nav .main-menu-button{padding:0 0.5rem}nav .navbar-button{position:relative}nav .navbar-button:hover{cursor:pointer}nav .navbar-button .navbar-button-icon,nav .navbar-button .icon-button,nav .navbar-button modus-tooltip{display:flex}nav .navbar-button-list{display:flex}nav .navbar-logo{padding-inline-end:0.5rem}nav .right,nav .left{align-items:center;display:inline-flex;height:100%}nav .right.expand,nav .left.expand{display:none}nav .right.collapse,nav .left.collapse{display:inline-flex}nav .right.reverse,nav .left.reverse{flex-direction:row-reverse}nav .left img.product-logo-primary{filter:var(--modus-navbar-brand-logo-filter);max-height:32px;padding:0 0.5rem;user-select:none}nav .left img.product-logo-secondary{filter:var(--modus-navbar-brand-logo-filter)}nav .right{margin-left:auto}nav .right.reverse{margin-left:0;margin-right:auto}nav .right .search{align-items:center;display:inline-flex}nav .right .pendo-placeholder{height:40px;width:40px}nav .right .profile-menu{align-items:center;cursor:default;display:inline-flex;height:40px;justify-content:center;margin:0 0.5rem;position:relative;width:40px}nav .right .profile-menu modus-tooltip img.avatar{background-color:var(--modus-navbar-icon-color, #252a2e);border-radius:50%;display:flex;height:32px;max-height:32px;max-width:32px;width:32px}nav .right .profile-menu modus-tooltip .initials{align-items:center;background-color:var(--modus-navbar-icon-color, #252a2e);border-radius:50%;color:var(--modus-navbar-profile-icon-initials-color, #fff);display:flex;font-size:0.875rem;font-weight:600;height:32px;justify-content:center;max-height:32px;max-width:32px;user-select:none;width:32px}nav .right .profile-menu modus-tooltip>:first-child:hover{border:0.25rem solid var(--modus-navbar-icon-hover-bg, #e0e1e9)}nav .right .profile-menu modus-tooltip>:first-child:active,nav .right .profile-menu modus-tooltip>:first-child:focus{border:0.25rem solid var(--modus-navbar-profile-icon-active-border-color, #d6d5db);outline:none}nav .right .profile-menu modus-tooltip:hover{cursor:pointer}nav .overlay{width:100%}nav.nav-blue{background-color:var(--modus-navbar-blue-bg, #0e416c)}nav.nav-blue .icon-search path,nav.nav-blue .icon-notifications path,nav.nav-blue .icon-help path,nav.nav-blue .icon-apps path,nav.nav-blue .icon-menu path,nav.nav-blue .icon-close path,nav.nav-blue .icon-button svg path{fill:var(--modus-navbar-blue-icon-color, #fff)}nav.nav-blue .icon-search:hover:not(.pressed),nav.nav-blue .icon-notifications:hover:not(.pressed),nav.nav-blue .icon-help:hover:not(.pressed),nav.nav-blue .icon-apps:hover:not(.pressed),nav.nav-blue .icon-menu:hover:not(.pressed),nav.nav-blue .icon-close:hover:not(.pressed),nav.nav-blue .icon-button svg:hover:not(.pressed){background-color:var(--modus-navbar-blue-icon-hover-bg, #217cbb);outline:0.0625rem solid var(--modus-navbar-blue-icon-hover-border-color, #019aeb)}nav.nav-blue .icon-search:hover:not(.pressed) path,nav.nav-blue .icon-notifications:hover:not(.pressed) path,nav.nav-blue .icon-help:hover:not(.pressed) path,nav.nav-blue .icon-apps:hover:not(.pressed) path,nav.nav-blue .icon-menu:hover:not(.pressed) path,nav.nav-blue .icon-close:hover:not(.pressed) path,nav.nav-blue .icon-button svg:hover:not(.pressed) path{fill:var(--modus-navbar-blue-icon-hover-color, #fff)}nav.nav-blue .icon-search:active,nav.nav-blue .icon-search.pressed,nav.nav-blue .icon-notifications:active,nav.nav-blue .icon-notifications.pressed,nav.nav-blue .icon-help:active,nav.nav-blue .icon-help.pressed,nav.nav-blue .icon-apps:active,nav.nav-blue .icon-apps.pressed,nav.nav-blue .icon-menu:active,nav.nav-blue .icon-menu.pressed,nav.nav-blue .icon-close:active,nav.nav-blue .icon-close.pressed,nav.nav-blue .icon-button svg:active,nav.nav-blue .icon-button svg.pressed{background-color:var(--modus-navbar-blue-icon-active-bg, #019aeb)}nav.nav-blue .icon-search:active path,nav.nav-blue .icon-search.pressed path,nav.nav-blue .icon-notifications:active path,nav.nav-blue .icon-notifications.pressed path,nav.nav-blue .icon-help:active path,nav.nav-blue .icon-help.pressed path,nav.nav-blue .icon-apps:active path,nav.nav-blue .icon-apps.pressed path,nav.nav-blue .icon-menu:active path,nav.nav-blue .icon-menu.pressed path,nav.nav-blue .icon-close:active path,nav.nav-blue .icon-close.pressed path,nav.nav-blue .icon-button svg:active path,nav.nav-blue .icon-button svg.pressed path{fill:var(--modus-navbar-blue-icon-active-color, #fff)}nav.nav-blue .profile-menu modus-tooltip img.avatar,nav.nav-blue .profile-menu modus-tooltip .initials{background-color:var(--modus-navbar-blue-icon-color, #fff)}nav.nav-blue .profile-menu modus-tooltip .initials{color:var(--modus-navbar-blue-profile-icon-initials-color, #0e416c)}nav.nav-blue .profile-menu modus-tooltip>:first-child:hover{border-color:var(--modus-navbar-blue-icon-hover-bg, #217cbb);border-radius:50%;outline:0.125rem solid var(--modus-navbar-blue-profile-icon-active-border-color, #019aeb)}nav.nav-blue .profile-menu modus-tooltip>:first-child:active,nav.nav-blue .profile-menu modus-tooltip>:first-child:focus{border-color:var(--modus-navbar-blue-profile-icon-active-border-color, #019aeb);border-radius:50%;outline:none}nav.nav-blue .profile-menu modus-tooltip:hover{cursor:pointer}nav .product-logo{display:flex;justify-content:center;user-select:none}@media screen and (width > 576px){nav .product-logo .product-logo-secondary{display:none}}@media screen and (width <= 576px){nav .product-logo .product-logo-primary{display:none}}";
const ModusNavbarStyle0 = modusNavbarCss;

const ModusNavbar$1 = /*@__PURE__*/ proxyCustomElement(class ModusNavbar extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.appsMenuOpen = createEvent(this, "appsMenuOpen", 7);
        this.appsMenuAppOpen = createEvent(this, "appsMenuAppOpen", 7);
        this.buttonClick = createEvent(this, "buttonClick", 7);
        this.helpOpen = createEvent(this, "helpOpen", 7);
        this.dropdownItemSelect = createEvent(this, "dropdownItemSelect", 7);
        this.mainMenuClick = createEvent(this, "mainMenuClick", 7);
        this.notificationsMenuOpen = createEvent(this, "notificationsMenuOpen", 7);
        this.productLogoClick = createEvent(this, "productLogoClick", 7);
        this.profileMenuLinkClick = createEvent(this, "profileMenuLinkClick", 7);
        this.profileMenuOpen = createEvent(this, "profileMenuOpen", 7);
        this.profileMenuSignOutClick = createEvent(this, "profileMenuSignOutClick", 7);
        this.searchChange = createEvent(this, "searchChange", 7);
        this.searchMenuClick = createEvent(this, "searchMenuClick", 7);
        this.SLOT_MAIN = 'main';
        this.SLOT_NOTIFICATIONS = 'notifications';
        this.SLOT_PROFILE_MENU = 'profileMenu';
        this.navAriaLabel = undefined;
        this.apps = undefined;
        this.buttons = undefined;
        this.enableSearchOverlay = undefined;
        this.logoOptions = undefined;
        this.dropdownOptions = undefined;
        this.selectedDropdownItem = undefined;
        this.profileMenuOptions = undefined;
        this.reverse = undefined;
        this.searchTooltip = undefined;
        this.showAppsMenu = undefined;
        this.showMainMenu = undefined;
        this.showNotifications = undefined;
        this.notificationCount = undefined;
        this.showPendoPlaceholder = undefined;
        this.showProfile = true;
        this.showSearch = undefined;
        this.showShadow = undefined;
        this.showHelp = undefined;
        this.helpTooltip = undefined;
        this.helpUrl = undefined;
        this.variant = 'default';
        this.appsMenuVisible = undefined;
        this.mainMenuVisible = undefined;
        this.notificationsMenuVisible = undefined;
        this.profileMenuVisible = undefined;
        this.slots = [];
        this.componentId = createGuid();
        this.searchOverlayVisible = undefined;
        this.openButtonMenuId = undefined;
    }
    async hideMainMenu() {
        this.mainMenuVisible = false;
    }
    documentClickHandler(event) {
        // Individual menus can prevent this listener from closing them.
        if (event.defaultPrevented) {
            return;
        }
        this.hideMenus();
    }
    linkClickHandler(linkClickEvent) {
        linkClickEvent.stopPropagation();
        this.profileMenuLinkClick.emit(linkClickEvent.detail);
    }
    signOutClickHandler(event) {
        this.profileMenuSignOutClick.emit(event);
    }
    componentDidRender() {
        var _a, _b, _c;
        // If there is an error loading the avatar image, remove it so that the initials show.
        (_a = this.profileAvatarElement) === null || _a === void 0 ? void 0 : _a.addEventListener('error', () => {
            this.profileMenuOptions = Object.assign(Object.assign({}, this.profileMenuOptions), { avatarUrl: null });
        });
        const slotElements = this.element.querySelectorAll('[slot]');
        const slotNames = Array.from(slotElements).map((s) => s.slot) || [];
        const isUpdated = ((_b = this.slots) === null || _b === void 0 ? void 0 : _b.length) !== slotNames.length || ((_c = this.slots) === null || _c === void 0 ? void 0 : _c.filter((s) => !slotNames.includes(s)).length);
        if (isUpdated)
            this.slots = [...slotNames];
    }
    appsMenuClickHandler(event) {
        event.preventDefault();
        this.appsMenuToggle();
    }
    appsMenuKeydownHandler(event) {
        if (event.code !== 'Enter') {
            return;
        }
        this.appsMenuToggle();
    }
    appsMenuToggle() {
        if (this.appsMenuVisible) {
            this.appsMenuVisible = false;
        }
        else {
            this.hideMenus();
            this.appsMenuVisible = true;
            this.appsMenuOpen.emit();
        }
    }
    handleAppsMenuAppOpen(event) {
        event.stopPropagation();
        this.appsMenuAppOpen.emit(event.detail);
    }
    mainMenuClickHandler(event) {
        event.preventDefault();
        this.mainMenuToggle(event);
    }
    mainMenuKeydownHandler(event) {
        if (event.code !== 'Enter') {
            return;
        }
        this.mainMenuToggle(event);
    }
    mainMenuToggle(event) {
        var _a;
        if ((_a = this.slots) === null || _a === void 0 ? void 0 : _a.includes(this.SLOT_MAIN)) {
            if (this.mainMenuVisible) {
                this.mainMenuVisible = false;
            }
            else {
                this.hideMenus();
                this.mainMenuVisible = true;
            }
        }
        this.mainMenuClick.emit(event);
    }
    notificationsMenuClickHandler(event) {
        event.preventDefault();
        this.notificationsMenuToggle();
    }
    notificationsMenuKeydownHandler(event) {
        if (event.code !== 'Enter') {
            return;
        }
        this.notificationsMenuToggle();
    }
    notificationsMenuToggle() {
        if (this.notificationsMenuVisible) {
            this.notificationsMenuVisible = false;
        }
        else {
            this.hideMenus();
            this.notificationsMenuVisible = true;
            this.notificationsMenuOpen.emit();
        }
    }
    profileMenuClickHandler(event) {
        event.preventDefault();
        this.profileMenuToggle();
    }
    profileMenuKeydownHandler(event) {
        if (event.code !== 'Enter') {
            return;
        }
        this.profileMenuToggle();
    }
    profileMenuToggle() {
        if (this.profileMenuVisible) {
            this.profileMenuVisible = false;
        }
        else {
            this.hideMenus();
            this.profileMenuVisible = true;
            this.profileMenuOpen.emit();
        }
    }
    hideMenus() {
        this.appsMenuVisible = false;
        this.mainMenuVisible = false;
        this.notificationsMenuVisible = false;
        this.profileMenuVisible = false;
        this.openButtonMenuId = undefined;
    }
    helpMenuClickHandler(event) {
        event.preventDefault();
        this.openHelpMenu();
    }
    helpMenuKeyHandler(event) {
        if (event.code !== 'Enter' && event.code !== 'Space') {
            return;
        }
        this.openHelpMenu();
    }
    openHelpMenu() {
        if (this.helpUrl)
            window.open(this.helpUrl, '_blank');
        this.helpOpen.emit();
    }
    searchMenuClickHandler(event) {
        event.preventDefault();
        if (this.enableSearchOverlay) {
            this.searchOverlayVisible = true;
        }
        else {
            this.searchMenuClick.emit();
        }
    }
    searchMenuKeydownHandler(event) {
        if (event.code !== 'Enter') {
            return;
        }
        if (this.enableSearchOverlay) {
            this.searchOverlayVisible = true;
        }
        else {
            this.searchMenuClick.emit();
        }
    }
    searchOverlayCloseEventHandler() {
        this.searchOverlayVisible = false;
        setTimeout(() => {
            var _a;
            (_a = this.searchButton) === null || _a === void 0 ? void 0 : _a.focus();
        }, 100);
    }
    showButtonMenuById(id) {
        this.buttonClick.emit(id);
        const isDynamicButtonSlotOpen = this.openButtonMenuId === id;
        this.hideMenus();
        if (this.openButtonMenuId !== id && !isDynamicButtonSlotOpen) {
            this.openButtonMenuId = id;
        }
    }
    buttonMenuClickHandler(event, button) {
        event.preventDefault();
        this.showButtonMenuById(button.id);
    }
    buttonMenuKeyDownHandler(event, button) {
        if (event.code == 'Enter' || event.code == 'Space') {
            event.preventDefault();
            this.showButtonMenuById(button.id);
        }
        if (event.code == 'Escape') {
            this.hideMenus();
        }
    }
    dropdownItemSelectHandler(item) {
        this.selectedDropdownItem = item;
        this.dropdownItemSelect.emit(item);
    }
    getNotificationCount() {
        if (!this.notificationCount) {
            return;
        }
        const counter = this.notificationCount;
        if (counter < 1) {
            return '1';
        }
        if (counter > 99) {
            return '99+';
        }
        return this.notificationCount.toString();
    }
    render() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
        const direction = this.reverse ? 'reverse' : '';
        const shadow = this.showShadow ? 'shadow' : '';
        const variant = `${this.variant === 'default' ? '' : 'nav-' + this.variant}`;
        const sortedButtonList = (_a = this.buttons) === null || _a === void 0 ? void 0 : _a.sort((a, b) => a.orderIndex - b.orderIndex);
        const overlay = this.searchOverlayVisible && (h("modus-navbar-search-overlay", { key: 'bd969fe20f191284b53935b949aedcfa3ebb7156', class: "overlay", onClose: () => this.searchOverlayCloseEventHandler(), onSearch: (event) => this.searchChange.emit(event.detail) }));
        const counterValue = this.getNotificationCount();
        return (h(Host, { key: '16b7886f051007cf6fa7aa4ee766e76c948b9120', id: this.componentId }, h("nav", { key: '2ebb2d566111762b18b60696719a6c41459cfb13', class: `${direction} ${shadow} ${variant}`, "aria-label": this.navAriaLabel }, !this.searchOverlayVisible && (h(Fragment, null, h("div", { class: `left ${direction}` }, this.showMainMenu && (h("div", { class: "navbar-button main-menu-button" }, h("span", { class: "navbar-button-icon", role: "button", "aria-label": "Toggle navigation", onKeyDown: (event) => this.mainMenuKeydownHandler(event), tabIndex: 0 }, h(IconMenu, { size: "24", pressed: this.mainMenuVisible, onClick: (event) => this.mainMenuClickHandler(event) })))), this.mainMenuVisible && (h("modus-navbar-main-menu", { navbarId: this.componentId }, h("slot", { name: this.SLOT_MAIN }))), this.logoOptions && (h("div", { class: "navbar-logo" }, h(ModusNavbarProductLogo, { logos: this.logoOptions, onClick: (event) => this.productLogoClick.emit(event) }))), this.dropdownOptions && (h(ModusNavbarDropdown, { itemSelect: (item) => this.dropdownItemSelectHandler(item), options: this.dropdownOptions, reverse: this.reverse, selectedItem: this.selectedDropdownItem }))), h("div", { class: `right ${direction}` }, this.showSearch && (h("div", { class: "navbar-button search", "data-test-id": "search-menu" }, h("modus-tooltip", { text: (_b = this.searchTooltip) === null || _b === void 0 ? void 0 : _b.text, "aria-label": ((_c = this.searchTooltip) === null || _c === void 0 ? void 0 : _c.ariaLabel) || undefined, position: "bottom" }, h("span", { class: "navbar-button-icon", "aria-label": "Search", role: "button", onKeyDown: (event) => this.searchMenuKeydownHandler(event), tabIndex: 0, id: "search-button", ref: (el) => (this.searchButton = el) }, h(IconSearch, { size: "24", onClick: (event) => this.searchMenuClickHandler(event), pressed: this.searchOverlayVisible }))))), h(ModusNavbarButtonList, { buttons: sortedButtonList, reverse: this.reverse, openButtonMenuId: this.openButtonMenuId, onKeyDown: (event, button) => this.buttonMenuKeyDownHandler(event, button), onClick: (event, button) => this.buttonMenuClickHandler(event, button) }), this.showNotifications && (h("div", { class: "navbar-button", "data-test-id": "notifications-menu" }, h("span", { class: "navbar-button-icon", role: "button", "aria-label": "Notifications", onKeyDown: (event) => this.notificationsMenuKeydownHandler(event), tabIndex: 0 }, h(IconNotifications, { size: "24", onClick: (event) => this.notificationsMenuClickHandler(event), pressed: this.notificationsMenuVisible }), counterValue && (h("modus-badge", { class: "badge", color: "danger", size: "medium", type: "counter", "aria-label": "Notification badge" }, counterValue))), this.notificationsMenuVisible && (h("modus-navbar-notifications-menu", { reverse: this.reverse }, h("slot", { name: this.SLOT_NOTIFICATIONS }))))), this.showPendoPlaceholder && h("div", { class: 'pendo-placeholder' }), this.showHelp && (h("div", { class: "navbar-button", "data-test-id": "help-menu" }, h("modus-tooltip", { text: (_d = this.helpTooltip) === null || _d === void 0 ? void 0 : _d.text, "aria-label": ((_e = this.helpTooltip) === null || _e === void 0 ? void 0 : _e.ariaLabel) || undefined, position: "bottom" }, h("span", { class: "navbar-button-icon", role: "button", onKeyDown: (event) => this.helpMenuKeyHandler(event), "aria-label": "Help", onClick: (event) => this.helpMenuClickHandler(event), tabIndex: 0 }, h(IconHelp, { size: "24" }))))), this.showAppsMenu && (h("div", { class: "navbar-button", "data-test-id": "apps-menu" }, h("span", { class: "navbar-button-icon", role: "button", "aria-label": "Apps", onKeyDown: (event) => this.appsMenuKeydownHandler(event), tabIndex: 0 }, h(IconApps, { size: "24", pressed: this.appsMenuVisible, onClick: (event) => this.appsMenuClickHandler(event) })), this.appsMenuVisible && (h("modus-navbar-apps-menu", { apps: this.apps, reverse: this.reverse, onAppOpen: (event) => this.handleAppsMenuAppOpen(event) })))), this.showProfile && (h("div", { class: "profile-menu" }, h("modus-tooltip", { text: (_g = (_f = this.profileMenuOptions) === null || _f === void 0 ? void 0 : _f.tooltip) === null || _g === void 0 ? void 0 : _g.text, "aria-label": ((_j = (_h = this.profileMenuOptions) === null || _h === void 0 ? void 0 : _h.tooltip) === null || _j === void 0 ? void 0 : _j.ariaLabel) || undefined, disabled: this.profileMenuVisible, position: "bottom" }, ((_k = this.profileMenuOptions) === null || _k === void 0 ? void 0 : _k.avatarUrl) ? (h("img", { class: "avatar", height: "32", src: (_l = this.profileMenuOptions) === null || _l === void 0 ? void 0 : _l.avatarUrl, alt: "Modus navbar profile menu avatar", onClick: (event) => this.profileMenuClickHandler(event), onKeyDown: (event) => this.profileMenuKeydownHandler(event), tabIndex: 0, ref: (el) => (this.profileAvatarElement = el) })) : (h("span", { class: "initials", onClick: (event) => this.profileMenuClickHandler(event), onKeyDown: (event) => this.profileMenuKeydownHandler(event), tabIndex: 0 }, (_m = this.profileMenuOptions) === null || _m === void 0 ? void 0 : _m.initials))), this.profileMenuVisible && (h("modus-navbar-profile-menu", { "avatar-url": (_o = this.profileMenuOptions) === null || _o === void 0 ? void 0 : _o.avatarUrl, email: (_p = this.profileMenuOptions) === null || _p === void 0 ? void 0 : _p.email, initials: (_q = this.profileMenuOptions) === null || _q === void 0 ? void 0 : _q.initials, links: (_r = this.profileMenuOptions) === null || _r === void 0 ? void 0 : _r.links, reverse: this.reverse, username: (_s = this.profileMenuOptions) === null || _s === void 0 ? void 0 : _s.username, variant: this.variant, "sign-out-text": (_t = this.profileMenuOptions) === null || _t === void 0 ? void 0 : _t.signOutText }, h("slot", { name: this.SLOT_PROFILE_MENU })))))))), overlay)));
    }
    get element() { return this; }
    static get style() { return ModusNavbarStyle0; }
}, [1, "modus-navbar", {
        "navAriaLabel": [1, "nav-aria-label"],
        "apps": [16],
        "buttons": [1040],
        "enableSearchOverlay": [4, "enable-search-overlay"],
        "logoOptions": [16],
        "dropdownOptions": [16],
        "selectedDropdownItem": [16],
        "profileMenuOptions": [1040],
        "reverse": [4],
        "searchTooltip": [16],
        "showAppsMenu": [4, "show-apps-menu"],
        "showMainMenu": [4, "show-main-menu"],
        "showNotifications": [4, "show-notifications"],
        "notificationCount": [2, "notification-count"],
        "showPendoPlaceholder": [4, "show-pendo-placeholder"],
        "showProfile": [4, "show-profile"],
        "showSearch": [4, "show-search"],
        "showShadow": [4, "show-shadow"],
        "showHelp": [4, "show-help"],
        "helpTooltip": [16],
        "helpUrl": [1, "help-url"],
        "variant": [1],
        "appsMenuVisible": [32],
        "mainMenuVisible": [32],
        "notificationsMenuVisible": [32],
        "profileMenuVisible": [32],
        "slots": [32],
        "componentId": [32],
        "searchOverlayVisible": [32],
        "openButtonMenuId": [32],
        "hideMainMenu": [64]
    }, [[4, "click", "documentClickHandler"], [0, "linkClick", "linkClickHandler"], [0, "signOutClick", "signOutClickHandler"]]]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["modus-navbar", "modus-badge", "modus-button", "modus-dropdown", "modus-list", "modus-list-item", "modus-navbar-apps-menu", "modus-navbar-button-menu", "modus-navbar-main-menu", "modus-navbar-notifications-menu", "modus-navbar-profile-menu", "modus-navbar-search-overlay", "modus-text-input", "modus-tooltip"];
    components.forEach(tagName => { switch (tagName) {
        case "modus-navbar":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ModusNavbar$1);
            }
            break;
        case "modus-badge":
            if (!customElements.get(tagName)) {
                defineCustomElement$e();
            }
            break;
        case "modus-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$d();
            }
            break;
        case "modus-dropdown":
            if (!customElements.get(tagName)) {
                defineCustomElement$c();
            }
            break;
        case "modus-list":
            if (!customElements.get(tagName)) {
                defineCustomElement$b();
            }
            break;
        case "modus-list-item":
            if (!customElements.get(tagName)) {
                defineCustomElement$a();
            }
            break;
        case "modus-navbar-apps-menu":
            if (!customElements.get(tagName)) {
                defineCustomElement$9();
            }
            break;
        case "modus-navbar-button-menu":
            if (!customElements.get(tagName)) {
                defineCustomElement$8();
            }
            break;
        case "modus-navbar-main-menu":
            if (!customElements.get(tagName)) {
                defineCustomElement$7();
            }
            break;
        case "modus-navbar-notifications-menu":
            if (!customElements.get(tagName)) {
                defineCustomElement$6();
            }
            break;
        case "modus-navbar-profile-menu":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "modus-navbar-search-overlay":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "modus-text-input":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "modus-tooltip":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}

const ModusNavbar = ModusNavbar$1;
const defineCustomElement = defineCustomElement$1;

export { ModusNavbar, defineCustomElement };
