import { h, proxyCustomElement, HTMLElement, createEvent } from '@stencil/core/internal/client';

const SMILEY_SENTIMENT_TYPE = 'smileys';
const THUMB_SENTIMENT_TYPE = 'thumbs';
const THUMBS_TYPE_MAP = new Map([
    ['thumbs-up', 'Helpful'],
    ['thumbs-down', 'Not helpful'],
]);
const SMILEYS_TYPE_MAP = new Map([
    ['smiley-dissatisfied', 'Dissatisfied'],
    ['smiley-somewhat-dissatisfied', 'Somewhat Dissatisfied'],
    ['smiley-neutral', 'Neutral'],
    ['smiley-somewhat-satisfied', 'Somewhat Satisfied'],
    ['smiley-satisfied', 'Satisfied'],
]);

// eslint-disable-next-line
const IconSmileySatisfiedOutline = (props) => {
    var _a, _b, _c;
    return (h("svg", { class: `icon-smiley-satistied-outline ${props.pressed ? 'pressed' : ''}`, width: (_a = props.size) !== null && _a !== void 0 ? _a : '16', height: (_b = props.size) !== null && _b !== void 0 ? _b : 16, onClick: props.onClick ? (event) => props.onClick(event) : null, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
        h("path", { d: "M12 22C6.49 22 2 17.51 2 12S6.49 2 12 2s10 4.49 10 10-4.49 10-10 10Zm0-18c-4.41 0-8 3.59-8 8s3.59 8 8 8 8-3.59 8-8-3.59-8-8-8ZM8.5 8C7.67 8 7 8.67 7 9.5S7.67 11 8.5 11s1.5-.67 1.5-1.5S9.33 8 8.5 8Zm7 0c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5S16.33 8 15.5 8Zm1.38 6.11a.503.503 0 0 0-.98-.22C15.48 15.72 13.88 17 12 17s-3.49-1.28-3.9-3.11a.503.503 0 0 0-.98.22C7.64 16.4 9.65 18 12 18s4.36-1.6 4.88-3.89Z", fill: (_c = props.color) !== null && _c !== void 0 ? _c : 'currentColor' })));
};

// eslint-disable-next-line
const IconSmileySatisfied = (props) => {
    var _a, _b, _c;
    return (h("svg", { class: `icon-smiley-satistied ${props.pressed ? 'pressed' : ''}`, width: (_a = props.size) !== null && _a !== void 0 ? _a : '16', height: (_b = props.size) !== null && _b !== void 0 ? _b : 16, onClick: props.onClick ? (event) => props.onClick(event) : null, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
        h("path", { d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2ZM8.5 8c.83 0 1.5.67 1.5 1.5S9.33 11 8.5 11 7 10.33 7 9.5 7.67 8 8.5 8Zm8.38 6.11C16.36 16.4 14.35 18 12 18s-4.36-1.6-4.88-3.89a.503.503 0 0 1 .98-.22C8.52 15.72 10.12 17 12 17s3.49-1.28 3.9-3.11a.503.503 0 0 1 .98.22ZM15.5 11c-.83 0-1.5-.67-1.5-1.5S14.67 8 15.5 8s1.5.67 1.5 1.5-.67 1.5-1.5 1.5Z", fill: (_c = props.color) !== null && _c !== void 0 ? _c : 'currentColor' })));
};

// eslint-disable-next-line
const IconSmileySomewhatSatisfiedOutline = (props) => {
    var _a, _b, _c;
    return (h("svg", { class: `icon-smiley-somewhat-satistied-outline ${props.pressed ? 'pressed' : ''}`, width: (_a = props.size) !== null && _a !== void 0 ? _a : '16', height: (_b = props.size) !== null && _b !== void 0 ? _b : 16, onClick: props.onClick ? (event) => props.onClick(event) : null, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
        h("path", { d: "M12 22C6.49 22 2 17.51 2 12S6.49 2 12 2s10 4.49 10 10-4.49 10-10 10Zm0-18c-4.41 0-8 3.59-8 8s3.59 8 8 8 8-3.59 8-8-3.59-8-8-8ZM8.5 8C7.67 8 7 8.67 7 9.5S7.67 11 8.5 11s1.5-.67 1.5-1.5S9.33 8 8.5 8Zm7 0c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5S16.33 8 15.5 8Zm.26 8.29c.18-.21.16-.52-.05-.71a.506.506 0 0 0-.71.05c-.76.87-1.86 1.36-3.01 1.36s-2.25-.5-3.01-1.36a.505.505 0 0 0-.71-.05c-.21.18-.23.5-.05.71.95 1.08 2.32 1.71 3.76 1.71s2.81-.62 3.76-1.71Z", fill: (_c = props.color) !== null && _c !== void 0 ? _c : 'currentColor' })));
};

// eslint-disable-next-line
const IconSmileySomewhatSatisfied = (props) => {
    var _a, _b, _c;
    return (h("svg", { class: `icon-smiley-somewhat-satistied ${props.pressed ? 'pressed' : ''}`, width: (_a = props.size) !== null && _a !== void 0 ? _a : '16', height: (_b = props.size) !== null && _b !== void 0 ? _b : 16, onClick: props.onClick ? (event) => props.onClick(event) : null, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
        h("path", { d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2ZM7 9.5C7 8.67 7.67 8 8.5 8s1.5.67 1.5 1.5S9.33 11 8.5 11 7 10.33 7 9.5Zm8.76 6.79C14.81 17.37 13.44 18 12 18s-2.81-.62-3.76-1.71a.506.506 0 0 1 .05-.71c.21-.18.52-.16.71.05.76.87 1.86 1.36 3.01 1.36s2.25-.5 3.01-1.36c.18-.21.5-.23.71-.05.21.18.23.5.05.71ZM15.5 11c-.83 0-1.5-.67-1.5-1.5S14.67 8 15.5 8s1.5.67 1.5 1.5-.67 1.5-1.5 1.5Z", fill: (_c = props.color) !== null && _c !== void 0 ? _c : 'currentColor' })));
};

// eslint-disable-next-line
const IconSmileyNeutralOutline = (props) => {
    var _a, _b, _c;
    return (h("svg", { class: `icon-smiley-neutral-outline ${props.pressed ? 'pressed' : ''}`, width: (_a = props.size) !== null && _a !== void 0 ? _a : '16', height: (_b = props.size) !== null && _b !== void 0 ? _b : 16, onClick: props.onClick ? (event) => props.onClick(event) : null, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
        h("path", { d: "M12 22C6.49 22 2 17.51 2 12S6.49 2 12 2s10 4.49 10 10-4.49 10-10 10Zm0-18c-4.41 0-8 3.59-8 8s3.59 8 8 8 8-3.59 8-8-3.59-8-8-8ZM8.5 8C7.67 8 7 8.67 7 9.5S7.67 11 8.5 11s1.5-.67 1.5-1.5S9.33 8 8.5 8Zm7 0c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5S16.33 8 15.5 8Zm.5 7.5c0-.28-.22-.5-.5-.5h-7c-.28 0-.5.22-.5.5s.22.5.5.5h7c.28 0 .5-.22.5-.5Z", fill: (_c = props.color) !== null && _c !== void 0 ? _c : 'currentColor' })));
};

// eslint-disable-next-line
const IconSmileyNeutral = (props) => {
    var _a, _b, _c;
    return (h("svg", { class: `icon-smiley-neutral ${props.pressed ? 'pressed' : ''}`, width: (_a = props.size) !== null && _a !== void 0 ? _a : '16', height: (_b = props.size) !== null && _b !== void 0 ? _b : 16, onClick: props.onClick ? (event) => props.onClick(event) : null, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
        h("path", { d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2ZM7 9.5C7 8.67 7.67 8 8.5 8s1.5.67 1.5 1.5S9.33 11 8.5 11 7 10.33 7 9.5Zm8.5 6.5h-7c-.28 0-.5-.22-.5-.5s.22-.5.5-.5h7c.28 0 .5.22.5.5s-.22.5-.5.5Zm0-5c-.83 0-1.5-.67-1.5-1.5S14.67 8 15.5 8s1.5.67 1.5 1.5-.67 1.5-1.5 1.5Z", fill: (_c = props.color) !== null && _c !== void 0 ? _c : 'currentColor' })));
};

// eslint-disable-next-line
const IconSmileySomewhatDissatisfiedOutline = (props) => {
    var _a, _b, _c;
    return (h("svg", { class: `icon-smiley-somewhat-dissatistied-outline ${props.pressed ? 'pressed' : ''}`, width: (_a = props.size) !== null && _a !== void 0 ? _a : '16', height: (_b = props.size) !== null && _b !== void 0 ? _b : 16, onClick: props.onClick ? (event) => props.onClick(event) : null, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
        h("path", { d: "M12 22C6.49 22 2 17.51 2 12S6.49 2 12 2s10 4.49 10 10-4.49 10-10 10Zm0-18c-4.41 0-8 3.59-8 8s3.59 8 8 8 8-3.59 8-8-3.59-8-8-8ZM8.5 8C7.67 8 7 8.67 7 9.5S7.67 11 8.5 11s1.5-.67 1.5-1.5S9.33 8 8.5 8Zm7 0c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5S16.33 8 15.5 8Zm.21 8.88c.21-.18.23-.5.05-.71-.95-1.08-2.32-1.71-3.76-1.71s-2.81.62-3.76 1.71c-.18.21-.16.52.05.71.21.18.52.16.71-.05.76-.87 1.86-1.36 3.01-1.36s2.25.5 3.01 1.36c.1.11.24.17.38.17.12 0 .23-.04.33-.12Z", fill: (_c = props.color) !== null && _c !== void 0 ? _c : 'currentColor' })));
};

// eslint-disable-next-line
const IconSmileySomewhatDissatisfied = (props) => {
    var _a, _b, _c;
    return (h("svg", { class: `icon-smiley-somewhat-dissatistied ${props.pressed ? 'pressed' : ''}`, width: (_a = props.size) !== null && _a !== void 0 ? _a : '16', height: (_b = props.size) !== null && _b !== void 0 ? _b : 16, onClick: props.onClick ? (event) => props.onClick(event) : null, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
        h("path", { d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2ZM7 9.5C7 8.67 7.67 8 8.5 8s1.5.67 1.5 1.5S9.33 11 8.5 11 7 10.33 7 9.5Zm8.71 7.38c-.09.08-.21.12-.33.12-.14 0-.28-.06-.38-.17-.76-.87-1.86-1.36-3.01-1.36s-2.25.5-3.01 1.36c-.18.21-.5.23-.71.05a.505.505 0 0 1-.05-.71c.95-1.08 2.32-1.71 3.76-1.71s2.81.62 3.76 1.71c.18.21.16.52-.05.71ZM15.5 11c-.83 0-1.5-.67-1.5-1.5S14.67 8 15.5 8s1.5.67 1.5 1.5-.67 1.5-1.5 1.5Z", fill: (_c = props.color) !== null && _c !== void 0 ? _c : 'currentColor' })));
};

// eslint-disable-next-line
const IconSmileyDissatisfiedOutline = (props) => {
    var _a, _b, _c;
    return (h("svg", { class: `icon-smiley-dissatistied-outline ${props.pressed ? 'pressed' : ''}`, width: (_a = props.size) !== null && _a !== void 0 ? _a : '16', height: (_b = props.size) !== null && _b !== void 0 ? _b : 16, onClick: props.onClick ? (event) => props.onClick(event) : null, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
        h("path", { d: "M12 22C6.49 22 2 17.51 2 12S6.49 2 12 2s10 4.49 10 10-4.49 10-10 10Zm0-18c-4.41 0-8 3.59-8 8s3.59 8 8 8 8-3.59 8-8-3.59-8-8-8ZM8.5 8C7.67 8 7 8.67 7 9.5S7.67 11 8.5 11s1.5-.67 1.5-1.5S9.33 8 8.5 8Zm7 0c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5S16.33 8 15.5 8Zm1 8.99c.27-.06.44-.33.38-.6-.52-2.29-2.53-3.89-4.88-3.89s-4.36 1.6-4.88 3.89a.503.503 0 0 0 .98.22c.42-1.83 2.02-3.11 3.9-3.11s3.49 1.28 3.9 3.11c.05.23.26.39.49.39.04 0 .07 0 .11-.01Z", fill: (_c = props.color) !== null && _c !== void 0 ? _c : 'currentColor' })));
};

// eslint-disable-next-line
const IconSmileyDissatisfied = (props) => {
    var _a, _b, _c;
    return (h("svg", { class: `icon-smiley-dissatistied ${props.pressed ? 'pressed' : ''}`, width: (_a = props.size) !== null && _a !== void 0 ? _a : '16', height: (_b = props.size) !== null && _b !== void 0 ? _b : 16, onClick: props.onClick ? (event) => props.onClick(event) : null, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
        h("path", { d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2ZM8.5 8c.83 0 1.5.67 1.5 1.5S9.33 11 8.5 11 7 10.33 7 9.5 7.67 8 8.5 8Zm8 8.99s-.07.01-.11.01a.51.51 0 0 1-.49-.39c-.42-1.83-2.02-3.11-3.9-3.11s-3.49 1.28-3.9 3.11a.503.503 0 0 1-.98-.22C7.64 14.1 9.65 12.5 12 12.5s4.36 1.6 4.88 3.89c.06.27-.11.54-.38.6Zm-1-5.99c-.83 0-1.5-.67-1.5-1.5S14.67 8 15.5 8s1.5.67 1.5 1.5-.67 1.5-1.5 1.5Z", fill: (_c = props.color) !== null && _c !== void 0 ? _c : 'currentColor' })));
};

// eslint-disable-next-line
const IconThumbsUpOutlined = (props) => {
    var _a, _b, _c;
    return (h("svg", { class: `icon-thumbs-up-outlined ${props.pressed ? 'pressed' : ''}`, width: (_a = props.size) !== null && _a !== void 0 ? _a : '14', height: (_b = props.size) !== null && _b !== void 0 ? _b : 14, onClick: props.onClick ? (event) => props.onClick(event) : null, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
        h("path", { d: "M21.99 12.23c0-1.85-1.5-3.35-3.35-3.35h-3.69c.21-1.88.16-4.52-2.64-5.65-.38-.15-.76-.23-1.13-.23-.76 0-1.44.32-1.93.9-.92 1.1-.73 2.61-.65 3 .09.56-.31 1.06-1.16 2.01-.16.18-.32.35-.47.53a2.48 2.48 0 0 0-1.63-.6h-.83a2.5 2.5 0 0 0-2.5 2.5v7.51a2.5 2.5 0 0 0 2.5 2.5h.83c.76 0 1.45-.34 1.91-.88.6.56 1.4.9 2.28.9h7.06c1.99 0 2.8-1.08 3.49-2.91.6-1.44 1.59-3.81 1.69-4.03.1-.22.28-.62.22-2.21ZM6.17 18.86c0 .46-.38.83-.83.83h-.83c-.46 0-.83-.37-.83-.83v-7.51c0-.46.37-.83.83-.83h.83c.46 0 .83.38.83.83v7.51Zm14.07-5.11c-.12.26-1.71 4.08-1.71 4.08-.63 1.65-1.02 1.88-1.95 1.88H9.52c-.93 0-1.68-.75-1.68-1.68V11.5s-.01-.45.1-.61c.99-1.27 2.59-2.42 2.31-4.23-.18-.99.14-2.38 1.45-1.87 2.29.93 1.64 3.46 1.39 5.35.03.22.32.33.72.38h.04c.18.02.37.03.58.03h4.2c.93 0 1.68.75 1.68 1.68 0 0 .05 1.26-.07 1.52Z", fill: (_c = props.color) !== null && _c !== void 0 ? _c : 'currentColor' })));
};

// eslint-disable-next-line
const IconThumbsUp = (props) => {
    var _a, _b, _c;
    return (h("svg", { class: `icon-thumbs-up ${props.pressed ? 'pressed' : ''}`, width: (_a = props.size) !== null && _a !== void 0 ? _a : '16', height: (_b = props.size) !== null && _b !== void 0 ? _b : 16, onClick: props.onClick ? (event) => props.onClick(event) : null, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
        h("path", { d: "M4 9H3c-.55 0-1 .45-1 1v9c0 .55.45 1 1 1h1c.55 0 1-.45 1-1v-9c0-.55-.45-1-1-1Zm17.95 2.06c0-1.11-.9-2.01-2.01-2.01h-5.03c-.25 0-.48 0-.69-.03h-.05c-.48-.06-.82-.19-.87-.46.3-2.27 1.08-5.3-1.67-6.42-1.56-.62-1.95 1.05-1.73 2.24.34 2.17-1.58 3.55-2.77 5.07-.13.2-.12.73-.12.73V18c0 1.11.91 2.01 2.02 2.01h8.46c1.11 0 1.58-.28 2.33-2.25 0 0 1.91-4.57 2.05-4.89s.09-1.82.09-1.82Z", fill: (_c = props.color) !== null && _c !== void 0 ? _c : 'currentColor' })));
};

// eslint-disable-next-line
const IconThumbsDownOutlined = (props) => {
    var _a, _b, _c;
    return (h("svg", { class: `icon-thumbs-down-outlined ${props.pressed ? 'pressed' : ''}`, width: (_a = props.size) !== null && _a !== void 0 ? _a : '14', height: (_b = props.size) !== null && _b !== void 0 ? _b : 14, onClick: props.onClick ? (event) => props.onClick(event) : null, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
        h("path", { d: "M21.99 12.15c0 1.85-1.5 3.35-3.35 3.35h-3.69c.21 1.88.16 4.52-2.64 5.65-.38.15-.76.23-1.13.23-.76 0-1.44-.32-1.93-.9-.92-1.1-.73-2.61-.65-3 .09-.56-.31-1.06-1.16-2.01-.16-.18-.32-.35-.47-.53-.44.38-1.01.6-1.63.6h-.83a2.5 2.5 0 0 1-2.5-2.5V5.53a2.5 2.5 0 0 1 2.5-2.5h.83c.76 0 1.45.34 1.91.88.6-.56 1.4-.9 2.28-.9h7.06c1.99 0 2.8 1.08 3.49 2.91.6 1.44 1.59 3.81 1.69 4.03.1.22.28.62.22 2.21ZM6.17 5.52c0-.46-.38-.83-.83-.83h-.83c-.46 0-.83.37-.83.83v7.51c0 .46.37.83.83.83h.83c.46 0 .83-.38.83-.83V5.52Zm14.07 5.11c-.12-.26-1.71-4.08-1.71-4.08-.63-1.65-1.02-1.88-1.95-1.88H9.52c-.93 0-1.68.75-1.68 1.68v6.53s-.01.45.1.61c.99 1.27 2.59 2.42 2.31 4.23-.18.99.14 2.38 1.45 1.87 2.29-.93 1.64-3.46 1.39-5.35.03-.22.32-.33.72-.38h.04c.18-.02.37-.03.58-.03h4.2c.93 0 1.68-.75 1.68-1.68 0 0 .05-1.26-.07-1.52Z", fill: (_c = props.color) !== null && _c !== void 0 ? _c : 'currentColor' })));
};

// eslint-disable-next-line
const IconThumbsDown = (props) => {
    var _a, _b, _c;
    return (h("svg", { class: `icon-thumbs-down ${props.pressed ? 'pressed' : ''}`, width: (_a = props.size) !== null && _a !== void 0 ? _a : '16', height: (_b = props.size) !== null && _b !== void 0 ? _b : 16, onClick: props.onClick ? (event) => props.onClick(event) : null, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
        h("path", { d: "M4 15.02H3c-.55 0-1-.45-1-1v-9c0-.55.45-1 1-1h1c.55 0 1 .45 1 1v9c0 .55-.45 1-1 1Zm17.95-2.06c0 1.11-.9 2.01-2.01 2.01h-5.03c-.25 0-.48 0-.69.03h-.05c-.48.06-.82.19-.87.46.3 2.27 1.08 5.3-1.67 6.42-1.56.62-1.95-1.05-1.73-2.24.34-2.17-1.58-3.55-2.77-5.07-.13-.2-.12-.73-.12-.73V6.02c0-1.11.91-2.01 2.02-2.01h8.46c1.11 0 1.58.28 2.33 2.25 0 0 1.91 4.57 2.05 4.89s.09 1.82.09 1.82Z", fill: (_c = props.color) !== null && _c !== void 0 ? _c : 'currentColor' })));
};

// eslint-disable-next-line
const SentimentIconMap = (props) => {
    switch (props.icon) {
        case 'smiley-satisfied-outlined':
            return h(IconSmileySatisfiedOutline, { color: props.color, onClick: props.onClick, size: props.size });
        case 'smiley-satisfied':
            return h(IconSmileySatisfied, { color: props.color, onClick: props.onClick, size: props.size });
        case 'smiley-somewhat-satisfied-outlined':
            return h(IconSmileySomewhatSatisfiedOutline, { color: props.color, onClick: props.onClick, size: props.size });
        case 'smiley-somewhat-satisfied':
            return h(IconSmileySomewhatSatisfied, { color: props.color, onClick: props.onClick, size: props.size });
        case 'smiley-neutral-outlined':
            return h(IconSmileyNeutralOutline, { color: props.color, onClick: props.onClick, size: props.size });
        case 'smiley-neutral':
            return h(IconSmileyNeutral, { color: props.color, onClick: props.onClick, size: props.size });
        case 'smiley-somewhat-dissatisfied-outlined':
            return h(IconSmileySomewhatDissatisfiedOutline, { color: props.color, onClick: props.onClick, size: props.size });
        case 'smiley-somewhat-dissatisfied':
            return h(IconSmileySomewhatDissatisfied, { color: props.color, onClick: props.onClick, size: props.size });
        case 'smiley-dissatisfied-outlined':
            return h(IconSmileyDissatisfiedOutline, { color: props.color, onClick: props.onClick, size: props.size });
        case 'smiley-dissatisfied':
            return h(IconSmileyDissatisfied, { color: props.color, onClick: props.onClick, size: props.size });
        case 'thumbs-up-outlined':
            return h(IconThumbsUpOutlined, { color: props.color, onClick: props.onClick, size: props.size });
        case 'thumbs-up':
            return h(IconThumbsUp, { color: props.color, onClick: props.onClick, size: props.size });
        case 'thumbs-down-outlined':
            return h(IconThumbsDownOutlined, { color: props.color, onClick: props.onClick, size: props.size });
        case 'thumbs-down':
            return h(IconThumbsDown, { color: props.color, onClick: props.onClick, size: props.size });
    }
};

const modusSentimentScaleCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");:host{display:block}.sentiment-scale-container{color:var(--modus-sentiment-scale-bg);cursor:pointer;display:flex;flex-shrink:0}.sentiment-scale-container .selected{color:var(--modus-sentiment-scale-selected-bg)}.sentiment-scale-container .smileys-container{display:flex;margin-left:10px;margin-right:10px}.sentiment-scale-container .thumbs-container{display:flex;margin-left:10px;margin-right:10px}.sentiment-scale-container[aria-disabled=true]{pointer-events:none}.sentiment-scale-container .disabled{opacity:var(--modus-sentiment-scale-disabled-opacity)}.sentiment-scale-container .disabled svg:hover path{fill:revert-layer !important}.sentiment-scale-container .disabled .active svg:hover path{fill:revert-layer !important}.sentiment-scale-container .active svg:hover path{color:var(--modus-sentiment-scale-hover-bg)}.sentiment-scale-container svg:focus path{color:var(--modus-sentiment-scale-hover-bg)}.sentiment-scale-container svg:hover path{color:var(--modus-sentiment-scale-hover-bg)}";
const ModusSentimentScaleStyle0 = modusSentimentScaleCss;

const ModusSentimentScale$1 = /*@__PURE__*/ proxyCustomElement(class ModusSentimentScale extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.sentimentSelection = createEvent(this, "sentimentSelection", 7);
        this.ariaLabel = undefined;
        this.type = 'smileys';
        this.disabled = false;
        this.selected = undefined;
    }
    getSentimentScaleMap() {
        if (this.type === THUMB_SENTIMENT_TYPE) {
            return THUMBS_TYPE_MAP;
        }
        else if (this.type === SMILEY_SENTIMENT_TYPE) {
            return SMILEYS_TYPE_MAP;
        }
        return null;
    }
    handleSentimentClick(selected) {
        if (!this.disabled) {
            this.selected = selected;
            this.sentimentSelection.emit(selected);
        }
    }
    handleKeyDown(event, id) {
        if (event.code.toUpperCase() !== 'ENTER') {
            return;
        }
        this.handleSentimentClick(id);
    }
    render() {
        const tabIndexValue = this.disabled ? -1 : 0;
        const iconsMap = this.getSentimentScaleMap();
        let containerClass = `${this.type + '-container'} ${this.disabled ? ' disabled' : ''}`;
        return (h("div", { key: '761003c811ba9eb61083c18cc721b1c287e91033', class: "sentiment-scale-container", "aria-disabled": this.disabled ? 'true' : undefined, "aria-label": this.ariaLabel || undefined, role: "group" }, iconsMap &&
            Array.from(iconsMap).map(([key, value]) => {
                const isIconSelected = key === this.selected;
                let iconName = key;
                if (isIconSelected) {
                    containerClass = `${containerClass} selected`;
                }
                else {
                    iconName = `${key}-outlined`;
                    containerClass = `${containerClass.replace('selected', '')} `;
                }
                return (h("div", { "aria-label": value, "aria-selected": isIconSelected ? isIconSelected.toString() : undefined, role: "button", tabIndex: tabIndexValue, class: containerClass, onClick: () => this.handleSentimentClick(key), onKeyDown: (event) => this.handleKeyDown(event, key) }, h(SentimentIconMap, { icon: iconName, size: `${this.type === THUMB_SENTIMENT_TYPE ? '32' : '24'}` })));
            })));
    }
    static get style() { return ModusSentimentScaleStyle0; }
}, [1, "modus-sentiment-scale", {
        "ariaLabel": [1, "aria-label"],
        "type": [1],
        "disabled": [4],
        "selected": [32]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["modus-sentiment-scale"];
    components.forEach(tagName => { switch (tagName) {
        case "modus-sentiment-scale":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ModusSentimentScale$1);
            }
            break;
    } });
}

const ModusSentimentScale = ModusSentimentScale$1;
const defineCustomElement = defineCustomElement$1;

export { ModusSentimentScale, defineCustomElement };
