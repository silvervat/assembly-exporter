import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import { d as defineCustomElement$4 } from './modus-button2.js';
import { d as defineCustomElement$3 } from './modus-list2.js';
import { d as defineCustomElement$2 } from './modus-list-item2.js';
import { d as defineCustomElement$1 } from './modus-tooltip2.js';
import { c as createPopper } from './popper.js';

const modusActionBarCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.modus-action-bar{align-items:center;display:flex;gap:0}.modus-action-bar .overflow-menu{display:none;position:absolute;z-index:1}.modus-action-bar .overflow-menu.show{display:block}";
const ModusActionBarStyle0 = modusActionBarCss;

const ModusActionBar = /*@__PURE__*/ proxyCustomElement(class ModusActionBar extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.actionBarClick = createEvent(this, "actionBarClick", 7);
        this.showOverflowMenu = false;
        this.actions = undefined;
        this.size = 'medium';
        this.visibleItemCount = 3;
    }
    componentWillLoad() {
        this.processChildren();
    }
    componentDidRender() {
        this.initializePopper();
    }
    handleGlobalFocus(event) {
        if (!(event.target instanceof HTMLElement)) {
            return;
        }
        const isMoreVerticalBtnTarget = event.target.localName === 'modus-tree-view-item';
        // Check if the focus is moving outside the component and if not clicked on the ellipsis button.
        if (!this.el.contains(event.target) && !isMoreVerticalBtnTarget && this.showOverflowMenu) {
            this.closeOverflowMenu();
        }
    }
    processChildren() {
        const actionItemsChildren = this.el.querySelectorAll('modus-action-item');
        if (actionItemsChildren.length > 0) {
            const actionItems = Array.from(actionItemsChildren);
            this.actions = actionItems.map((item) => ({
                id: item.getAttribute('id'),
                icon: item.getAttribute('icon'),
                label: item.textContent.trim(),
            }));
        }
    }
    initializePopper() {
        this.popperInstance = createPopper(this.overflowButtonElement, this.overflowMenuElement, {
            placement: 'bottom-end',
        });
    }
    handleKeyDown(event, action) {
        if (event && event.key !== 'Enter' && event.key !== ' ') {
            return;
        }
        this.handleButtonClick(event, action);
    }
    handleOverflowClick(event) {
        event.preventDefault();
        event.stopPropagation();
        this.toggleOverflowMenu();
    }
    handleOverflowKeyDown(event) {
        if (event && event.key !== 'Enter' && event.key !== ' ') {
            return;
        }
        this.handleOverflowClick(event);
    }
    handleButtonClick(event, action) {
        event.preventDefault();
        event.stopPropagation();
        this.actionBarClick.emit({ actionId: action.id });
        if (this.showOverflowMenu) {
            this.closeOverflowMenu();
        }
    }
    toggleOverflowMenu() {
        this.showOverflowMenu = !this.showOverflowMenu;
        if (this.showOverflowMenu) {
            this.popperInstance.update();
        }
    }
    closeOverflowMenu() {
        this.showOverflowMenu = false;
    }
    render() {
        const visibleActions = this.actions.length > this.visibleItemCount ? this.actions.slice(0, this.visibleItemCount - 1) : this.actions;
        const overflowActions = this.actions.length > this.visibleItemCount ? this.actions.slice(this.visibleItemCount - 1) : null;
        return (h("div", { key: 'e02cb0ae28cefc61170f22ad384fed9cea70af7b', class: "modus-action-bar" }, visibleActions.map((action) => (h("modus-tooltip", { text: action.label }, h("modus-button", { "icon-only": action.icon, buttonStyle: "borderless", color: "secondary", size: this.size, onClick: (event) => this.handleButtonClick(event, action), onKeyDown: (event) => this.handleKeyDown(event, action) }, action.label)))), this.actions.length > this.visibleItemCount && (h("modus-button", { ref: (el) => (this.overflowButtonElement = el), "icon-only": "more_vertical", buttonStyle: "borderless", color: "secondary", size: this.size, onClick: (event) => this.handleOverflowClick(event), onKeyDown: (event) => this.handleOverflowKeyDown(event) })), this.showOverflowMenu && (h("div", { style: { width: '200px', display: this.showOverflowMenu ? 'block' : 'none' }, class: "overflow-menu", ref: (el) => (this.overflowMenuElement = el) }, h("modus-list", null, overflowActions.map((action) => (h("modus-list-item", { size: this.size === 'small' ? 'condensed' : 'standard', onClick: (event) => this.handleButtonClick(event, action), onKeyDown: (event) => this.handleKeyDown(event, action), leftIcon: action.icon }, action.label))))))));
    }
    get el() { return this; }
    static get style() { return ModusActionBarStyle0; }
}, [1, "modus-action-bar", {
        "actions": [1040],
        "size": [1],
        "visibleItemCount": [2, "visible-item-count"],
        "showOverflowMenu": [32]
    }, [[4, "focusin", "handleGlobalFocus"], [5, "mouseup", "handleGlobalFocus"]]]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["modus-action-bar", "modus-button", "modus-list", "modus-list-item", "modus-tooltip"];
    components.forEach(tagName => { switch (tagName) {
        case "modus-action-bar":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ModusActionBar);
            }
            break;
        case "modus-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "modus-list":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "modus-list-item":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "modus-tooltip":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}

export { ModusActionBar as M, defineCustomElement as d };
