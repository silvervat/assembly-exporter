'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-4b22c494.js');
const iconClose = require('./icon-close-9e7bcfeb.js');
const utils = require('./utils-86e5121d.js');

const modusTextareaInputCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.modus-textarea-input{border-radius:4px;display:inline-flex;flex-direction:column;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";width:100%}.modus-textarea-input label{color:var(--modus-input-label-color, #464b52);font-size:0.75rem;font-weight:700;margin-bottom:0.25rem}.modus-textarea-input label span{color:var(--modus-input-border-color, #6a6e79);margin:0.25rem}.modus-textarea-input .label-container{display:inline-block;margin-bottom:0.25rem}.modus-textarea-input .label-container .required{bottom:0.0625rem;color:var(--modus-input-validation-error-color, #da212c);margin-left:0.25rem;position:relative}.modus-textarea-input .input-container{align-items:center;background-color:var(--modus-input-bg, #fff);border:0.0625rem solid var(--modus-input-border-color, #6a6e79);border-radius:4px;box-sizing:border-box;display:flex;flex-direction:row;margin:0;min-height:4.5rem;padding-bottom:2px;padding-top:2px;position:relative;width:100%}.modus-textarea-input .input-container textarea{background-color:transparent;border:none;color:var(--modus-input-color, #252a2e);font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";font-size:0.75rem;min-height:4rem;outline:none;padding:0 0.5rem;resize:none;resize:vertical;width:100%}.modus-textarea-input .input-container textarea::placeholder{color:var(--modus-input-hint-text-color, #a3a6b1)}.modus-textarea-input .input-container:hover{cursor:text}.modus-textarea-input .input-container:focus-within{border-color:var(--modus-input-border-active-color, #217cbb);box-shadow:0 0 0 1px var(--modus-input-border-active-color, #217cbb)}.modus-textarea-input .input-container.error{border-color:var(--modus-input-validation-error-color, #da212c);box-shadow:0 0 0 1px var(--modus-input-validation-error-color, #da212c)}.modus-textarea-input .input-container.valid{border-color:var(--modus-input-validation-success-color, #006638);box-shadow:0 0 0 1px var(--modus-input-validation-success-color, #006638)}.modus-textarea-input .input-container.large{min-height:5rem}.modus-textarea-input .input-container.large textarea{font-size:0.875rem;padding:0 1rem}.modus-textarea-input .input-container:has(textarea[readonly]){background-color:var(--modus-input-readonly-bg, #e0e1e9);border-color:transparent}.modus-textarea-input .sub-text{font-size:0.6875rem;margin-top:0.25rem}.modus-textarea-input .sub-text.helper{color:var(--modus-input-label-color, #464b52);font-weight:600}.modus-textarea-input .sub-text.error{color:var(--modus-input-validation-error-color, #da212c)}.modus-textarea-input .sub-text.valid{color:var(--modus-input-validation-success-color, #006638)}.modus-textarea-input span.required{color:var(--modus-input-validation-error-color, #da212c)}.modus-textarea-input.large{font-size:0.875rem;height:48px}.modus-textarea-input.disabled{pointer-events:none}.modus-textarea-input.disabled .input-container{background-color:var(--modus-input-disabled-bg, #e0e1e9);border:0.0625rem solid transparent}";
const ModusTextareaInputStyle0 = modusTextareaInputCss;

const ModusTextareaInput = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.valueChange = index.createEvent(this, "valueChange", 7);
        this.inputId = utils.generateElementId() + '_textarea_input';
        this.classBySize = new Map([
            ['medium', 'medium'],
            ['large', 'large'],
        ]);
        this.ariaLabel = undefined;
        this.autocorrect = undefined;
        this.autoFocusInput = undefined;
        this.clearable = false;
        this.disabled = undefined;
        this.enterkeyhint = undefined;
        this.errorText = undefined;
        this.helperText = undefined;
        this.label = undefined;
        this.maxLength = undefined;
        this.minLength = undefined;
        this.placeholder = undefined;
        this.readOnly = undefined;
        this.rows = 3;
        this.required = undefined;
        this.size = 'medium';
        this.spellcheck = undefined;
        this.textAlign = 'left';
        this.validText = undefined;
        this.value = undefined;
    }
    /** Focus the input. */
    async focusInput() {
        this.textInput.focus();
    }
    handleClearKeyDown(event) {
        if (event.key !== 'Enter' && event.key !== ' ') {
            return;
        }
        this.handleClear();
    }
    handleClear() {
        this.textInput.value = null;
        this.value = null;
        this.valueChange.emit(null);
    }
    handleOnInput(event) {
        const value = event.currentTarget.value;
        this.value = value;
        this.valueChange.emit(value);
    }
    get inputAutocorrect() {
        if (this.autocorrect === true) {
            return 'on';
        }
        else if (this.autocorrect === false) {
            return 'off';
        }
        return this.autocorrect;
    }
    render() {
        var _a;
        const iconSize = this.size === 'large' ? '24' : '16';
        const showClearIcon = this.clearable && !this.readOnly && !!this.value;
        const buildTextInputClassNames = () => {
            const classNames = [];
            if (showClearIcon) {
                classNames.push('has-right-icon');
            }
            classNames.push(`text-align-${this.textAlign}`);
            return classNames.join(' ');
        };
        const buildContainerClassNames = () => {
            const classNames = [];
            classNames.push('modus-textarea-input');
            if (this.disabled) {
                classNames.push('disabled');
            }
            return classNames.join(' ');
        };
        return (index.h("div", { class: buildContainerClassNames() }, this.label || this.required ? (index.h("div", { class: 'label-container' }, this.label ? index.h("label", { htmlFor: this.inputId }, this.label) : null, this.required ? index.h("span", { class: "required" }, "*") : null)) : null, index.h("div", { class: `input-container ${this.errorText ? 'error' : this.validText ? 'valid' : ''} ${this.classBySize.get(this.size)}`, onClick: () => this.textInput.focus(), part: "input-container" }, index.h("textarea", { id: this.inputId, "aria-invalid": !!this.errorText, "aria-label": this.ariaLabel, "aria-required": (_a = this.required) === null || _a === void 0 ? void 0 : _a.toString(), autocorrect: this.autocorrect, class: buildTextInputClassNames(), disabled: this.disabled, enterkeyhint: this.enterkeyhint, maxlength: this.maxLength, minlength: this.minLength, onInput: (event) => this.handleOnInput(event), placeholder: this.placeholder, readonly: this.readOnly, ref: (el) => (this.textInput = el), rows: this.rows, spellcheck: this.spellcheck, tabIndex: 0, value: this.value, autofocus: this.autoFocusInput }), showClearIcon && (index.h("span", { class: "icons clear", tabIndex: 0, onKeyDown: (event) => this.handleClearKeyDown(event), onClick: () => this.handleClear(), role: "button", "aria-label": "Clear entry" }, index.h(iconClose.IconClose, { size: iconSize })))), this.errorText ? (index.h("label", { class: "sub-text error" }, this.errorText)) : this.validText ? (index.h("label", { class: "sub-text valid" }, this.validText)) : this.helperText ? (index.h("label", { class: "sub-text helper" }, this.helperText)) : null));
    }
};
ModusTextareaInput.style = ModusTextareaInputStyle0;

exports.modus_textarea_input = ModusTextareaInput;
