'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-4b22c494.js');

const modusToolbarCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");:host{align-items:center;background-color:var(--modus-toolbar-bg, #fff);border-radius:4px;bottom:20px;box-shadow:0 0 10px 0 rgba(0, 0, 0, 0.2);display:flex;padding:1px;position:fixed;right:20px;z-index:9999}modus-button{margin:2px !important}";
const ModusToolbarStyle0 = modusToolbarCss;

const ModusToolbar = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.ariaLabel = undefined;
        this.disabled = undefined;
    }
    createButton(child) {
        const className = 'modus-button';
        const iconOnly = child.getAttribute('icon-only');
        const ariaLabel = child.getAttribute('aria-label') || 'button';
        const label = child.textContent ? child.textContent.trim() : '';
        return (index.h("modus-button", { ariaLabel: ariaLabel, "button-style": "borderless", color: "secondary", class: className, disabled: this.disabled, "icon-only": iconOnly }, label));
    }
    renderButtons() {
        const children = Array.from(this.host.children);
        const buttons = children.map((child) => {
            if (child.tagName === 'MODUS-BUTTON') {
                return this.createButton(child);
            }
            else if (child.tagName === 'MODUS-TOOLTIP') {
                const tooltipChild = child.children[0];
                const tooltipText = child.getAttribute('text');
                const tooltipPosition = child.getAttribute('position');
                if (tooltipChild && tooltipChild.tagName === 'MODUS-BUTTON') {
                    return (index.h("modus-tooltip", { text: tooltipText, position: tooltipPosition }, this.createButton(tooltipChild)));
                }
            }
            else {
                return index.h("modus-divider", null);
            }
        });
        return buttons;
    }
    render() {
        return (index.h(index.Host, { key: 'e4df2e713914a285bba30e91f31523a86427eb77', "aria-label": this.ariaLabel || undefined, role: "toolbar" }, this.renderButtons()));
    }
    get host() { return index.getElement(this); }
};
ModusToolbar.style = ModusToolbarStyle0;

exports.modus_toolbar = ModusToolbar;
