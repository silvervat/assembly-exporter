'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-4b22c494.js');
const utils = require('./utils-86e5121d.js');
const ModusIconMap = require('./ModusIconMap-15cda955.js');
require('./IconChevronLeft-73eb7912.js');
require('./IconChevronRight-b10cf11e.js');
require('./IconClose-0ec76e91.js');
require('./IconVisibilityOn-9f1886ed.js');

const modusAccordionItemCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.accordion-item{background-color:var(--modus-accordion-item-bg, #fff);border-bottom:0.0625rem solid var(--modus-accordion-item-border-color, #cbcdd6);color:var(--modus-accordion-item-color, #252a2e);display:flex;flex-direction:column;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";position:relative}.accordion-item[aria-expanded=true] .header:has(div svg.icon-expand-more){border-left:4px solid var(--modus-accordion-item-expanded-border-left-color, #0063a3);padding-left:12px}.accordion-item:has(div svg.icon-expand-more) .body{box-shadow:4px 0 0 var(--modus-accordion-item-expanded-border-left-color, #0063a3) inset}.accordion-item .header{align-items:center;cursor:pointer;display:inline-flex;font-size:1rem;font-weight:600;height:48px;padding:0 16px}.accordion-item .header .icon{margin-top:4px}.accordion-item .header.disabled{cursor:auto;opacity:0.4}.accordion-item .header.expanded{color:var(--modus-accordion-item-header-expand-color, #252a2e)}.accordion-item .header.expanded:has(div svg.icon-expand-more){background-color:var(--modus-accordion-item-header-expanded-bg, #dcedf9)}.accordion-item .header:hover:not(.disabled){background-color:var(--modus-accordion-item-header-hover-bg, #e0e1e9)}.accordion-item .header.small{font-size:0.875rem;height:32px}.accordion-item .header .chevron-container{align-items:center;display:flex;margin-left:auto;transition:transform 0.2s ease-in-out}.accordion-item .header .chevron-container.reverse{transform:rotate(-180deg)}.accordion-item .header .chevron-container svg path{fill:var(--modus-chevron-color, #6a6e79)}.accordion-item .body{overflow:hidden}.accordion-item .body .body-content{font-size:0.875rem;padding:1rem}.accordion-item .body.collapse:not(.show){display:none}.accordion-item .body.collapsing{height:0;position:relative;transition:all 0.35s ease-out}@media (prefers-reduced-motion: reduce){.accordion-item .body.collapsing{transition:none}}.accordion-item:has(>.body.collapsing) .header:has(div svg.icon-expand-more){background-color:var(--modus-accordion-item-header-expanded-bg, #dcedf9);border-left:4px solid var(--modus-blue);padding-left:12px}";
const ModusAccordionItemStyle0 = modusAccordionItemCss;

const ModusAccordionItem = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.closed = index.createEvent(this, "closed", 7);
        this.opened = index.createEvent(this, "opened", 7);
        this.expandedContentId = utils.generateElementId() + '_accordion-item';
        this.classBySize = new Map([
            ['condensed', 'small'],
            ['standard', 'standard'],
        ]);
        // Trick to restart an element's animation
        // see https://www.charistheo.io/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation
        // taken from: https://getbootstrap.com/docs/5.3/dist/js/bootstrap.js
        this.reflow = (element) => {
        };
        this.disabled = undefined;
        this.expandButtonType = 'standardArrow';
        this.expanded = undefined;
        this.headerText = undefined;
        this.icon = undefined;
        this.size = 'standard';
    }
    handleHeaderClick() {
        if (this.disabled) {
            return;
        }
        this.chevronContainerRef.classList.toggle('reverse');
        // Logic to trigger a transition animation and handle it
        // Because transition won't have any effect when using 'display:' on an element
        if (!this.expanded) {
            this.accordionBodyRef.classList.remove('collapse');
            this.accordionBodyRef.classList.add('collapsing');
            // Required to calculate scrollHeight and set the value on 'height' for transition to start
            this.accordionBodyRef.style.height = '0';
            // Timeout to reset collapsing class
            this.accordionOpenTimeout = setTimeout(() => {
                this.accordionBodyRef.classList.remove('collapsing');
                this.accordionBodyRef.classList.add('show');
                this.accordionBodyRef.classList.add('collapse');
                // reset height to original state
                // this.accordionBodyRef.style.height = '';
                clearTimeout(this.accordionOpenTimeout);
                this.expanded = true;
                this.opened.emit();
            }, 350);
            // Triggers transition
            this.accordionBodyRef.style.height = `${this.accordionBodyRef.scrollHeight}px`;
        }
        else {
            this.accordionBodyRef.style.height = `${this.accordionBodyRef.getBoundingClientRect().height}px`;
            this.reflow(this.accordionBodyRef);
            this.accordionBodyRef.classList.add('collapsing');
            this.accordionBodyRef.classList.remove('collapse');
            this.accordionBodyRef.classList.remove('show');
            // Timeout to reset collapsing class
            this.accordionCloseTimeout = setTimeout(() => {
                this.accordionBodyRef.classList.remove('collapsing');
                this.accordionBodyRef.classList.add('collapse');
                clearTimeout(this.accordionCloseTimeout);
                this.expanded = false;
                this.closed.emit();
            }, 350);
            this.accordionBodyRef.style.height = '';
        }
    }
    handleKeydown(event) {
        if (event.code !== 'Enter') {
            return;
        }
        this.handleHeaderClick();
    }
    renderIcon() {
        return (index.h("span", { class: "icon" }, index.h(ModusIconMap.ModusIconMap, { icon: this.icon })));
    }
    render() {
        const sizeClass = `${this.classBySize.get(this.size)}`;
        const disabledClass = `${this.disabled ? 'disabled' : ''}`;
        const expandedClass = `${this.expanded ? 'expanded' : ''}`;
        const bodyClass = `body ${sizeClass} collapse${this.expanded ? ' show' : ''}`;
        const headerClass = `header ${sizeClass} ${disabledClass} ${expandedClass}`;
        return (index.h("div", { key: 'e9f9be8a4b01ce99791b4c0dee521d09a1566fa1', "aria-disabled": this.disabled ? 'true' : undefined, "aria-expanded": this.expanded ? 'true' : undefined, class: "accordion-item" }, index.h("div", { key: '38a8ede0acd1b7fbeba51e978043546e759ef5f3', class: headerClass, role: "button", "aria-expanded": this.expanded ? 'true' : 'false', "aria-controls": this.expandedContentId, onClick: () => this.handleHeaderClick(), onKeyDown: (event) => this.handleKeydown(event), tabIndex: this.disabled ? -1 : 0 }, this.icon ? this.renderIcon() : null, index.h("span", { key: 'e0d8001a9b079cfa636399c8551bcfb3de0a390c', class: "title" }, this.headerText), index.h("div", { class: `chevron-container ${this.expanded ? 'reverse' : ''} `, ref: (el) => (this.chevronContainerRef = el) }, this.expandButtonType == 'circleArrow' ? (index.h(ModusIconMap.IconExpandMoreCircle, { size: "24" })) : (index.h(ModusIconMap.IconExpandMore, { size: "24" })))), index.h("div", { key: 'de48ff60b9911986e912528d85ae99511a14c0cf', id: this.expandedContentId, class: bodyClass, ref: (el) => (this.accordionBodyRef = el) }, index.h("div", { key: '825eca44853644c0070f10bf4c3252a25222e32f', class: "body-content" }, index.h("slot", { key: 'a8b5ca36212184a2f85e650cd40ad5baafa47358' })))));
    }
};
ModusAccordionItem.style = ModusAccordionItemStyle0;

exports.modus_accordion_item = ModusAccordionItem;
