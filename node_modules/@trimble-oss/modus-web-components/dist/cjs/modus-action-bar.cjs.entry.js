'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-4b22c494.js');
const popper = require('./popper-31badbf8.js');

const modusActionBarCss = "@import url(\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700\");.modus-action-bar{align-items:center;display:flex;gap:0}.modus-action-bar .overflow-menu{display:none;position:absolute;z-index:1}.modus-action-bar .overflow-menu.show{display:block}";
const ModusActionBarStyle0 = modusActionBarCss;

const ModusActionBar = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.actionBarClick = index.createEvent(this, "actionBarClick", 7);
        this.showOverflowMenu = false;
        this.actions = undefined;
        this.size = 'medium';
        this.visibleItemCount = 3;
    }
    componentWillLoad() {
        this.processChildren();
    }
    componentDidRender() {
        this.initializePopper();
    }
    handleGlobalFocus(event) {
        if (!(event.target instanceof HTMLElement)) {
            return;
        }
        const isMoreVerticalBtnTarget = event.target.localName === 'modus-tree-view-item';
        // Check if the focus is moving outside the component and if not clicked on the ellipsis button.
        if (!this.el.contains(event.target) && !isMoreVerticalBtnTarget && this.showOverflowMenu) {
            this.closeOverflowMenu();
        }
    }
    processChildren() {
        const actionItemsChildren = this.el.querySelectorAll('modus-action-item');
        if (actionItemsChildren.length > 0) {
            const actionItems = Array.from(actionItemsChildren);
            this.actions = actionItems.map((item) => ({
                id: item.getAttribute('id'),
                icon: item.getAttribute('icon'),
                label: item.textContent.trim(),
            }));
        }
    }
    initializePopper() {
        this.popperInstance = popper.createPopper(this.overflowButtonElement, this.overflowMenuElement, {
            placement: 'bottom-end',
        });
    }
    handleKeyDown(event, action) {
        if (event && event.key !== 'Enter' && event.key !== ' ') {
            return;
        }
        this.handleButtonClick(event, action);
    }
    handleOverflowClick(event) {
        event.preventDefault();
        event.stopPropagation();
        this.toggleOverflowMenu();
    }
    handleOverflowKeyDown(event) {
        if (event && event.key !== 'Enter' && event.key !== ' ') {
            return;
        }
        this.handleOverflowClick(event);
    }
    handleButtonClick(event, action) {
        event.preventDefault();
        event.stopPropagation();
        this.actionBarClick.emit({ actionId: action.id });
        if (this.showOverflowMenu) {
            this.closeOverflowMenu();
        }
    }
    toggleOverflowMenu() {
        this.showOverflowMenu = !this.showOverflowMenu;
        if (this.showOverflowMenu) {
            this.popperInstance.update();
        }
    }
    closeOverflowMenu() {
        this.showOverflowMenu = false;
    }
    render() {
        const visibleActions = this.actions.length > this.visibleItemCount ? this.actions.slice(0, this.visibleItemCount - 1) : this.actions;
        const overflowActions = this.actions.length > this.visibleItemCount ? this.actions.slice(this.visibleItemCount - 1) : null;
        return (index.h("div", { key: 'e02cb0ae28cefc61170f22ad384fed9cea70af7b', class: "modus-action-bar" }, visibleActions.map((action) => (index.h("modus-tooltip", { text: action.label }, index.h("modus-button", { "icon-only": action.icon, buttonStyle: "borderless", color: "secondary", size: this.size, onClick: (event) => this.handleButtonClick(event, action), onKeyDown: (event) => this.handleKeyDown(event, action) }, action.label)))), this.actions.length > this.visibleItemCount && (index.h("modus-button", { ref: (el) => (this.overflowButtonElement = el), "icon-only": "more_vertical", buttonStyle: "borderless", color: "secondary", size: this.size, onClick: (event) => this.handleOverflowClick(event), onKeyDown: (event) => this.handleOverflowKeyDown(event) })), this.showOverflowMenu && (index.h("div", { style: { width: '200px', display: this.showOverflowMenu ? 'block' : 'none' }, class: "overflow-menu", ref: (el) => (this.overflowMenuElement = el) }, index.h("modus-list", null, overflowActions.map((action) => (index.h("modus-list-item", { size: this.size === 'small' ? 'condensed' : 'standard', onClick: (event) => this.handleButtonClick(event, action), onKeyDown: (event) => this.handleKeyDown(event, action), leftIcon: action.icon }, action.label))))))));
    }
    get el() { return index.getElement(this); }
};
ModusActionBar.style = ModusActionBarStyle0;

exports.modus_action_bar = ModusActionBar;
