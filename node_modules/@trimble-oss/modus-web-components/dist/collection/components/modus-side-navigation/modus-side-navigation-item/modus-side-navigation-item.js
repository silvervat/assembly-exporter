import { h, // eslint-disable-line @typescript-eslint/no-unused-vars
 } from "@stencil/core";
import { ModusIconMap } from "../../../icons/ModusIconMap";
export class ModusSideNavigationItem {
    constructor() {
        this.disabled = false;
        this.disableSelection = false;
        this.expanded = false;
        this.label = undefined;
        this.menuIcon = undefined;
        this.selected = false;
        this.showExpandIcon = false;
    }
    async focusItem() {
        var _a;
        (_a = this._itemRef) === null || _a === void 0 ? void 0 : _a.focus();
    }
    connectedCallback() {
        this._sideNavItemAdded.emit(this.element);
    }
    disconnectedCallback() {
        this._sideNavItemRemoved.emit(this.element);
    }
    handleClick() {
        var _a;
        if (this.disabled)
            return;
        this.selected = this.disableSelection ? this.selected : !this.selected;
        (_a = this.sideNavItemClicked) === null || _a === void 0 ? void 0 : _a.emit({
            id: this.element.id,
            selected: this.selected,
        });
    }
    handleKeyDown(e) {
        if (e.code.toUpperCase() === 'ENTER' || e.code.toUpperCase() === 'SPACE') {
            this.handleClick();
        }
    }
    render() {
        const classes = {
            'side-nav-item': true,
            expanded: this.expanded,
            selected: this.selected,
            disabled: this.disabled,
        };
        const menuIconTooltip = this.label;
        return (h("modus-tooltip", { key: '86d79a136323525593f0a5af94e08ebe69fce07a', text: menuIconTooltip, disabled: this.disabled, position: "right" }, h("li", { key: '55dd43616d35edf3d3dc9388d5d3ad7dec3cbb1e', role: "treeitem", ref: (el) => (this._itemRef = el), tabIndex: this.disabled ? -1 : 0, class: classes, onClick: () => this.handleClick(), onKeyDown: (e) => this.handleKeyDown(e), "aria-disabled": this.disabled ? 'true' : null, "aria-label": this.label, "aria-current": this.selected ? 'true' : null, onFocus: () => this.sideNavItemFocus.emit({ id: this.element.id }) }, h("div", { key: '9f235f37b8caebfdec3a26d237534cc02e1f7af8', class: "menu-icon", onClick: () => this.sideNavItemFocus.emit({ id: this.element.id }) }, h("slot", { key: '3254cba587a59efc119a647bb374fdec7cf26812', name: "menu-icon" }), this.menuIcon && h(ModusIconMap, { icon: this.menuIcon, "aria-label": this.label, size: "24" })), this.expanded && h("div", { class: "menu-text" }, this.label), h("div", { key: '522bee5267eaad80c7df73c5469408fbfe9ee619', class: "level-icon" }, this.showExpandIcon && h(ModusIconMap, { icon: "chevron_right", size: this.expanded ? '24' : '16' })))));
    }
    static get is() { return "modus-side-navigation-item"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["modus-side-navigation-item.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modus-side-navigation-item.css"]
        };
    }
    static get properties() {
        return {
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The disabled state of side navigation panel item."
                },
                "attribute": "disabled",
                "reflect": false,
                "defaultValue": "false"
            },
            "disableSelection": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Disables item selection."
                },
                "attribute": "disable-selection",
                "reflect": true,
                "defaultValue": "false"
            },
            "expanded": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": "Only to be used by modus side navigation components"
                        }],
                    "text": ""
                },
                "attribute": "expanded",
                "reflect": true,
                "defaultValue": "false"
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Label for the item and the tooltip message."
                },
                "attribute": "label",
                "reflect": false
            },
            "menuIcon": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) A built-in menu icon string or a image url."
                },
                "attribute": "menu-icon",
                "reflect": false
            },
            "selected": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The selected state of side navigation panel item."
                },
                "attribute": "selected",
                "reflect": true,
                "defaultValue": "false"
            },
            "showExpandIcon": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Shows the expand icon."
                },
                "attribute": "show-expand-icon",
                "reflect": true,
                "defaultValue": "false"
            }
        };
    }
    static get events() {
        return [{
                "method": "sideNavItemClicked",
                "name": "sideNavItemClicked",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires when mouse click or `Enter` key press on an item."
                },
                "complexType": {
                    "original": "{ id: string; selected: boolean }",
                    "resolved": "{ id: string; selected: boolean; }",
                    "references": {}
                }
            }, {
                "method": "sideNavItemFocus",
                "name": "sideNavItemFocus",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires when an item is in focus."
                },
                "complexType": {
                    "original": "{ id: string }",
                    "resolved": "{ id: string; }",
                    "references": {}
                }
            }, {
                "method": "_sideNavItemAdded",
                "name": "_sideNavItemAdded",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": "Only to be used by modus side navigation components"
                        }],
                    "text": ""
                },
                "complexType": {
                    "original": "HTMLElement",
                    "resolved": "HTMLElement",
                    "references": {
                        "HTMLElement": {
                            "location": "global",
                            "id": "global::HTMLElement"
                        }
                    }
                }
            }, {
                "method": "_sideNavItemRemoved",
                "name": "_sideNavItemRemoved",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": "Only to be used by modus side navigation components"
                        }],
                    "text": ""
                },
                "complexType": {
                    "original": "HTMLElement",
                    "resolved": "HTMLElement",
                    "references": {
                        "HTMLElement": {
                            "location": "global",
                            "id": "global::HTMLElement"
                        }
                    }
                }
            }];
    }
    static get methods() {
        return {
            "focusItem": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "element"; }
}
