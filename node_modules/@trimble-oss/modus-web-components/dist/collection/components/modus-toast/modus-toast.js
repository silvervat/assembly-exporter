// eslint-disable-next-line
import { h } from "@stencil/core";
import { IconError } from "../../icons/svgs/icon-error";
import { IconWarning } from "../../icons/svgs/icon-warning";
import { IconInfo } from "../../icons/svgs/icon-info";
import { IconHelp } from "../../icons/svgs/icon-help";
import { IconCheckCircle } from "../../icons/svgs/icon-check-circle";
import { IconClose } from "../../icons/generated-icons/IconClose";
export class ModusToast {
    constructor() {
        this.iconByType = new Map([
            ['danger', h(IconWarning, { color: '#C81922', size: '18' })],
            ['dark', h(IconInfo, { color: 'white', size: '18' })],
            ['default', h(IconInfo, { size: '18' })],
            ['primary', h(IconInfo, { color: '#0D6AA8', size: '18' })],
            ['secondary', h(IconHelp, { size: '18' })],
            ['success', h(IconCheckCircle, { color: '#5E9331', size: '18' })],
            ['tertiary', h(IconInfo, { size: '18' })],
            ['warning', h(IconError, { color: '#FFBE00', size: '18' })],
        ]);
        this.classByType = new Map([
            ['danger', 'danger'],
            ['dark', 'dark'],
            ['default', 'default'],
            ['primary', 'primary'],
            ['secondary', 'secondary'],
            ['success', 'success'],
            ['tertiary', 'tertiary'],
            ['warning', 'warning'],
        ]);
        this.ariaLabel = undefined;
        this.dismissible = undefined;
        this.delay = 15000;
        this.role = 'status';
        this.showIcon = true;
        this.type = 'default';
    }
    delayChanged(newDelay) {
        clearTimeout(this.timerId);
        this.timerId = setTimeout(() => {
            this.dismissElement();
        }, newDelay);
    }
    dismissElement() {
        this.dismissClick.emit();
        this.el.remove();
    }
    componentDidLoad() {
        if (this.delay > 0) {
            this.timerId = setTimeout(() => {
                this.dismissElement();
            }, this.delay);
        }
    }
    disconnectedCallback() {
        clearTimeout(this.timerId);
    }
    render() {
        const icon = this.iconByType.get(this.type);
        const className = `modus-toast ${this.classByType.get(this.type)}`;
        return (h("div", { key: '1eac3cdb6513fad3fb5581831e984cd3d7a472c4', "aria-label": this.ariaLabel || undefined, class: className, role: this.role }, this.showIcon && h("div", { class: "icon" }, icon), h("span", { key: '5931172f5009076f2b3c07244ecca40eb01ff60d', class: 'text' }, h("slot", { key: 'bc410ee678cc98974958df286761fb9c2bfacf90' })), this.dismissible && (h("button", { type: "button", class: 'close', onClick: () => this.dismissElement(), "aria-label": "Dismiss" }, h(IconClose, { size: '18' })))));
    }
    static get is() { return "modus-toast"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["modus-toast.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modus-toast.css"]
        };
    }
    static get properties() {
        return {
            "ariaLabel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string | null",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The toast's aria-label."
                },
                "attribute": "aria-label",
                "reflect": false
            },
            "dismissible": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether the toast has a dismiss button."
                },
                "attribute": "dismissible",
                "reflect": false
            },
            "delay": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Time taken to dismiss the toast"
                },
                "attribute": "delay",
                "reflect": false,
                "defaultValue": "15000"
            },
            "role": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string | null",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Role taken by the toast.  Defaults to 'status'."
                },
                "attribute": "role",
                "reflect": false,
                "defaultValue": "'status'"
            },
            "showIcon": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether to show the toasts' icon."
                },
                "attribute": "show-icon",
                "reflect": false,
                "defaultValue": "true"
            },
            "type": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'danger' | 'dark' | 'default' | 'primary' | 'secondary' | 'success' | 'warning'",
                    "resolved": "\"danger\" | \"dark\" | \"default\" | \"primary\" | \"secondary\" | \"success\" | \"warning\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The toasts' type."
                },
                "attribute": "type",
                "reflect": false,
                "defaultValue": "'default'"
            }
        };
    }
    static get events() {
        return [{
                "method": "dismissClick",
                "name": "dismissClick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires when the toast is dismissed"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "delay",
                "methodName": "delayChanged"
            }];
    }
}
