// eslint-disable-next-line
import { h } from "@stencil/core";
import { IconClose } from "../../icons/svgs/icon-close";
import { generateElementId } from "../../utils/utils";
export class ModusTextareaInput {
    constructor() {
        this.inputId = generateElementId() + '_textarea_input';
        this.classBySize = new Map([
            ['medium', 'medium'],
            ['large', 'large'],
        ]);
        this.ariaLabel = undefined;
        this.autocorrect = undefined;
        this.autoFocusInput = undefined;
        this.clearable = false;
        this.disabled = undefined;
        this.enterkeyhint = undefined;
        this.errorText = undefined;
        this.helperText = undefined;
        this.label = undefined;
        this.maxLength = undefined;
        this.minLength = undefined;
        this.placeholder = undefined;
        this.readOnly = undefined;
        this.rows = 3;
        this.required = undefined;
        this.size = 'medium';
        this.spellcheck = undefined;
        this.textAlign = 'left';
        this.validText = undefined;
        this.value = undefined;
    }
    /** Focus the input. */
    async focusInput() {
        this.textInput.focus();
    }
    handleClearKeyDown(event) {
        if (event.key !== 'Enter' && event.key !== ' ') {
            return;
        }
        this.handleClear();
    }
    handleClear() {
        this.textInput.value = null;
        this.value = null;
        this.valueChange.emit(null);
    }
    handleOnInput(event) {
        const value = event.currentTarget.value;
        this.value = value;
        this.valueChange.emit(value);
    }
    get inputAutocorrect() {
        if (this.autocorrect === true) {
            return 'on';
        }
        else if (this.autocorrect === false) {
            return 'off';
        }
        return this.autocorrect;
    }
    render() {
        var _a;
        const iconSize = this.size === 'large' ? '24' : '16';
        const showClearIcon = this.clearable && !this.readOnly && !!this.value;
        const buildTextInputClassNames = () => {
            const classNames = [];
            if (showClearIcon) {
                classNames.push('has-right-icon');
            }
            classNames.push(`text-align-${this.textAlign}`);
            return classNames.join(' ');
        };
        const buildContainerClassNames = () => {
            const classNames = [];
            classNames.push('modus-textarea-input');
            if (this.disabled) {
                classNames.push('disabled');
            }
            return classNames.join(' ');
        };
        return (h("div", { class: buildContainerClassNames() }, this.label || this.required ? (h("div", { class: 'label-container' }, this.label ? h("label", { htmlFor: this.inputId }, this.label) : null, this.required ? h("span", { class: "required" }, "*") : null)) : null, h("div", { class: `input-container ${this.errorText ? 'error' : this.validText ? 'valid' : ''} ${this.classBySize.get(this.size)}`, onClick: () => this.textInput.focus(), part: "input-container" }, h("textarea", { id: this.inputId, "aria-invalid": !!this.errorText, "aria-label": this.ariaLabel, "aria-required": (_a = this.required) === null || _a === void 0 ? void 0 : _a.toString(), autocorrect: this.autocorrect, class: buildTextInputClassNames(), disabled: this.disabled, enterkeyhint: this.enterkeyhint, maxlength: this.maxLength, minlength: this.minLength, onInput: (event) => this.handleOnInput(event), placeholder: this.placeholder, readonly: this.readOnly, ref: (el) => (this.textInput = el), rows: this.rows, spellcheck: this.spellcheck, tabIndex: 0, value: this.value, autofocus: this.autoFocusInput }), showClearIcon && (h("span", { class: "icons clear", tabIndex: 0, onKeyDown: (event) => this.handleClearKeyDown(event), onClick: () => this.handleClear(), role: "button", "aria-label": "Clear entry" }, h(IconClose, { size: iconSize })))), this.errorText ? (h("label", { class: "sub-text error" }, this.errorText)) : this.validText ? (h("label", { class: "sub-text valid" }, this.validText)) : this.helperText ? (h("label", { class: "sub-text helper" }, this.helperText)) : null));
    }
    static get is() { return "modus-textarea-input"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["modus-textarea-input.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modus-textarea-input.css"]
        };
    }
    static get properties() {
        return {
            "ariaLabel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string | null",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's aria-label."
                },
                "attribute": "aria-label",
                "reflect": false
            },
            "autocorrect": {
                "type": "any",
                "mutable": false,
                "complexType": {
                    "original": "boolean | 'off' | 'on'",
                    "resolved": "\"off\" | \"on\" | boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether to activate automatic correction while the user is editing this field in Safari."
                },
                "attribute": "autocorrect",
                "reflect": false
            },
            "autoFocusInput": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Sets autofocus on the input."
                },
                "attribute": "auto-focus-input",
                "reflect": false
            },
            "clearable": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether the input has a clear button."
                },
                "attribute": "clearable",
                "reflect": false,
                "defaultValue": "false"
            },
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether the input is disabled."
                },
                "attribute": "disabled",
                "reflect": false
            },
            "enterkeyhint": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'",
                    "resolved": "\"done\" | \"enter\" | \"go\" | \"next\" | \"previous\" | \"search\" | \"send\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Which action label to present for the enter key on virtual keyboards."
                },
                "attribute": "enterkeyhint",
                "reflect": false
            },
            "errorText": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's error state text."
                },
                "attribute": "error-text",
                "reflect": false
            },
            "helperText": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's helper text displayed below the input."
                },
                "attribute": "helper-text",
                "reflect": false
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's label."
                },
                "attribute": "label",
                "reflect": false
            },
            "maxLength": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's maximum length."
                },
                "attribute": "max-length",
                "reflect": false
            },
            "minLength": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's minimum length."
                },
                "attribute": "min-length",
                "reflect": false
            },
            "placeholder": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's placeholder text."
                },
                "attribute": "placeholder",
                "reflect": false
            },
            "readOnly": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether the input's content is read-only"
                },
                "attribute": "read-only",
                "reflect": false
            },
            "rows": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Number of rows on textarea"
                },
                "attribute": "rows",
                "reflect": false,
                "defaultValue": "3"
            },
            "required": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether the input is required."
                },
                "attribute": "required",
                "reflect": false
            },
            "size": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'medium' | 'large'",
                    "resolved": "\"large\" | \"medium\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's size."
                },
                "attribute": "size",
                "reflect": false,
                "defaultValue": "'medium'"
            },
            "spellcheck": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether to enable spell checking."
                },
                "attribute": "spellcheck",
                "reflect": false
            },
            "textAlign": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'left' | 'right'",
                    "resolved": "\"left\" | \"right\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's text alignment."
                },
                "attribute": "text-align",
                "reflect": false,
                "defaultValue": "'left'"
            },
            "validText": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's valid state text."
                },
                "attribute": "valid-text",
                "reflect": false
            },
            "value": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's value."
                },
                "attribute": "value",
                "reflect": false
            }
        };
    }
    static get events() {
        return [{
                "method": "valueChange",
                "name": "valueChange",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires on input value change."
                },
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                }
            }];
    }
    static get methods() {
        return {
            "focusInput": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Focus the input.",
                    "tags": []
                }
            }
        };
    }
}
