// eslint-disable-next-line
import { h } from "@stencil/core";
import { generateElementId } from "../../utils/utils";
export class ModusNumberInput {
    constructor() {
        this.inputId = generateElementId() + '_number-input';
        this.classBySize = new Map([
            ['medium', 'medium'],
            ['large', 'large'],
        ]);
        this.ariaLabel = undefined;
        this.disabled = undefined;
        this.errorText = undefined;
        this.helperText = undefined;
        this.label = undefined;
        this.maxValue = undefined;
        this.minValue = undefined;
        this.placeholder = undefined;
        this.readOnly = undefined;
        this.required = undefined;
        this.size = 'medium';
        this.step = undefined;
        this.textAlign = 'left';
        this.validText = undefined;
        this.value = undefined;
    }
    handleOnInput() {
        this.value = this.numberInput.value;
        this.valueChange.emit(this.value);
    }
    /** Focus the input. */
    async focusInput() {
        this.numberInput.focus();
    }
    watchValue(newValue, oldValue) {
        if (isNaN(+newValue)) {
            this.value = oldValue;
        }
        else {
            this.value = newValue;
        }
    }
    render() {
        var _a;
        const textAlignClassName = `text-align-${this.textAlign}`;
        const buildContainerClassNames = () => {
            const classNames = [];
            classNames.push('modus-number-input');
            if (this.disabled) {
                classNames.push('disabled');
            }
            return classNames.join(' ');
        };
        const buildInputContainerClassNames = () => {
            const classNames = [];
            classNames.push('input-container');
            classNames.push(this.classBySize.get(this.size));
            if (this.errorText) {
                classNames.push('error');
            }
            if (this.validText) {
                classNames.push('valid');
            }
            return classNames.join(' ');
        };
        return (h("div", { class: buildContainerClassNames() }, this.label || this.required ? (h("div", { class: "label-container" }, this.label ? h("label", { htmlFor: this.inputId }, this.label) : null, this.required ? h("span", { class: "required" }, "*") : null, this.helperText ? h("label", { class: "sub-text helper" }, this.helperText) : null)) : null, h("div", { class: buildInputContainerClassNames(), part: "input-container" }, h("input", { id: this.inputId, "aria-label": this.ariaLabel, "aria-invalid": !!this.errorText, "aria-required": (_a = this.required) === null || _a === void 0 ? void 0 : _a.toString(), "aria-valuemax": this.maxValue, "aria-valuemin": this.minValue, "aria-valuenow": this.value, class: textAlignClassName, disabled: this.disabled, max: this.maxValue, min: this.minValue, onInput: () => this.handleOnInput(), placeholder: this.placeholder, readonly: this.readOnly, ref: (el) => (this.numberInput = el), step: this.step, tabIndex: 0, type: "number", value: this.value })), this.errorText ? (h("label", { class: "sub-text error" }, this.errorText)) : this.validText ? (h("label", { class: "sub-text valid" }, this.validText)) : null));
    }
    static get is() { return "modus-number-input"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["modus-number-input.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modus-number-input.css"]
        };
    }
    static get properties() {
        return {
            "ariaLabel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string | null",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's aria-label."
                },
                "attribute": "aria-label",
                "reflect": false
            },
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether the input is disabled."
                },
                "attribute": "disabled",
                "reflect": false
            },
            "errorText": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's error state text."
                },
                "attribute": "error-text",
                "reflect": false
            },
            "helperText": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's helper text displayed below the input."
                },
                "attribute": "helper-text",
                "reflect": false
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's label."
                },
                "attribute": "label",
                "reflect": false
            },
            "maxValue": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's maximum value."
                },
                "attribute": "max-value",
                "reflect": false
            },
            "minValue": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's minimum value."
                },
                "attribute": "min-value",
                "reflect": false
            },
            "placeholder": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's placeholder text."
                },
                "attribute": "placeholder",
                "reflect": false
            },
            "readOnly": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether the input's content is read-only"
                },
                "attribute": "read-only",
                "reflect": false
            },
            "required": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether the input is required."
                },
                "attribute": "required",
                "reflect": false
            },
            "size": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'medium' | 'large'",
                    "resolved": "\"large\" | \"medium\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's size."
                },
                "attribute": "size",
                "reflect": false,
                "defaultValue": "'medium'"
            },
            "step": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's step."
                },
                "attribute": "step",
                "reflect": false
            },
            "textAlign": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'left' | 'right'",
                    "resolved": "\"left\" | \"right\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's text alignment."
                },
                "attribute": "text-align",
                "reflect": false,
                "defaultValue": "'left'"
            },
            "validText": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's valid state text."
                },
                "attribute": "valid-text",
                "reflect": false
            },
            "value": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's value."
                },
                "attribute": "value",
                "reflect": false
            }
        };
    }
    static get events() {
        return [{
                "method": "valueChange",
                "name": "valueChange",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires on input value change."
                },
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                }
            }];
    }
    static get methods() {
        return {
            "focusInput": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Focus the input.",
                    "tags": []
                }
            }
        };
    }
    static get watchers() {
        return [{
                "propName": "value",
                "methodName": "watchValue"
            }];
    }
}
