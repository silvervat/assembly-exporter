import { h, // eslint-disable-line @typescript-eslint/no-unused-vars
 } from "@stencil/core";
import TimeInputFormatter from "./modus-time-picker.formatter";
/**
 * @slot timeZone - Slot for a Time Zone dropdown
 */
export class ModusTimePicker {
    constructor() {
        this.classBySize = new Map([
            ['medium', 'medium'],
            ['large', 'large'],
        ]);
        this._maxLength = 5;
        this.ampm = undefined;
        this.allowedCharsRegex = undefined;
        this.ariaLabel = undefined;
        this.autoFormat = undefined;
        this.autoFocusInput = undefined;
        this.disabled = undefined;
        this.disableValidation = undefined;
        this.errorText = undefined;
        this.helperText = undefined;
        this.label = undefined;
        this.min = undefined;
        this.max = undefined;
        this.placeholder = undefined;
        this.readOnly = undefined;
        this.required = undefined;
        this.size = 'medium';
        this.validText = undefined;
        this.value = undefined;
        this._timeDisplay = undefined;
    }
    handleAmPmChange(val) {
        this.handleAmPmDependencies(val);
    }
    handleValueChange(val) {
        if (!this._isEditing) {
            this._timeDisplay = this._formatter.formatTimeDisplay(val);
        }
        this.valueChange.emit({
            value: val,
            inputString: this._timeDisplay,
        });
    }
    // Life cycle methods
    componentWillLoad() {
        this.handleAmPmDependencies(this.ampm);
        this._timeDisplay = this._formatter.formatTimeDisplay(this.value);
    }
    /** Public Methods */
    /** Focus the input. */
    async focusInput() {
        this._timeInput.focus();
    }
    // Handlers
    handleBlur() {
        var _a;
        this._isEditing = false;
        const inputString = (_a = this._timeInput) === null || _a === void 0 ? void 0 : _a.value;
        this.validateTimeInput(inputString);
        this.timeInputBlur.emit({
            value: this.value,
            inputString,
        });
    }
    handleDefaultKeyDown(e, callback) {
        const code = e.code.toUpperCase();
        if (code === 'ENTER' || code === 'SPACE')
            callback();
    }
    handleInputChange(event) {
        var _a;
        event.stopPropagation();
        event.preventDefault();
        this._isEditing = true;
        const inputString = (_a = event.currentTarget) === null || _a === void 0 ? void 0 : _a.value;
        this._timeDisplay = this._formatter.autoFormatTimeInput(inputString, this.autoFormat);
        this.value = this._formatter.parseTimeDisplay(this._timeDisplay);
    }
    handleInputKeyPress(event) {
        const key = event.key;
        const keyIsValid = this._formatter.keyIsValidTimeCharacter(key, this.allowedCharsRegex);
        if (!keyIsValid) {
            event.preventDefault();
        }
        return keyIsValid;
    }
    // Helpers
    clearValidation() {
        this.errorText = null;
    }
    getAriaControls() {
        return {
            'aria-invalid': !!this.errorText,
            'aria-label': this.ariaLabel || undefined,
            'aria-required': this.required,
        };
    }
    handleAmPmDependencies(hasAmPm) {
        this._formatter = new TimeInputFormatter(hasAmPm);
        this._maxLength = hasAmPm ? 8 : 5;
    }
    validateTimeInput(inputString) {
        if (this.disableValidation)
            return;
        if (!inputString) {
            if (this.required)
                this.errorText = 'Required';
            else
                this.clearValidation();
        }
        else if (!this.value)
            this.errorText = 'Invalid time';
        else if (this.min || this.max) {
            const today = new Date();
            const minDate = this._formatter.setTimeOnDate(today, this.min);
            const maxDate = this._formatter.setTimeOnDate(today, this.max);
            const inputDate = this._formatter.setTimeOnDate(today, this.value);
            if (this.min && inputDate < minDate) {
                this.errorText = 'Time input is lesser than minimum time allowed';
            }
            else if (this.max && inputDate > maxDate) {
                this.errorText = 'Time input is greater than maximum time allowed';
            }
            else
                this.clearValidation();
        }
        else
            this.clearValidation();
    }
    // Renderers
    renderTimeInput() {
        const ariaControls = this.getAriaControls();
        return (h("input", Object.assign({}, ariaControls, { id: "time-input", "aria-label": (this.label ? null : this.ariaLabel) || undefined, "aria-placeholder": this.placeholder, disabled: this.disabled, onInput: (event) => this.handleInputChange(event), placeholder: this.placeholder, readonly: this.readOnly, ref: (el) => (this._timeInput = el), tabIndex: 0, type: "text", value: this._timeDisplay, autofocus: this.autoFocusInput, onBlur: () => this.handleBlur(), maxLength: this._maxLength, onKeyPress: (e) => this.handleInputKeyPress(e) })));
    }
    renderSubText() {
        return this.errorText ? (h("label", { class: "sub-text error" }, this.errorText)) : this.validText ? (h("label", { class: "sub-text valid" }, this.validText)) : null;
    }
    render() {
        return (h("div", { key: 'c344689b86d18990cc4c003e77a3cd1837586aed', class: { 'modus-time-picker': true, disabled: this.disabled } }, h("div", { key: '75eb15def70838fdf3c2f3cb7e5fcd42e6b173d4', class: "time-input-wrapper" }, this.label || this.required ? (h("div", { class: 'label-container' }, this.label ? h("label", { htmlFor: "time-input" }, this.label) : null, this.required ? h("span", { class: "required" }, "*") : null, this.helperText ? h("label", { class: "sub-text helper" }, this.helperText) : null)) : null, h("div", { key: '4870c5600280829e12db2c44efbe5d69139ab161', class: `input-container ${this.errorText ? 'error' : this.validText ? 'valid' : ''} ${this.classBySize.get(this.size)}` }, this.renderTimeInput()), this.renderSubText()), h("div", { key: '4f8ee49d018277ec22755451e9f2d45889497312', class: "time-zone-wrapper" }, h("slot", { key: '11e3d8d2626a7bc5c72696ca019690874ececf7a', name: "timeZone" }))));
    }
    static get is() { return "modus-time-picker"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["modus-time-picker.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modus-time-picker.css"]
        };
    }
    static get properties() {
        return {
            "ampm": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Sets 12/24 hour format for the input string."
                },
                "attribute": "ampm",
                "reflect": false
            },
            "allowedCharsRegex": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "RegExp | string",
                    "resolved": "RegExp | string",
                    "references": {
                        "RegExp": {
                            "location": "global",
                            "id": "global::RegExp"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Regular expression to allow characters while typing the input.\nDefault is `/[\\d:apm\\s]/gi` or `/[\\d:]/gi` based on the display format."
                },
                "attribute": "allowed-chars-regex",
                "reflect": false
            },
            "ariaLabel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string | null",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's aria-label."
                },
                "attribute": "aria-label",
                "reflect": false
            },
            "autoFormat": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Formats the text while typing in the input field."
                },
                "attribute": "auto-format",
                "reflect": false
            },
            "autoFocusInput": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Sets autofocus on the input."
                },
                "attribute": "auto-focus-input",
                "reflect": false
            },
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether the input is disabled."
                },
                "attribute": "disabled",
                "reflect": false
            },
            "disableValidation": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Disables default validation for the time input."
                },
                "attribute": "disable-validation",
                "reflect": false
            },
            "errorText": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Custom error text displayed for the input."
                },
                "attribute": "error-text",
                "reflect": false
            },
            "helperText": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Custom helper text displayed below the input."
                },
                "attribute": "helper-text",
                "reflect": false
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's label."
                },
                "attribute": "label",
                "reflect": false
            },
            "min": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Minimum time (in 24 hour format)."
                },
                "attribute": "min",
                "reflect": false
            },
            "max": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Maximum time (in 24 hour format)."
                },
                "attribute": "max",
                "reflect": false
            },
            "placeholder": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's placeholder text."
                },
                "attribute": "placeholder",
                "reflect": false
            },
            "readOnly": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether the input's content is read-only"
                },
                "attribute": "read-only",
                "reflect": false
            },
            "required": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether the input is required."
                },
                "attribute": "required",
                "reflect": false
            },
            "size": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'medium' | 'large'",
                    "resolved": "\"large\" | \"medium\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's size."
                },
                "attribute": "size",
                "reflect": false,
                "defaultValue": "'medium'"
            },
            "validText": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's valid state text."
                },
                "attribute": "valid-text",
                "reflect": false
            },
            "value": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Value of the time entered into the input."
                },
                "attribute": "value",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "_timeDisplay": {}
        };
    }
    static get events() {
        return [{
                "method": "timeInputBlur",
                "name": "timeInputBlur",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires on input value out of focus."
                },
                "complexType": {
                    "original": "ModusTimePickerEventDetails",
                    "resolved": "ModusTimePickerEventDetails",
                    "references": {
                        "ModusTimePickerEventDetails": {
                            "location": "import",
                            "path": "./modus-time-picker.models",
                            "id": "src/components/modus-time-picker/modus-time-picker.models.tsx::ModusTimePickerEventDetails"
                        }
                    }
                }
            }, {
                "method": "valueChange",
                "name": "valueChange",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires on input value change."
                },
                "complexType": {
                    "original": "ModusTimePickerEventDetails",
                    "resolved": "ModusTimePickerEventDetails",
                    "references": {
                        "ModusTimePickerEventDetails": {
                            "location": "import",
                            "path": "./modus-time-picker.models",
                            "id": "src/components/modus-time-picker/modus-time-picker.models.tsx::ModusTimePickerEventDetails"
                        }
                    }
                }
            }];
    }
    static get methods() {
        return {
            "focusInput": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Focus the input.",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "element"; }
    static get watchers() {
        return [{
                "propName": "ampm",
                "methodName": "handleAmPmChange"
            }, {
                "propName": "value",
                "methodName": "handleValueChange"
            }];
    }
}
