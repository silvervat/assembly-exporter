import { h, Host, Fragment, } from "@stencil/core";
import { IconMenu } from "../../icons/svgs/icon-menu";
import { IconNotifications } from "../../icons/svgs/icon-notifications";
import { IconApps } from "../../icons/svgs/icon-apps";
import { IconSearch } from "../../icons/svgs/icon-search";
import { IconHelp } from "../../icons/svgs/icon-help";
import { ModusNavbarProductLogo } from "./product-logo/modus-navbar-product-logo";
import { createGuid } from "../../utils/utils";
import { ModusNavbarButtonList } from "./button-list/modus-navbar-button-list";
import { ModusNavbarDropdown } from "./dropdown/modus-navbar-dropdown";
/**
 * @slot main - Renders custom main menu content
 * @slot notifications - Renders custom notifications content
 */
export class ModusNavbar {
    constructor() {
        this.SLOT_MAIN = 'main';
        this.SLOT_NOTIFICATIONS = 'notifications';
        this.SLOT_PROFILE_MENU = 'profileMenu';
        this.navAriaLabel = undefined;
        this.apps = undefined;
        this.buttons = undefined;
        this.enableSearchOverlay = undefined;
        this.logoOptions = undefined;
        this.dropdownOptions = undefined;
        this.selectedDropdownItem = undefined;
        this.profileMenuOptions = undefined;
        this.reverse = undefined;
        this.searchTooltip = undefined;
        this.showAppsMenu = undefined;
        this.showMainMenu = undefined;
        this.showNotifications = undefined;
        this.notificationCount = undefined;
        this.showPendoPlaceholder = undefined;
        this.showProfile = true;
        this.showSearch = undefined;
        this.showShadow = undefined;
        this.showHelp = undefined;
        this.helpTooltip = undefined;
        this.helpUrl = undefined;
        this.variant = 'default';
        this.appsMenuVisible = undefined;
        this.mainMenuVisible = undefined;
        this.notificationsMenuVisible = undefined;
        this.profileMenuVisible = undefined;
        this.slots = [];
        this.componentId = createGuid();
        this.searchOverlayVisible = undefined;
        this.openButtonMenuId = undefined;
    }
    async hideMainMenu() {
        this.mainMenuVisible = false;
    }
    documentClickHandler(event) {
        // Individual menus can prevent this listener from closing them.
        if (event.defaultPrevented) {
            return;
        }
        this.hideMenus();
    }
    linkClickHandler(linkClickEvent) {
        linkClickEvent.stopPropagation();
        this.profileMenuLinkClick.emit(linkClickEvent.detail);
    }
    signOutClickHandler(event) {
        this.profileMenuSignOutClick.emit(event);
    }
    componentDidRender() {
        var _a, _b, _c;
        // If there is an error loading the avatar image, remove it so that the initials show.
        (_a = this.profileAvatarElement) === null || _a === void 0 ? void 0 : _a.addEventListener('error', () => {
            this.profileMenuOptions = Object.assign(Object.assign({}, this.profileMenuOptions), { avatarUrl: null });
        });
        const slotElements = this.element.querySelectorAll('[slot]');
        const slotNames = Array.from(slotElements).map((s) => s.slot) || [];
        const isUpdated = ((_b = this.slots) === null || _b === void 0 ? void 0 : _b.length) !== slotNames.length || ((_c = this.slots) === null || _c === void 0 ? void 0 : _c.filter((s) => !slotNames.includes(s)).length);
        if (isUpdated)
            this.slots = [...slotNames];
    }
    appsMenuClickHandler(event) {
        event.preventDefault();
        this.appsMenuToggle();
    }
    appsMenuKeydownHandler(event) {
        if (event.code !== 'Enter') {
            return;
        }
        this.appsMenuToggle();
    }
    appsMenuToggle() {
        if (this.appsMenuVisible) {
            this.appsMenuVisible = false;
        }
        else {
            this.hideMenus();
            this.appsMenuVisible = true;
            this.appsMenuOpen.emit();
        }
    }
    handleAppsMenuAppOpen(event) {
        event.stopPropagation();
        this.appsMenuAppOpen.emit(event.detail);
    }
    mainMenuClickHandler(event) {
        event.preventDefault();
        this.mainMenuToggle(event);
    }
    mainMenuKeydownHandler(event) {
        if (event.code !== 'Enter') {
            return;
        }
        this.mainMenuToggle(event);
    }
    mainMenuToggle(event) {
        var _a;
        if ((_a = this.slots) === null || _a === void 0 ? void 0 : _a.includes(this.SLOT_MAIN)) {
            if (this.mainMenuVisible) {
                this.mainMenuVisible = false;
            }
            else {
                this.hideMenus();
                this.mainMenuVisible = true;
            }
        }
        this.mainMenuClick.emit(event);
    }
    notificationsMenuClickHandler(event) {
        event.preventDefault();
        this.notificationsMenuToggle();
    }
    notificationsMenuKeydownHandler(event) {
        if (event.code !== 'Enter') {
            return;
        }
        this.notificationsMenuToggle();
    }
    notificationsMenuToggle() {
        if (this.notificationsMenuVisible) {
            this.notificationsMenuVisible = false;
        }
        else {
            this.hideMenus();
            this.notificationsMenuVisible = true;
            this.notificationsMenuOpen.emit();
        }
    }
    profileMenuClickHandler(event) {
        event.preventDefault();
        this.profileMenuToggle();
    }
    profileMenuKeydownHandler(event) {
        if (event.code !== 'Enter') {
            return;
        }
        this.profileMenuToggle();
    }
    profileMenuToggle() {
        if (this.profileMenuVisible) {
            this.profileMenuVisible = false;
        }
        else {
            this.hideMenus();
            this.profileMenuVisible = true;
            this.profileMenuOpen.emit();
        }
    }
    hideMenus() {
        this.appsMenuVisible = false;
        this.mainMenuVisible = false;
        this.notificationsMenuVisible = false;
        this.profileMenuVisible = false;
        this.openButtonMenuId = undefined;
    }
    helpMenuClickHandler(event) {
        event.preventDefault();
        this.openHelpMenu();
    }
    helpMenuKeyHandler(event) {
        if (event.code !== 'Enter' && event.code !== 'Space') {
            return;
        }
        this.openHelpMenu();
    }
    openHelpMenu() {
        if (this.helpUrl)
            window.open(this.helpUrl, '_blank');
        this.helpOpen.emit();
    }
    searchMenuClickHandler(event) {
        event.preventDefault();
        if (this.enableSearchOverlay) {
            this.searchOverlayVisible = true;
        }
        else {
            this.searchMenuClick.emit();
        }
    }
    searchMenuKeydownHandler(event) {
        if (event.code !== 'Enter') {
            return;
        }
        if (this.enableSearchOverlay) {
            this.searchOverlayVisible = true;
        }
        else {
            this.searchMenuClick.emit();
        }
    }
    searchOverlayCloseEventHandler() {
        this.searchOverlayVisible = false;
        setTimeout(() => {
            var _a;
            (_a = this.searchButton) === null || _a === void 0 ? void 0 : _a.focus();
        }, 100);
    }
    showButtonMenuById(id) {
        this.buttonClick.emit(id);
        const isDynamicButtonSlotOpen = this.openButtonMenuId === id;
        this.hideMenus();
        if (this.openButtonMenuId !== id && !isDynamicButtonSlotOpen) {
            this.openButtonMenuId = id;
        }
    }
    buttonMenuClickHandler(event, button) {
        event.preventDefault();
        this.showButtonMenuById(button.id);
    }
    buttonMenuKeyDownHandler(event, button) {
        if (event.code == 'Enter' || event.code == 'Space') {
            event.preventDefault();
            this.showButtonMenuById(button.id);
        }
        if (event.code == 'Escape') {
            this.hideMenus();
        }
    }
    dropdownItemSelectHandler(item) {
        this.selectedDropdownItem = item;
        this.dropdownItemSelect.emit(item);
    }
    getNotificationCount() {
        if (!this.notificationCount) {
            return;
        }
        const counter = this.notificationCount;
        if (counter < 1) {
            return '1';
        }
        if (counter > 99) {
            return '99+';
        }
        return this.notificationCount.toString();
    }
    render() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
        const direction = this.reverse ? 'reverse' : '';
        const shadow = this.showShadow ? 'shadow' : '';
        const variant = `${this.variant === 'default' ? '' : 'nav-' + this.variant}`;
        const sortedButtonList = (_a = this.buttons) === null || _a === void 0 ? void 0 : _a.sort((a, b) => a.orderIndex - b.orderIndex);
        const overlay = this.searchOverlayVisible && (h("modus-navbar-search-overlay", { key: 'bd969fe20f191284b53935b949aedcfa3ebb7156', class: "overlay", onClose: () => this.searchOverlayCloseEventHandler(), onSearch: (event) => this.searchChange.emit(event.detail) }));
        const counterValue = this.getNotificationCount();
        return (h(Host, { key: '16b7886f051007cf6fa7aa4ee766e76c948b9120', id: this.componentId }, h("nav", { key: '2ebb2d566111762b18b60696719a6c41459cfb13', class: `${direction} ${shadow} ${variant}`, "aria-label": this.navAriaLabel }, !this.searchOverlayVisible && (h(Fragment, null, h("div", { class: `left ${direction}` }, this.showMainMenu && (h("div", { class: "navbar-button main-menu-button" }, h("span", { class: "navbar-button-icon", role: "button", "aria-label": "Toggle navigation", onKeyDown: (event) => this.mainMenuKeydownHandler(event), tabIndex: 0 }, h(IconMenu, { size: "24", pressed: this.mainMenuVisible, onClick: (event) => this.mainMenuClickHandler(event) })))), this.mainMenuVisible && (h("modus-navbar-main-menu", { navbarId: this.componentId }, h("slot", { name: this.SLOT_MAIN }))), this.logoOptions && (h("div", { class: "navbar-logo" }, h(ModusNavbarProductLogo, { logos: this.logoOptions, onClick: (event) => this.productLogoClick.emit(event) }))), this.dropdownOptions && (h(ModusNavbarDropdown, { itemSelect: (item) => this.dropdownItemSelectHandler(item), options: this.dropdownOptions, reverse: this.reverse, selectedItem: this.selectedDropdownItem }))), h("div", { class: `right ${direction}` }, this.showSearch && (h("div", { class: "navbar-button search", "data-test-id": "search-menu" }, h("modus-tooltip", { text: (_b = this.searchTooltip) === null || _b === void 0 ? void 0 : _b.text, "aria-label": ((_c = this.searchTooltip) === null || _c === void 0 ? void 0 : _c.ariaLabel) || undefined, position: "bottom" }, h("span", { class: "navbar-button-icon", "aria-label": "Search", role: "button", onKeyDown: (event) => this.searchMenuKeydownHandler(event), tabIndex: 0, id: "search-button", ref: (el) => (this.searchButton = el) }, h(IconSearch, { size: "24", onClick: (event) => this.searchMenuClickHandler(event), pressed: this.searchOverlayVisible }))))), h(ModusNavbarButtonList, { buttons: sortedButtonList, reverse: this.reverse, openButtonMenuId: this.openButtonMenuId, onKeyDown: (event, button) => this.buttonMenuKeyDownHandler(event, button), onClick: (event, button) => this.buttonMenuClickHandler(event, button) }), this.showNotifications && (h("div", { class: "navbar-button", "data-test-id": "notifications-menu" }, h("span", { class: "navbar-button-icon", role: "button", "aria-label": "Notifications", onKeyDown: (event) => this.notificationsMenuKeydownHandler(event), tabIndex: 0 }, h(IconNotifications, { size: "24", onClick: (event) => this.notificationsMenuClickHandler(event), pressed: this.notificationsMenuVisible }), counterValue && (h("modus-badge", { class: "badge", color: "danger", size: "medium", type: "counter", "aria-label": "Notification badge" }, counterValue))), this.notificationsMenuVisible && (h("modus-navbar-notifications-menu", { reverse: this.reverse }, h("slot", { name: this.SLOT_NOTIFICATIONS }))))), this.showPendoPlaceholder && h("div", { class: 'pendo-placeholder' }), this.showHelp && (h("div", { class: "navbar-button", "data-test-id": "help-menu" }, h("modus-tooltip", { text: (_d = this.helpTooltip) === null || _d === void 0 ? void 0 : _d.text, "aria-label": ((_e = this.helpTooltip) === null || _e === void 0 ? void 0 : _e.ariaLabel) || undefined, position: "bottom" }, h("span", { class: "navbar-button-icon", role: "button", onKeyDown: (event) => this.helpMenuKeyHandler(event), "aria-label": "Help", onClick: (event) => this.helpMenuClickHandler(event), tabIndex: 0 }, h(IconHelp, { size: "24" }))))), this.showAppsMenu && (h("div", { class: "navbar-button", "data-test-id": "apps-menu" }, h("span", { class: "navbar-button-icon", role: "button", "aria-label": "Apps", onKeyDown: (event) => this.appsMenuKeydownHandler(event), tabIndex: 0 }, h(IconApps, { size: "24", pressed: this.appsMenuVisible, onClick: (event) => this.appsMenuClickHandler(event) })), this.appsMenuVisible && (h("modus-navbar-apps-menu", { apps: this.apps, reverse: this.reverse, onAppOpen: (event) => this.handleAppsMenuAppOpen(event) })))), this.showProfile && (h("div", { class: "profile-menu" }, h("modus-tooltip", { text: (_g = (_f = this.profileMenuOptions) === null || _f === void 0 ? void 0 : _f.tooltip) === null || _g === void 0 ? void 0 : _g.text, "aria-label": ((_j = (_h = this.profileMenuOptions) === null || _h === void 0 ? void 0 : _h.tooltip) === null || _j === void 0 ? void 0 : _j.ariaLabel) || undefined, disabled: this.profileMenuVisible, position: "bottom" }, ((_k = this.profileMenuOptions) === null || _k === void 0 ? void 0 : _k.avatarUrl) ? (h("img", { class: "avatar", height: "32", src: (_l = this.profileMenuOptions) === null || _l === void 0 ? void 0 : _l.avatarUrl, alt: "Modus navbar profile menu avatar", onClick: (event) => this.profileMenuClickHandler(event), onKeyDown: (event) => this.profileMenuKeydownHandler(event), tabIndex: 0, ref: (el) => (this.profileAvatarElement = el) })) : (h("span", { class: "initials", onClick: (event) => this.profileMenuClickHandler(event), onKeyDown: (event) => this.profileMenuKeydownHandler(event), tabIndex: 0 }, (_m = this.profileMenuOptions) === null || _m === void 0 ? void 0 : _m.initials))), this.profileMenuVisible && (h("modus-navbar-profile-menu", { "avatar-url": (_o = this.profileMenuOptions) === null || _o === void 0 ? void 0 : _o.avatarUrl, email: (_p = this.profileMenuOptions) === null || _p === void 0 ? void 0 : _p.email, initials: (_q = this.profileMenuOptions) === null || _q === void 0 ? void 0 : _q.initials, links: (_r = this.profileMenuOptions) === null || _r === void 0 ? void 0 : _r.links, reverse: this.reverse, username: (_s = this.profileMenuOptions) === null || _s === void 0 ? void 0 : _s.username, variant: this.variant, "sign-out-text": (_t = this.profileMenuOptions) === null || _t === void 0 ? void 0 : _t.signOutText }, h("slot", { name: this.SLOT_PROFILE_MENU })))))))), overlay)));
    }
    static get is() { return "modus-navbar"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["modus-navbar.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modus-navbar.css"]
        };
    }
    static get properties() {
        return {
            "navAriaLabel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "(optional) The navbar's aria-label."
                },
                "attribute": "nav-aria-label",
                "reflect": false
            },
            "apps": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "ModusNavbarApp[]",
                    "resolved": "ModusNavbarApp[]",
                    "references": {
                        "ModusNavbarApp": {
                            "location": "import",
                            "path": "./apps-menu/modus-navbar-apps-menu",
                            "id": "src/components/modus-navbar/apps-menu/modus-navbar-apps-menu.tsx::ModusNavbarApp"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The apps to render in the apps menu."
                }
            },
            "buttons": {
                "type": "unknown",
                "mutable": true,
                "complexType": {
                    "original": "ModusNavbarButton[]",
                    "resolved": "ModusNavbarButton[]",
                    "references": {
                        "ModusNavbarButton": {
                            "location": "import",
                            "path": "./modus-navbar.models",
                            "id": "src/components/modus-navbar/modus-navbar.models.ts::ModusNavbarButton"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The buttons to render in the Navbar."
                }
            },
            "enableSearchOverlay": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether to show search overlay or not."
                },
                "attribute": "enable-search-overlay",
                "reflect": false
            },
            "logoOptions": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "ModusNavbarLogoOptions",
                    "resolved": "ModusNavbarLogoOptions",
                    "references": {
                        "ModusNavbarLogoOptions": {
                            "location": "import",
                            "path": "./modus-navbar.models",
                            "id": "src/components/modus-navbar/modus-navbar.models.ts::ModusNavbarLogoOptions"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Set the primary logo to display when the screen size is greater than 576 pixels, and the secondary logo to display when the screen size is less than or equal to 576 pixels."
                }
            },
            "dropdownOptions": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "ModusNavbarDropdownOptions",
                    "resolved": "ModusNavbarDropdownOptions",
                    "references": {
                        "ModusNavbarDropdownOptions": {
                            "location": "import",
                            "path": "./modus-navbar.models",
                            "id": "src/components/modus-navbar/modus-navbar.models.ts::ModusNavbarDropdownOptions"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Dropdown options."
                }
            },
            "selectedDropdownItem": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "ModusNavbarDropdownItem",
                    "resolved": "ModusNavbarDropdownItem",
                    "references": {
                        "ModusNavbarDropdownItem": {
                            "location": "import",
                            "path": "./modus-navbar.models",
                            "id": "src/components/modus-navbar/modus-navbar.models.ts::ModusNavbarDropdownItem"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The selected dropdown item."
                }
            },
            "profileMenuOptions": {
                "type": "unknown",
                "mutable": true,
                "complexType": {
                    "original": "ModusProfileMenuOptions",
                    "resolved": "ModusProfileMenuOptions",
                    "references": {
                        "ModusProfileMenuOptions": {
                            "location": "import",
                            "path": "./modus-navbar.models",
                            "id": "src/components/modus-navbar/modus-navbar.models.ts::ModusProfileMenuOptions"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(required) Profile menu options."
                }
            },
            "reverse": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether to display the navbar items in reverse order."
                },
                "attribute": "reverse",
                "reflect": false
            },
            "searchTooltip": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "ModusNavbarTooltip",
                    "resolved": "ModusNavbarTooltip",
                    "references": {
                        "ModusNavbarTooltip": {
                            "location": "import",
                            "path": "./modus-navbar.models",
                            "id": "src/components/modus-navbar/modus-navbar.models.ts::ModusNavbarTooltip"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Search tooltip."
                }
            },
            "showAppsMenu": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether to show the apps menu."
                },
                "attribute": "show-apps-menu",
                "reflect": false
            },
            "showMainMenu": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether to show the main menu."
                },
                "attribute": "show-main-menu",
                "reflect": false
            },
            "showNotifications": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether to show notifications."
                },
                "attribute": "show-notifications",
                "reflect": false
            },
            "notificationCount": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether to show badge on top of notification"
                },
                "attribute": "notification-count",
                "reflect": false
            },
            "showPendoPlaceholder": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether to show the placeholder for Pendo."
                },
                "attribute": "show-pendo-placeholder",
                "reflect": false
            },
            "showProfile": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether to show profile.  *"
                },
                "attribute": "show-profile",
                "reflect": false,
                "defaultValue": "true"
            },
            "showSearch": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether to show search."
                },
                "attribute": "show-search",
                "reflect": false
            },
            "showShadow": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether to show a shadow under the navbar."
                },
                "attribute": "show-shadow",
                "reflect": false
            },
            "showHelp": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether to show help."
                },
                "attribute": "show-help",
                "reflect": false
            },
            "helpTooltip": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "ModusNavbarTooltip",
                    "resolved": "ModusNavbarTooltip",
                    "references": {
                        "ModusNavbarTooltip": {
                            "location": "import",
                            "path": "./modus-navbar.models",
                            "id": "src/components/modus-navbar/modus-navbar.models.ts::ModusNavbarTooltip"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Help tooltip."
                }
            },
            "helpUrl": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Help URL."
                },
                "attribute": "help-url",
                "reflect": false
            },
            "variant": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'default' | 'blue'",
                    "resolved": "\"blue\" | \"default\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Color variants for NavBar."
                },
                "attribute": "variant",
                "reflect": false,
                "defaultValue": "'default'"
            }
        };
    }
    static get states() {
        return {
            "appsMenuVisible": {},
            "mainMenuVisible": {},
            "notificationsMenuVisible": {},
            "profileMenuVisible": {},
            "slots": {},
            "componentId": {},
            "searchOverlayVisible": {},
            "openButtonMenuId": {}
        };
    }
    static get events() {
        return [{
                "method": "appsMenuOpen",
                "name": "appsMenuOpen",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires when the apps menu opens."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }, {
                "method": "appsMenuAppOpen",
                "name": "appsMenuAppOpen",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires when an apps menu app opens."
                },
                "complexType": {
                    "original": "ModusNavbarApp",
                    "resolved": "ModusNavbarApp",
                    "references": {
                        "ModusNavbarApp": {
                            "location": "import",
                            "path": "./apps-menu/modus-navbar-apps-menu",
                            "id": "src/components/modus-navbar/apps-menu/modus-navbar-apps-menu.tsx::ModusNavbarApp"
                        }
                    }
                }
            }, {
                "method": "buttonClick",
                "name": "buttonClick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires when a button in the custom button list is clicked."
                },
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                }
            }, {
                "method": "helpOpen",
                "name": "helpOpen",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires when the help link opens."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }, {
                "method": "dropdownItemSelect",
                "name": "dropdownItemSelect",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires when a dropdown item is selected *"
                },
                "complexType": {
                    "original": "ModusNavbarDropdownItem",
                    "resolved": "ModusNavbarDropdownItem",
                    "references": {
                        "ModusNavbarDropdownItem": {
                            "location": "import",
                            "path": "./modus-navbar.models",
                            "id": "src/components/modus-navbar/modus-navbar.models.ts::ModusNavbarDropdownItem"
                        }
                    }
                }
            }, {
                "method": "mainMenuClick",
                "name": "mainMenuClick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires on main menu click."
                },
                "complexType": {
                    "original": "KeyboardEvent | MouseEvent",
                    "resolved": "KeyboardEvent | MouseEvent",
                    "references": {
                        "KeyboardEvent": {
                            "location": "global",
                            "id": "global::KeyboardEvent"
                        },
                        "MouseEvent": {
                            "location": "global",
                            "id": "global::MouseEvent"
                        }
                    }
                }
            }, {
                "method": "notificationsMenuOpen",
                "name": "notificationsMenuOpen",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires when the notifications menu opens."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }, {
                "method": "productLogoClick",
                "name": "productLogoClick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires on product logo click."
                },
                "complexType": {
                    "original": "MouseEvent",
                    "resolved": "MouseEvent",
                    "references": {
                        "MouseEvent": {
                            "location": "global",
                            "id": "global::MouseEvent"
                        }
                    }
                }
            }, {
                "method": "profileMenuLinkClick",
                "name": "profileMenuLinkClick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires on profile menu link click."
                },
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                }
            }, {
                "method": "profileMenuOpen",
                "name": "profileMenuOpen",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires when the profile menu opens."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }, {
                "method": "profileMenuSignOutClick",
                "name": "profileMenuSignOutClick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires on profile menu sign out click."
                },
                "complexType": {
                    "original": "KeyboardEvent | MouseEvent",
                    "resolved": "KeyboardEvent | MouseEvent",
                    "references": {
                        "KeyboardEvent": {
                            "location": "global",
                            "id": "global::KeyboardEvent"
                        },
                        "MouseEvent": {
                            "location": "global",
                            "id": "global::MouseEvent"
                        }
                    }
                }
            }, {
                "method": "searchChange",
                "name": "searchChange",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires on search value change."
                },
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                }
            }, {
                "method": "searchMenuClick",
                "name": "searchMenuClick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires on search button click."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }];
    }
    static get methods() {
        return {
            "hideMainMenu": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "element"; }
    static get listeners() {
        return [{
                "name": "click",
                "method": "documentClickHandler",
                "target": "document",
                "capture": false,
                "passive": false
            }, {
                "name": "linkClick",
                "method": "linkClickHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "signOutClick",
                "method": "signOutClickHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
}
