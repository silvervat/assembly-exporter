// eslint-disable-next-line
import { h, Host } from "@stencil/core";
import { DEFAULT_SELECTION_TYPE, SINGLE_SELECTION_TYPE, MULTIPLE_SELECTION_TYPE } from "./modus-button-group.constants";
export class ModusButtonGroup {
    constructor() {
        /** Array to store selected buttons */
        this.selectedButtons = [];
        this.ariaDisabled = undefined;
        this.ariaLabel = undefined;
        this.buttonStyle = 'outline';
        this.color = 'primary';
        this.disabled = undefined;
        this.selectionType = DEFAULT_SELECTION_TYPE;
        this.size = 'medium';
    }
    selectionTypeChanged(newValue) {
        if (newValue === DEFAULT_SELECTION_TYPE) {
            this.selectedButtons.forEach((button) => button.setActive(false));
            this.selectedButtons = [];
        }
    }
    disabledChanged() {
        this.setupButtons(true);
    }
    sizeChanged() {
        this.setupButtons();
    }
    componentWillLoad() {
        this.setupButtons();
    }
    handleSlotChange() {
        this.setupButtons();
    }
    handleButtonClick(event) {
        const clickedButton = event.target;
        if (this.selectionType === DEFAULT_SELECTION_TYPE) {
            return;
        }
        switch (this.selectionType) {
            case SINGLE_SELECTION_TYPE:
                this.toggleSingleSelect(clickedButton);
                break;
            case MULTIPLE_SELECTION_TYPE:
                this.toggleMultiSelect(clickedButton);
                break;
        }
        this.buttonSelectionChange.emit(this.selectedButtons);
        this.buttonGroupClick.emit({ button: clickedButton, isSelected: this.selectedButtons.includes(clickedButton) });
    }
    setupButtons(reset) {
        const buttons = this.host.querySelectorAll('modus-button');
        this.renderButtons(buttons, reset);
    }
    renderButtons(buttons, reset) {
        const buttonType = this.determineButtonType();
        let foundSelected = false;
        buttons.forEach((button) => {
            if (reset) {
                button.ariaDisabled = this.ariaDisabled;
                button.disabled = this.disabled;
            }
            else {
                button.ariaDisabled = button.ariaDisabled || this.ariaDisabled;
                button.disabled = button.disabled || this.disabled;
            }
            button.buttonStyle = this.buttonStyle;
            button.color = this.color;
            button.size = this.size;
            button.type = buttonType;
            if (button.hasAttribute('selected') && !foundSelected && this.selectionType == SINGLE_SELECTION_TYPE) {
                button.setActive(true);
                this.selectedButtons.push(button);
                foundSelected = true;
            }
            else if (button.hasAttribute('selected') && this.selectionType == MULTIPLE_SELECTION_TYPE) {
                button.setActive(true);
                if (!this.selectedButtons.includes(button)) {
                    this.selectedButtons.push(button);
                }
            }
        });
    }
    determineButtonType() {
        return this.selectionType === DEFAULT_SELECTION_TYPE ? 'button' : 'toggle';
    }
    toggleMultiSelect(clickedButton) {
        const isSelected = this.selectedButtons.includes(clickedButton);
        clickedButton.setActive(!isSelected);
        this.selectedButtons = isSelected
            ? this.selectedButtons.filter((button) => button !== clickedButton)
            : [...this.selectedButtons, clickedButton];
    }
    toggleSingleSelect(clickedButton) {
        const wasActive = this.selectedButtons.includes(clickedButton);
        this.selectedButtons.forEach((button) => button.setActive(false));
        this.selectedButtons = wasActive ? [] : [clickedButton];
        if (!wasActive)
            clickedButton.setActive(true);
    }
    render() {
        return (h(Host, { key: '28d9db4ebc26a82398ba1f87bba763d4bc136e6b', "aria-label": this.ariaLabel, "aria-disabled": this.ariaDisabled ? this.ariaDisabled : this.disabled ? 'true' : undefined, role: "group" }, h("slot", { key: '510059102a090f5eb28ac476b534cfcc3d6c1f4c' })));
    }
    static get is() { return "modus-button-group"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["modus-button-group.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modus-button-group.css"]
        };
    }
    static get properties() {
        return {
            "ariaDisabled": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string | null",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The button group's aria-disabled state."
                },
                "attribute": "aria-disabled",
                "reflect": false
            },
            "ariaLabel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string | null",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The button group's aria-label."
                },
                "attribute": "aria-label",
                "reflect": false
            },
            "buttonStyle": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "ButtonStyle",
                    "resolved": "\"borderless\" | \"fill\" | \"outline\"",
                    "references": {
                        "ButtonStyle": {
                            "location": "import",
                            "path": "../modus-button/modus-button.models",
                            "id": "src/components/modus-button/modus-button.models.ts::ButtonStyle"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The style of the buttons in the group"
                },
                "attribute": "button-style",
                "reflect": false,
                "defaultValue": "'outline'"
            },
            "color": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "ButtonColor",
                    "resolved": "\"danger\" | \"primary\" | \"secondary\" | \"tertiary\"",
                    "references": {
                        "ButtonColor": {
                            "location": "import",
                            "path": "../modus-button/modus-button.models",
                            "id": "src/components/modus-button/modus-button.models.ts::ButtonColor"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The color of the buttons in the group"
                },
                "attribute": "color",
                "reflect": false,
                "defaultValue": "'primary'"
            },
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Disables the button group."
                },
                "attribute": "disabled",
                "reflect": true
            },
            "selectionType": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "ButtonGroupSelectionType",
                    "resolved": "\"multiple\" | \"none\" | \"single\"",
                    "references": {
                        "ButtonGroupSelectionType": {
                            "location": "import",
                            "path": "./modus-button-group.models",
                            "id": "src/components/modus-button-group/modus-button-group.models.tsx::ButtonGroupSelectionType"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The selection type of buttons"
                },
                "attribute": "selection-type",
                "reflect": false,
                "defaultValue": "DEFAULT_SELECTION_TYPE"
            },
            "size": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "ButtonSize",
                    "resolved": "\"large\" | \"medium\" | \"small\"",
                    "references": {
                        "ButtonSize": {
                            "location": "import",
                            "path": "../modus-button/modus-button.models",
                            "id": "src/components/modus-button/modus-button.models.ts::ButtonSize"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The size of the buttons"
                },
                "attribute": "size",
                "reflect": false,
                "defaultValue": "'medium'"
            }
        };
    }
    static get events() {
        return [{
                "method": "buttonGroupClick",
                "name": "buttonGroupClick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Event emitted when a button is clicked"
                },
                "complexType": {
                    "original": "unknown",
                    "resolved": "unknown",
                    "references": {}
                }
            }, {
                "method": "buttonSelectionChange",
                "name": "buttonSelectionChange",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Event emitted when the selection changes"
                },
                "complexType": {
                    "original": "HTMLModusButtonElement[]",
                    "resolved": "HTMLModusButtonElement[]",
                    "references": {
                        "HTMLModusButtonElement": {
                            "location": "global",
                            "id": "global::HTMLModusButtonElement"
                        }
                    }
                }
            }];
    }
    static get elementRef() { return "host"; }
    static get watchers() {
        return [{
                "propName": "selectionType",
                "methodName": "selectionTypeChanged"
            }, {
                "propName": "disabled",
                "methodName": "disabledChanged"
            }, {
                "propName": "buttonStyle",
                "methodName": "sizeChanged"
            }, {
                "propName": "color",
                "methodName": "sizeChanged"
            }, {
                "propName": "size",
                "methodName": "sizeChanged"
            }];
    }
    static get listeners() {
        return [{
                "name": "slotchange",
                "method": "handleSlotChange",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "buttonClick",
                "method": "handleButtonClick",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
}
