import { newE2EPage } from "@stencil/core/testing";
describe('modus-button-group', () => {
    it('renders', async () => {
        const page = await newE2EPage();
        await page.setContent('<modus-button-group role="group"></modus-button-group>');
        const element = await page.find('modus-button-group');
        expect(element).toHaveClass('hydrated');
    });
    it('renders buttons length in Button Group', async () => {
        const page = await newE2EPage();
        await page.setContent(`
      <modus-button-group role="group">
        <modus-button>Button 1</modus-button>
        <modus-button>Button 2</modus-button>
      </modus-button-group>
    `);
        const buttons = await page.findAll('modus-button');
        expect(buttons.length).toBe(2);
    });
    it('renders buttons with primary variant', async () => {
        var _a;
        const page = await newE2EPage();
        await page.setContent(`
      <modus-button-group role="group">
        <modus-button>Button 1</modus-button>
        <modus-button>Button 2</modus-button>
      </modus-button-group>
    `);
        await page.waitForChanges();
        const buttongroup = await page.findAll('modus-button');
        expect(buttongroup).toBeTruthy();
        for (let i = 0; i < 2; i++) {
            const button = await ((_a = buttongroup[i]) === null || _a === void 0 ? void 0 : _a.shadowRoot.querySelector('button'));
            expect(button).toBeTruthy();
            expect(button).toHaveClass('color-primary');
        }
    });
    it('does not mark buttons active for default selectionType', async () => {
        var _a, _b;
        const page = await newE2EPage();
        await page.setContent(`
      <modus-button-group role="group">
        <modus-button>Button 1</modus-button>
        <modus-button>Button 2</modus-button>
      </modus-button-group>
    `);
        await page.waitForChanges();
        const buttonGroup = await page.find('modus-button-group');
        expect(buttonGroup).toBeTruthy();
        const buttons = await page.findAll('modus-button');
        expect(buttons).toBeTruthy();
        buttons[0].click();
        await page.waitForChanges();
        for (let i = 0; i < buttons.length; i++) {
            const button = await ((_a = buttons[i]) === null || _a === void 0 ? void 0 : _a.shadowRoot.querySelector('button'));
            expect(button).toBeTruthy();
            expect(button).not.toHaveClass('active');
        }
        buttons[1].click();
        await page.waitForChanges();
        for (let i = 0; i < buttons.length; i++) {
            const button = await ((_b = buttons[i]) === null || _b === void 0 ? void 0 : _b.shadowRoot.querySelector('button'));
            expect(button).toBeTruthy();
            expect(button).not.toHaveClass('active');
        }
    });
    it('handles single selectionType correctly', async () => {
        var _a, _b, _c, _d, _e, _f;
        const page = await newE2EPage();
        await page.setContent(`
      <modus-button-group selection-type="single" role="group">
        <modus-button>Button 1</modus-button>
        <modus-button>Button 2</modus-button>
        <modus-button>Button 3</modus-button>
      </modus-button-group>
    `);
        await page.waitForChanges();
        const buttonGroup = await page.find('modus-button-group');
        expect(buttonGroup).toBeTruthy();
        const buttons = await page.findAll('modus-button');
        expect(buttons).toBeTruthy();
        buttons[0].click();
        const emittedButtons = await buttonGroup.spyOnEvent('buttonSelectionChange');
        await page.waitForChanges();
        expect(emittedButtons).toHaveReceivedEventTimes(1);
        expect((_a = emittedButtons.events[0]) === null || _a === void 0 ? void 0 : _a.detail.length).toBe(1);
        expect(emittedButtons.length).toBe(1);
        const button = await ((_b = buttons[0]) === null || _b === void 0 ? void 0 : _b.shadowRoot.querySelector('button'));
        expect(button).toBeTruthy();
        expect(button).toHaveClass('active');
        for (let i = 1; i < buttons.length; i++) {
            const button = await ((_c = buttons[i]) === null || _c === void 0 ? void 0 : _c.shadowRoot.querySelector('button'));
            expect(button).toBeTruthy();
            expect(button).not.toHaveClass('active');
        }
        buttons[1].click();
        await page.waitForChanges();
        expect(emittedButtons).toHaveReceivedEventTimes(2);
        expect((_d = emittedButtons.events[1]) === null || _d === void 0 ? void 0 : _d.detail.length).toBe(1);
        const button1 = await ((_e = buttons[1]) === null || _e === void 0 ? void 0 : _e.shadowRoot.querySelector('button'));
        expect(button1).toBeTruthy();
        expect(button1).toHaveClass('active');
        const indicesToCheck = [0, 2];
        for (const i of indicesToCheck) {
            const button = await ((_f = buttons[i]) === null || _f === void 0 ? void 0 : _f.shadowRoot.querySelector('button'));
            expect(button).toBeTruthy();
            expect(button).not.toHaveClass('active');
        }
    });
    it('handles multiple selectionType correctly', async () => {
        var _a, _b, _c, _d, _e, _f;
        const page = await newE2EPage();
        await page.setContent(`
      <modus-button-group selection-type="multiple" role="group">
        <modus-button>Button 1</modus-button>
        <modus-button>Button 2</modus-button>
        <modus-button>Button 3</modus-button>
      </modus-button-group>
    `);
        await page.waitForChanges();
        const buttonGroup = await page.find('modus-button-group');
        expect(buttonGroup).toBeTruthy();
        const buttons = await page.findAll('modus-button');
        expect(buttons).toBeTruthy();
        buttons[0].click();
        const emittedButtons = await buttonGroup.spyOnEvent('buttonSelectionChange');
        await page.waitForChanges();
        expect(emittedButtons).toHaveReceivedEventTimes(1);
        expect((_a = emittedButtons.events[0]) === null || _a === void 0 ? void 0 : _a.detail.length).toBe(1);
        expect(emittedButtons.length).toBe(1);
        const button = await ((_b = buttons[0]) === null || _b === void 0 ? void 0 : _b.shadowRoot.querySelector('button'));
        expect(button).toBeTruthy();
        expect(button).toHaveClass('active');
        for (let i = 1; i < buttons.length; i++) {
            const button = await ((_c = buttons[i]) === null || _c === void 0 ? void 0 : _c.shadowRoot.querySelector('button'));
            expect(button).toBeTruthy();
            expect(button).not.toHaveClass('active');
        }
        buttons[1].click();
        await page.waitForChanges();
        expect(emittedButtons).toHaveReceivedEventTimes(2);
        expect((_d = emittedButtons.events[1]) === null || _d === void 0 ? void 0 : _d.detail.length).toBe(2);
        const indicesToCheck = [0, 1];
        for (const i of indicesToCheck) {
            const button = await ((_e = buttons[i]) === null || _e === void 0 ? void 0 : _e.shadowRoot.querySelector('button'));
            expect(button).toBeTruthy();
            expect(button).toHaveClass('active');
        }
        const button1 = await ((_f = buttons[2]) === null || _f === void 0 ? void 0 : _f.shadowRoot.querySelector('button'));
        expect(button1).toBeTruthy();
        expect(button1).not.toHaveClass('active');
    });
    it('disables all buttons when the group is disabled', async () => {
        const page = await newE2EPage();
        await page.setContent(`
      <modus-button-group disabled role="group">
        <modus-button>Button 1</modus-button>
        <modus-button>Button 2</modus-button>
      </modus-button-group>
    `);
        await page.waitForChanges();
        const buttons = await page.findAll('modus-button');
        for (const button of buttons) {
            const buttonDisabled = await button.getProperty('disabled');
            expect(buttonDisabled).toBe(true);
        }
    });
    it('reflects style changes to all buttons', async () => {
        const page = await newE2EPage();
        await page.setContent(`
      <modus-button-group button-style="solid" role="group">
        <modus-button>Button 1</modus-button>
        <modus-button>Button 2</modus-button>
      </modus-button-group>
    `);
        await page.waitForChanges();
        const buttonGroup = await page.find('modus-button-group');
        expect(buttonGroup.getAttribute('button-style')).toBe('solid');
        const buttons = await page.findAll('modus-button');
        for (let i = 0; i < buttons.length; i++) {
            expect(await buttons[i].getProperty('buttonStyle')).toBe('solid');
        }
        buttonGroup.setProperty('buttonStyle', 'outline');
        await page.waitForChanges();
        for (let i = 0; i < buttons.length; i++) {
            expect(await buttons[i].getProperty('buttonStyle')).toBe('outline');
        }
    });
    it('sets aria-label and aria-disabled correctly', async () => {
        const page = await newE2EPage();
        await page.setContent(`
      <modus-button-group aria-label="Group Label" aria-disabled="true" role="group">
        <modus-button>Button 1</modus-button>
      </modus-button-group>
    `);
        await page.waitForChanges();
        const buttonGroup = await page.find('modus-button-group');
        expect(buttonGroup.getAttribute('aria-label')).toBe('Group Label');
        expect(buttonGroup.getAttribute('aria-disabled')).toBe('true');
    });
});
