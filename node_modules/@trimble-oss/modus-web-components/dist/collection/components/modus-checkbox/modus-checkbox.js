import { h, // eslint-disable-line @typescript-eslint/no-unused-vars
 } from "@stencil/core";
import { generateElementId } from "../../utils/utils";
export class ModusCheckbox {
    constructor() {
        this.checkBoxId = generateElementId() + '_checkbox';
        this.ariaLabel = undefined;
        this.checked = undefined;
        this.disabled = undefined;
        this.indeterminate = undefined;
        this.label = undefined;
        this.stopPropagation = undefined;
        this.size = 'medium';
    }
    elementKeydownHandler(event) {
        switch (event.code) {
            case 'Enter':
                this.handleCheckboxClick(event);
                break;
            case 'Space':
                this.handleCheckboxClick(event);
                break;
        }
    }
    /** Focus the checkbox input */
    async focusCheckbox() {
        this.checkboxInput.focus();
    }
    componentDidRender() {
        this.checkboxInput.indeterminate = this.indeterminate;
    }
    handleCheckboxClick(event) {
        if (this.disabled) {
            return;
        }
        this.updateChecked();
        this.checkboxClick.emit(this.checked);
        if (this.stopPropagation) {
            event.stopPropagation();
            event.preventDefault();
        }
    }
    updateChecked() {
        this.checked = !this.checked;
        this.checkboxInput.checked = this.checked;
        this.indeterminate = false;
    }
    render() {
        const className = `modus-checkbox ${this.size === 'small' ? 'small' : ''}`;
        return (h("div", { key: 'a44796ddf538bfebb6a586393b928a57f5ee793a', class: className }, h("input", { key: '62eec3099b932d9fc161bec37c81b3a6b0822c13', class: `checkbox ${this.size === 'small' ? 'small' : ''} ${this.disabled ? 'disabled' : ''}`, "aria-checked": this.checked ? 'true' : 'false', "aria-disabled": this.disabled ? 'true' : undefined, "aria-label": this.ariaLabel || undefined, checked: this.checked, disabled: this.disabled, id: this.checkBoxId, ref: (el) => (this.checkboxInput = el), onChange: (event) => {
                this.handleCheckboxClick(event);
            }, type: "checkbox" }), this.label ? (h("label", { htmlFor: this.checkBoxId, class: ` ${this.disabled ? 'disabled' : ''} ${this.size === 'small' ? 'small' : ''}` }, this.label)) : null));
    }
    static get is() { return "modus-checkbox"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["modus-checkbox.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modus-checkbox.css"]
        };
    }
    static get properties() {
        return {
            "ariaLabel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string | null",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The checkbox's aria-label."
                },
                "attribute": "aria-label",
                "reflect": false
            },
            "checked": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether the checkbox is checked."
                },
                "attribute": "checked",
                "reflect": false
            },
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether the checkbox is disabled."
                },
                "attribute": "disabled",
                "reflect": false
            },
            "indeterminate": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether the checkbox is indeterminate."
                },
                "attribute": "indeterminate",
                "reflect": false
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The checkbox label."
                },
                "attribute": "label",
                "reflect": false
            },
            "stopPropagation": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) If you wish to prevent the propagation of your event, you may opt for this."
                },
                "attribute": "stop-propagation",
                "reflect": false
            },
            "size": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'small' | 'medium'",
                    "resolved": "\"medium\" | \"small\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The size of the checkbox."
                },
                "attribute": "size",
                "reflect": false,
                "defaultValue": "'medium'"
            }
        };
    }
    static get events() {
        return [{
                "method": "checkboxClick",
                "name": "checkboxClick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires on checkbox click."
                },
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                }
            }];
    }
    static get methods() {
        return {
            "focusCheckbox": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Focus the checkbox input",
                    "tags": []
                }
            }
        };
    }
    static get listeners() {
        return [{
                "name": "keydown",
                "method": "elementKeydownHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
}
