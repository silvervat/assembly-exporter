// eslint-disable-next-line
import { Fragment, h } from "@stencil/core";
import { ModusIconMap } from "../../icons/ModusIconMap";
export class ModusTabs {
    constructor() {
        this.classBySize = new Map([
            ['medium', 'medium'],
            ['small', 'small'],
        ]);
        this.fullWidth = false;
        this.ariaLabel = undefined;
        this.size = 'medium';
        this.tabs = [];
    }
    handleKeyDown(event, id) {
        if (event.code !== 'Enter') {
            return;
        }
        this.handleTabChange(id);
    }
    handleTabChange(id) {
        const activeTab = this.tabs.find((tab) => tab.active);
        if ((activeTab === null || activeTab === void 0 ? void 0 : activeTab.id) === id) {
            return;
        }
        this.tabs = this.tabs.map((tab) => {
            return Object.assign(Object.assign({}, tab), { active: tab.id === id });
        });
        this.tabChange.emit(id);
    }
    renderIconWithText(label, leftIcon, rightIcon) {
        return (h(Fragment, null, leftIcon && (h("span", { class: "icon left-icon" }, h(ModusIconMap, { icon: leftIcon, size: this.size === 'small' ? '16' : '24' }))), h("span", { class: "label" }, label), rightIcon && (h("span", { class: "icon right-icon" }, h(ModusIconMap, { icon: rightIcon, size: this.size === 'small' ? '16' : '24' })))));
    }
    renderIconOnly(iconOnly) {
        return (h("span", { class: "icon" }, h(ModusIconMap, { icon: iconOnly, size: this.size === 'small' ? '16' : '24' })));
    }
    render() {
        const tabs = this.tabs.map((tab) => {
            return (h("button", { id: `${tab.id}`, class: `tab ${tab.active ? 'active' : ''} ${this.classBySize.get(this.size)} ${this.fullWidth ? 'resizable' : ''} `, onClick: () => this.handleTabChange(tab.id), onKeyDown: (event) => this.handleKeyDown(event, tab.id) }, tab.iconOnly
                ? this.renderIconOnly(tab.iconOnly)
                : this.renderIconWithText(tab.label, tab.leftIcon, tab.rightIcon)));
        });
        return (h("div", { "aria-label": this.ariaLabel || undefined, class: `modus-tabs ${this.classBySize.get(this.size)}` }, tabs));
    }
    static get is() { return "modus-tabs"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["modus-tabs.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modus-tabs.css"]
        };
    }
    static get properties() {
        return {
            "fullWidth": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "full-width",
                "reflect": false,
                "defaultValue": "false"
            },
            "ariaLabel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string | null",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "aria-label",
                "reflect": false
            },
            "size": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'medium' | 'small'",
                    "resolved": "\"medium\" | \"small\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "size",
                "reflect": false,
                "defaultValue": "'medium'"
            },
            "tabs": {
                "type": "unknown",
                "mutable": true,
                "complexType": {
                    "original": "Tab[]",
                    "resolved": "Tab[]",
                    "references": {
                        "Tab": {
                            "location": "local",
                            "path": "/home/runner/work/modus-web-components/modus-web-components/stencil-workspace/src/components/modus-tabs/modus-tabs.tsx",
                            "id": "src/components/modus-tabs/modus-tabs.tsx::Tab"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The tabs to render."
                },
                "defaultValue": "[]"
            }
        };
    }
    static get events() {
        return [{
                "method": "tabChange",
                "name": "tabChange",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires on tab change."
                },
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                }
            }];
    }
}
