import { // eslint-disable-line @typescript-eslint/no-unused-vars
Fragment, Host, h, // eslint-disable-line @typescript-eslint/no-unused-vars
 } from "@stencil/core";
export class ModusTableRowActions {
    constructor() {
        this.row = undefined;
        this.context = undefined;
    }
    handleMoreButtonClick(e, menu) {
        const { left, top, height } = this.overflowButtonRef.getBoundingClientRect();
        this.overflowRowActions.emit({
            componentId: this.context.componentId,
            actions: menu,
            position: { x: left, y: top + height },
            row: this.row,
            onClose: () => this.overflowButtonRef.focusButton(),
        });
        e.preventDefault();
    }
    handleMoreButtonKeydown(e, menu) {
        if (e.key.toLowerCase() === 'enter') {
            this.handleMoreButtonClick(e, menu);
            e.preventDefault();
        }
    }
    handleActionButtonClick(e, actionId) {
        const { rowActionClick } = this.context;
        rowActionClick.emit({ actionId, row: this.row.original });
        e.preventDefault();
    }
    handleActionButtonKeydown(e, actionId) {
        if (e.key.toLowerCase() === 'enter') {
            this.handleActionButtonClick(e, actionId);
            e.preventDefault();
        }
    }
    render() {
        const { rowActions } = this.context;
        let actionButtons;
        let overflowMenu;
        if (rowActions) {
            actionButtons = rowActions.filter((action) => !action.isOverflow);
            overflowMenu = rowActions.filter((action) => action.isOverflow);
        }
        return (h(Host, { key: '8350a91bfd70d6399a0e1792ac3c00b429b9c5ad' }, actionButtons === null || actionButtons === void 0 ? void 0 :
            actionButtons.map(({ label, icon, id, isDisabled = () => false }) => {
                const disabled = isDisabled(this.row.original);
                return (h("modus-button", { class: "row-actions", "button-style": "borderless", color: "secondary", "icon-only": icon, size: "small", ariaLabel: label, disabled: disabled, onKeyDown: (e) => this.handleActionButtonKeydown(e, id), onClick: (e) => (!disabled ? this.handleActionButtonClick(e, id) : e.preventDefault()) }));
            }), (overflowMenu === null || overflowMenu === void 0 ? void 0 : overflowMenu.length) > 0 && (h(Fragment, null, h("modus-button", { ref: (el) => (this.overflowButtonRef = el), class: "row-actions-menu-button", "button-style": "borderless", color: "secondary", "icon-only": "more_vertical", ariaLabel: "overflow button", size: "small", onKeyDown: (e) => this.handleMoreButtonKeydown(e, overflowMenu), onClick: (e) => this.handleMoreButtonClick(e, overflowMenu) })))));
    }
    static get is() { return "modus-table-row-actions"; }
    static get originalStyleUrls() {
        return {
            "$": ["./modus-table-row-actions.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modus-table-row-actions.css"]
        };
    }
    static get properties() {
        return {
            "row": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Row<unknown>",
                    "resolved": "Row<unknown>",
                    "references": {
                        "Row": {
                            "location": "import",
                            "path": "@tanstack/table-core",
                            "id": ""
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                }
            },
            "context": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "TableContext",
                    "resolved": "TableContext",
                    "references": {
                        "TableContext": {
                            "location": "import",
                            "path": "../../../../models/table-context.models",
                            "id": "src/components/modus-table/models/table-context.models.ts::TableContext"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                }
            }
        };
    }
    static get events() {
        return [{
                "method": "overflowRowActions",
                "name": "overflowRowActions",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "complexType": {
                    "original": "unknown",
                    "resolved": "unknown",
                    "references": {}
                }
            }];
    }
}
