import { h, Host, } from "@stencil/core";
export class ModusTableRowActionsMenu {
    constructor() {
        // a local state to keep track of the overflow icon click to prevent `handleClickOutside` from closing the menu
        // event.preventDefault would not solve the problem when multiple tables are present on the page
        this.isOverflowIconClicked = false;
        this.onOverflowRowActions = (e) => this.handleOverflowRowActions(e);
        this.onRowActionClick = (e) => this.handleRowActionButtonClick(e);
        this.onRowExpanded = () => (this.isMenuOpen = false);
        this.context = undefined;
        this.isMenuOpen = false;
        this.overFlowMenu = undefined;
        this.position = undefined;
        this.menuWidth = 0;
    }
    onMenuOpenChange(newValue) {
        if (!newValue) {
            this.overFlowMenu = null;
            this.position = null;
            this.tableRow = null;
        }
    }
    componentDidRender() {
        var _a;
        if (this.isMenuOpen) {
            const firstItem = (_a = Array.from(this.element.querySelectorAll('modus-list-item'))) === null || _a === void 0 ? void 0 : _a.find((el) => !el.disabled);
            firstItem === null || firstItem === void 0 ? void 0 : firstItem.focusItem();
            // Calculate and set the rowAction menu width
            const menuElement = this.element.querySelector('.row-actions-menu');
            if (menuElement) {
                this.menuWidth = menuElement.offsetWidth;
            }
        }
    }
    connectedCallback() {
        const { element } = this.context;
        element.addEventListener('overflowRowActions', this.onOverflowRowActions);
        element.addEventListener('rowActionClick', this.onRowActionClick);
        element.addEventListener('rowExpanded', this.onRowExpanded);
    }
    disconnectedCallback() {
        const { element } = this.context;
        element.removeEventListener('overflowRowActions', this.onOverflowRowActions);
        element.removeEventListener('rowActionClick', this.onRowActionClick);
        element.removeEventListener('rowExpanded', this.onRowExpanded);
    }
    handleOverflowRowActions(event) {
        var _a;
        const { componentId, actions, position, row, onClose } = event.detail;
        if (componentId !== this.context.componentId)
            return;
        this.isMenuOpen = ((_a = this.tableRow) === null || _a === void 0 ? void 0 : _a.id) === row.id ? false : true;
        if (this.isMenuOpen) {
            this.overFlowMenu = actions;
            this.position = position;
            this.tableRow = row;
            this.onCloseMenu = onClose;
        }
        this.isOverflowIconClicked = this.isMenuOpen;
        event.stopPropagation();
    }
    handleRowActionButtonClick({ detail: { actionId } }) {
        const rowActionButtonClicked = this.overFlowMenu && this.overFlowMenu.find((action) => action.id !== actionId);
        if (rowActionButtonClicked)
            this.isMenuOpen = false;
    }
    handleClickOutside(event) {
        if (!(this.element.contains(event.target) || this.isOverflowIconClicked)) {
            this.isMenuOpen = false;
        }
        this.isOverflowIconClicked = false;
    }
    handleListItemClick(id) {
        const { rowActionClick } = this.context;
        rowActionClick.emit({ actionId: id, row: this.tableRow.original });
    }
    handleListItemKeydown(e) {
        var _a;
        if (e.key.toLowerCase() === 'escape' || e.key.toLowerCase() === 'enter') {
            this.isMenuOpen = false;
            (_a = this.onCloseMenu) === null || _a === void 0 ? void 0 : _a.call(this);
            e.preventDefault();
        }
    }
    render() {
        var _a;
        if (!(((_a = this.overFlowMenu) === null || _a === void 0 ? void 0 : _a.length) && this.position))
            return null;
        const { x, y } = this.position;
        const style = {
            transform: `translate(calc(${x - this.menuWidth / 1.5}px - 8px), calc(${y}px))`,
        };
        return (h(Host, null, this.isMenuOpen && (h("div", { style: Object.assign({}, style), class: "row-actions-menu" }, h("modus-list", { class: "hydrated" }, this.overFlowMenu.map(({ label, id, isDisabled = () => false }) => {
            var _a;
            const disabled = isDisabled((_a = this.tableRow) === null || _a === void 0 ? void 0 : _a.original);
            return (h("modus-list-item", { style: { maxWidth: '155px' }, disabled: disabled, onItemClick: () => this.handleListItemClick(id), class: "hydrated row-actions-menu-item", onKeyDown: (e) => this.handleListItemKeydown(e), tabindex: disabled ? -1 : 0 }, label));
        }))))));
    }
    static get is() { return "modus-table-row-actions-menu"; }
    static get originalStyleUrls() {
        return {
            "$": ["./modus-table-row-actions-menu.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modus-table-row-actions-menu.css"]
        };
    }
    static get properties() {
        return {
            "context": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "TableContext",
                    "resolved": "TableContext",
                    "references": {
                        "TableContext": {
                            "location": "import",
                            "path": "../../../../models/table-context.models",
                            "id": "src/components/modus-table/models/table-context.models.ts::TableContext"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                }
            }
        };
    }
    static get states() {
        return {
            "isMenuOpen": {},
            "overFlowMenu": {},
            "position": {},
            "menuWidth": {}
        };
    }
    static get elementRef() { return "element"; }
    static get watchers() {
        return [{
                "propName": "isMenuOpen",
                "methodName": "onMenuOpenChange"
            }];
    }
    static get listeners() {
        return [{
                "name": "click",
                "method": "handleClickOutside",
                "target": "document",
                "capture": false,
                "passive": false
            }];
    }
}
