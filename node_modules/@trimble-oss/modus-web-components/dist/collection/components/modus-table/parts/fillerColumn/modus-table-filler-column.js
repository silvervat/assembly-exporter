import { h, // eslint-disable-line @typescript-eslint/no-unused-vars
 } from "@stencil/core";
/**
 * ModusFillerColumn is to fill empty space within a table or grid when the content in other columns is not wide enough to occupy the entire available width
 */
export class ModusTableFillerColumn {
    constructor() {
        this.observer = null;
        this.updateContainerLayout = () => {
            var _a, _b, _c, _d, _e, _f;
            const tableWidth = (_a = this.targetTable.getBoundingClientRect()) === null || _a === void 0 ? void 0 : _a.width;
            const parentWidth = (_c = (_b = this.targetTable.parentElement) === null || _b === void 0 ? void 0 : _b.getBoundingClientRect()) === null || _c === void 0 ? void 0 : _c.width;
            this.showFillerTable = tableWidth < parentWidth;
            if (!this.showFillerTable)
                return;
            if (this.fillerTableRef) {
                this.fillerTableRef.querySelector('thead').style.height = `${(_d = this.targetTable.querySelector('thead')) === null || _d === void 0 ? void 0 : _d.getBoundingClientRect().height}px`;
                if (this.summaryRow) {
                    this.fillerTableRef.querySelector('tfoot').style.height = `${(_e = this.targetTable.querySelector('tfoot')) === null || _e === void 0 ? void 0 : _e.getBoundingClientRect().height}px`;
                }
                this.fillerTableRef.querySelector('tbody').style.height = `${(_f = this.targetTable.querySelector('tbody')) === null || _f === void 0 ? void 0 : _f.getBoundingClientRect().height}px`;
            }
        };
        this.cellBorderless = undefined;
        this.summaryRow = undefined;
        this.container = undefined;
        this.showFillerTable = false;
    }
    componentDidLoad() {
        this.targetTable = this.container.shadowRoot.querySelector('table');
        if (this.targetTable) {
            this.updateContainerLayout();
            this.connectDOMObserver();
        }
    }
    disconnectedCallback() {
        this.disconnectDOMObserver();
    }
    connectDOMObserver() {
        this.observer = new ResizeObserver(this.updateContainerLayout);
        this.observer.observe(this.targetTable);
    }
    disconnectDOMObserver() {
        if (this.observer) {
            this.observer.disconnect();
        }
    }
    render() {
        return (h("table", { key: 'ee0a9f15c17f12f97c163b5a70d4cb0c629b7c76', id: "table-filler-column", class: { 'cell-borderless': this.cellBorderless, 'd-none': !this.showFillerTable }, ref: (el) => (this.fillerTableRef = el) }, h("thead", { key: 'bca2ba3f12619a0f7f3eaaba680dbebbc20a5309' }, h("tr", { key: '86e18debe16a7f8e08a59d742a6b2a0ba204e968' }, h("th", { key: '1c83623c16b1da4a35c4c6f0388052ef9f575caa' }))), h("tbody", { key: 'eb88f740a59f41e969238173557930a3e260be13' }, h("tr", { key: 'a84f32451ccc75f202abc17efbde0e782786f263' }, h("td", { key: 'e34fb7c702a0ba4b5c663a586c8096a96c85a7e8' }))), this.summaryRow && (h("tfoot", null, h("tr", { class: "summary-row" }, h("td", null))))));
    }
    static get is() { return "modus-table-filler-column"; }
    static get originalStyleUrls() {
        return {
            "$": ["./modus-table-filler-column.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modus-table-filler-column.css"]
        };
    }
    static get properties() {
        return {
            "cellBorderless": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "cell-borderless",
                "reflect": false
            },
            "summaryRow": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "summary-row",
                "reflect": false
            },
            "container": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "HTMLElement",
                    "resolved": "HTMLElement",
                    "references": {
                        "HTMLElement": {
                            "location": "global",
                            "id": "global::HTMLElement"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": ""
                }
            }
        };
    }
    static get states() {
        return {
            "showFillerTable": {}
        };
    }
}
