import { h, // eslint-disable-line @typescript-eslint/no-unused-vars
 } from "@stencil/core";
import { KEYBOARD_DOWN, KEYBOARD_UP, KEYBOARD_ENTER, KEYBOARD_SPACE, KEYBOARD_TAB } from "../../../modus-table.constants";
export class ModusTableColumnsVisibility {
    constructor() {
        this.refItemContent = [];
        this.getAllLeafColumns = undefined;
        this.columnsVisibility = undefined;
        this.showDropdown = undefined;
        this.menuIconContainerRef = undefined;
        this.toggleDropdown = undefined;
        this.maxHeight = undefined;
        this.columnsVisibilityState = new Map();
    }
    componentWillLoad() {
        // Initialize columns visibility state based on hiddenColumns
        this.initializeVisibilityState();
    }
    applyColumnsVisibility() {
        this.getAllLeafColumns().forEach((column) => {
            if (this.columnsVisibilityState.has(column.id)) {
                column.toggleVisibility(this.columnsVisibilityState.get(column.id));
            }
        });
        this.toggleDropdown(!this.showDropdown);
        this.menuIconContainerRef.focus();
    }
    closeDropdown() {
        this.columnsVisibilityState = new Map();
        this.toggleDropdown(!this.showDropdown);
        this.menuIconContainerRef.focus();
    }
    handleApplyKeyDown(event) {
        if (event.key.toLowerCase() === KEYBOARD_TAB && !event.shiftKey) {
            this.toggleDropdown(false);
        }
    }
    /**
     * Handling columns dropdown keyboard(arrowUp/arrowDown) navigation
     * @param event keyboard event
     * @param columnIndex column index
     */
    handleColumnItemKeyDown(event, columnIndex) {
        let currentRefItemIndex;
        const recursiveTillAnotherFocusItem = (refItemIndex, isIncrement) => {
            this.refItemContent[refItemIndex]
                ? this.refItemContent[refItemIndex].focus()
                : recursiveTillAnotherFocusItem(isIncrement ? refItemIndex + 1 : refItemIndex - 1, isIncrement);
        };
        const eventKey = event.key.toLowerCase();
        if (eventKey === KEYBOARD_ENTER || eventKey === KEYBOARD_SPACE) {
            this.toggleColumnVisibility(columnIndex);
        }
        else if (eventKey === KEYBOARD_DOWN) {
            currentRefItemIndex = columnIndex + 1 < this.refItemContent.length ? columnIndex + 1 : this.refItemContent.length - 1;
            recursiveTillAnotherFocusItem(currentRefItemIndex, true);
            event.preventDefault();
        }
        else if (eventKey === KEYBOARD_UP) {
            currentRefItemIndex = columnIndex - 1 >= 0 ? columnIndex - 1 : 0;
            recursiveTillAnotherFocusItem(currentRefItemIndex, false);
            event.preventDefault();
        }
    }
    /**
     * Adding column item refs(not disabled)
     */
    handleRefColumnItemContent(el, i, requiredColumn) {
        if (!requiredColumn) {
            this.refItemContent[i] = el;
        }
    }
    initializeVisibilityState() {
        // Set the visibility state based on hiddenColumns prop
        this.getAllLeafColumns().forEach((column) => {
            var _a, _b, _c, _d;
            const isRequired = (_b = (_a = this.columnsVisibility) === null || _a === void 0 ? void 0 : _a.requiredColumns) === null || _b === void 0 ? void 0 : _b.includes(column.id);
            const isHidden = (_d = (_c = this.columnsVisibility) === null || _c === void 0 ? void 0 : _c.hiddenColumns) === null || _d === void 0 ? void 0 : _d.includes(column.id);
            if (!isRequired && isHidden) {
                column.toggleVisibility(false);
            }
        });
    }
    toggleColumnVisibility(columnIndex) {
        const shadowRootChildren = this.refItemContent[columnIndex].children[0].shadowRoot
            .children;
        const modusCheckboxElement = shadowRootChildren[shadowRootChildren.length - 1];
        modusCheckboxElement.click();
    }
    /**
     * Returns true if the column is required column
     */
    checkIfRequiredColumn(columnId) {
        var _a, _b;
        return (_b = (_a = this.columnsVisibility) === null || _a === void 0 ? void 0 : _a.requiredColumns) === null || _b === void 0 ? void 0 : _b.includes(columnId);
    }
    renderColumnsChecklist() {
        const columnVisibilityItemControls = (columnId, columnIndex) => {
            return {
                key: columnId,
                tabIndex: this.checkIfRequiredColumn(columnId) ? -1 : 0,
                ref: (el) => {
                    this.handleRefColumnItemContent(el, columnIndex, this.checkIfRequiredColumn(columnId));
                },
                onClick: () => this.toggleColumnVisibility(columnIndex),
                onKeyDown: (event) => this.handleColumnItemKeyDown(event, columnIndex),
            };
        };
        return this.getAllLeafColumns().map((column, index) => {
            var _a, _b;
            return (h("div", Object.assign({}, columnVisibilityItemControls(column.id, index), { class: "column-visibility-item" }), h("modus-checkbox", { ariaLabel: column.columnDef.header, label: column.columnDef.header, checked: column.getIsVisible(), onCheckboxClick: (e) => this.columnsVisibilityState.set(column.id, e.detail), disabled: (_b = (_a = this.columnsVisibility) === null || _a === void 0 ? void 0 : _a.requiredColumns) === null || _b === void 0 ? void 0 : _b.includes(column.id), stopPropagation: true })));
        });
    }
    renderCancelApplyButtons() {
        return (h("div", { class: "column-visibility-buttons-container" }, h("modus-button", { size: "small", buttonStyle: "outline", onClick: () => this.closeDropdown() }, "Cancel"), h("modus-button", { size: "small", onClick: () => this.applyColumnsVisibility(), onKeyDown: (event) => this.handleApplyKeyDown(event) }, "Apply")));
    }
    render() {
        return (h("div", { key: '7357d1c0c3efb961c410ee2191f516673ff1fe31', class: "columns-visibility-menu", style: { maxHeight: this.maxHeight || '60dvh' } }, h("div", { key: '156fc3b9d58040a473f888d81f9e6a00021aac3b', class: "column-visibility-header" }, this.columnsVisibility.title || 'Columns'), h("div", { key: '588ed7b5939c4bced93b593032584c852208cd02', class: "column-visibility-content" }, this.renderColumnsChecklist()), this.renderCancelApplyButtons()));
    }
    static get is() { return "modus-table-columns-visibility"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["./modus-table-columns-visibility.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modus-table-columns-visibility.css"]
        };
    }
    static get properties() {
        return {
            "getAllLeafColumns": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "() => Column<unknown, unknown>[]",
                    "resolved": "() => Column<unknown, unknown>[]",
                    "references": {
                        "Column": {
                            "location": "import",
                            "path": "@tanstack/table-core",
                            "id": ""
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Table data."
                }
            },
            "columnsVisibility": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "ModusTableColumnsVisibilityOptions",
                    "resolved": "ModusTableColumnsVisibilityOptions",
                    "references": {
                        "ModusTableColumnsVisibilityOptions": {
                            "location": "import",
                            "path": "../../../models/modus-table.models",
                            "id": "src/components/modus-table/models/modus-table.models.ts::ModusTableColumnsVisibilityOptions"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Column visibility options"
                }
            },
            "showDropdown": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "show-dropdown",
                "reflect": false
            },
            "menuIconContainerRef": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "HTMLDivElement",
                    "resolved": "HTMLDivElement",
                    "references": {
                        "HTMLDivElement": {
                            "location": "global",
                            "id": "global::HTMLDivElement"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                }
            },
            "toggleDropdown": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "(show: boolean) => void",
                    "resolved": "(show: boolean) => void",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                }
            },
            "maxHeight": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "max-height",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "columnsVisibilityState": {}
        };
    }
}
