import { h, // eslint-disable-line @typescript-eslint/no-unused-vars
 } from "@stencil/core";
import { ModusIconMap } from "../../../../icons/ModusIconMap";
import { KEYBOARD_ENTER, SORT_ASCENDING, SORT_DESCENDING, SORTED_ASCENDING, SORTED_DESCENDING, } from "../../modus-table.constants";
const ICON_SIZE = '16';
/**
 * Render sort icon based on direction and style
 * @param direction Column sort direction
 * @param style Alphabetical or directional (arrow up/down) icons
 * @returns Sort icon
 */
function renderSortIcon(direction, style) {
    const icon = style === 'alphabetical' ? getAlphabeticalSortIcon(direction) : getDirectionalSortIcon(direction);
    return h(ModusIconMap, { icon: icon, size: ICON_SIZE });
}
/**
 * Select directional icon based on direction
 * @param direction Is the column currently sorted
 * @returns string
 */
function getDirectionalSortIcon(direction) {
    if (!direction) {
        return 'unsorted_arrows';
    }
    return direction === 'asc' ? 'sort_arrow_up' : 'sort_arrow_down';
}
/**
 * Select alphabetical icon based on direction
 * @param direction Is the column currently sorted
 * @returns string
 */
function getAlphabeticalSortIcon(direction) {
    if (direction === 'asc') {
        return 'sort_alpha_down';
    }
    return 'sort_alpha_up';
}
/**
 * To show sorting status.
 * @param column Data related to the perticular column.
 * @returns Active sort or sort that will occur.
 */
function getSortingStatus(column, isColumnResizing) {
    return isColumnResizing
        ? '' // When column resize is enabled, we don't show the tooltip.
        : column.getIsSorted() === 'asc'
            ? SORTED_ASCENDING
            : column.getIsSorted() === 'desc'
                ? SORTED_DESCENDING
                : column.getNextSortingOrder() === 'asc'
                    ? SORT_ASCENDING
                    : SORT_DESCENDING;
}
/**
 * Toggles column sort on 'Enter' key press.
 * @param column Data related to the perticular column.
 * @param event Keyboard event.
 */
function sortOnKeyDown(column, event) {
    if (event.key.toLowerCase() === KEYBOARD_ENTER) {
        column.toggleSorting();
        event.preventDefault();
    }
    event.stopPropagation();
}
export const ModusTableColumnHeaderLabel = ({ column, isColumnResizing, sortIconStyle, showSortIconOnHover, }) => {
    const sortingStatus = getSortingStatus(column, isColumnResizing);
    const canSort = column.getCanSort();
    const isSorted = column.getIsSorted();
    const containerProps = {
        'aria-label': sortingStatus,
        role: 'button',
        onClick: column.getToggleSortingHandler(),
        onKeyDown: (event) => sortOnKeyDown(column, event),
        onMouseDown: (event) => event.stopPropagation(),
    };
    const HeaderText = () => {
        if (!canSort) {
            return column.columnDef.header;
        }
        return (h("modus-tooltip", { class: "column-title", text: sortingStatus }, h("span", Object.assign({}, containerProps, { class: `header-text ${canSort && isSorted ? 'sorted' : ''}` }), column.columnDef.header)));
    };
    const SortIcon = () => {
        if (!canSort) {
            return null;
        }
        return (h("modus-tooltip", { class: "modus-tooltip-sort-icon", text: sortingStatus, position: "bottom" }, h("span", Object.assign({}, containerProps, { tabindex: "0", class: "sort-icon-container" }), h("span", { class: `sort-icon ${!isSorted && 'disabled'} ${showSortIconOnHover ? 'hidden' : ''}` }, renderSortIcon(isSorted, sortIconStyle)))));
    };
    return (h("span", { class: canSort && 'can-sort' }, h(HeaderText, null), h(SortIcon, null)));
};
