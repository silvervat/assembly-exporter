import { createTable, getCoreRowModel, getExpandedRowModel, getPaginationRowModel, getSortedRowModel, } from "@tanstack/table-core";
import { sortHyperlink, sortBadge } from "./functions/sortingFunction";
import { COLUMN_DEF_SUB_ROWS_KEY } from "./modus-table.constants";
export default class ModusTableCore {
    constructor(tableOptions) {
        var _a;
        this.tableCore = null;
        const { data, columns, columnResize, sort, pagination, preSelectedRows, rowSelection, rowSelectionOptions, columnOrder, pageSizeList, toolbarOptions, manualPagination, pageCount, manualSorting, sortingState, defaultSort, currentPageSize, getRowId, setExpanded, setSorting, setRowSelection, setPagination, setColumnSizing, setColumnSizingInfo, setColumnVisibility, setColumnOrder, } = tableOptions;
        const { multiple, subRowSelection } = rowSelectionOptions;
        const defaultSortState = defaultSort ? [defaultSort] : [];
        const options = Object.assign(Object.assign({ autoResetPageIndex: false, data: data !== null && data !== void 0 ? data : [], columns: (_a = columns) !== null && _a !== void 0 ? _a : [], state: {
                columnPinning: {},
                columnSizing: {},
                columnSizingInfo: {},
                columnVisibility: {},
                columnOrder: columnOrder,
                expanded: null,
                sorting: manualSorting ? sortingState : defaultSortState,
                rowSelection: preSelectedRows,
                pagination: {
                    pageIndex: 0,
                    pageSize: pagination ? (currentPageSize ? currentPageSize : pageSizeList[0]) : data === null || data === void 0 ? void 0 : data.length,
                },
            }, enableRowSelection: rowSelection, enableMultiRowSelection: multiple, enableSubRowSelection: multiple && subRowSelection, enableSorting: sort, sortingFns: {
                sortForHyperlink: sortHyperlink,
                sortForBadge: sortBadge,
            }, columnResizeMode: 'onChange', enableColumnResizing: columnResize, enableHiding: !!(toolbarOptions === null || toolbarOptions === void 0 ? void 0 : toolbarOptions.columnsVisibility), sortDescFirst: false, onExpandedChange: setExpanded, onSortingChange: setSorting, onRowSelectionChange: setRowSelection, onPaginationChange: setPagination, onColumnSizingChange: setColumnSizing, onColumnSizingInfoChange: setColumnSizingInfo, onColumnVisibilityChange: setColumnVisibility, onColumnOrderChange: setColumnOrder, getCoreRowModel: getCoreRowModel(), getPaginationRowModel: getPaginationRowModel(), getSortedRowModel: getSortedRowModel(), getExpandedRowModel: getExpandedRowModel(), getSubRows: (row) => row[COLUMN_DEF_SUB_ROWS_KEY], getRowId: getRowId,
            // eslint-disable-next-line @typescript-eslint/no-empty-function
            onStateChange: () => { }, renderFallbackValue: null }, (manualPagination &&
            pageCount && {
            manualPagination,
            pageCount,
        })), { manualSorting: manualSorting });
        this.tableCore = createTable(options);
    }
    getTableInstance() {
        return this.tableCore;
    }
    getInitialState() {
        return this.tableCore.initialState;
    }
    getState(updater, value) {
        return updater instanceof Function ? updater(value) : updater;
    }
    setState(key, value) {
        this.tableCore.options.state[key] = value;
    }
    setOptions(key, value) {
        this.tableCore.options[key] = value;
    }
}
