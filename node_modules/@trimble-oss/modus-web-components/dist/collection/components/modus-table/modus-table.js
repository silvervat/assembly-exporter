import { Host, Fragment, h, // eslint-disable-line @typescript-eslint/no-unused-vars
 } from "@stencil/core";
import { COLUMN_ORDER_STATE_KEY, COLUMN_SIZING_INFO_STATE_KEY, COLUMN_SIZING_STATE_KEY, COLUMN_VISIBILITY_STATE_KEY, EXPANDED_STATE_KEY, PAGINATION_DEFAULT_SIZES, PAGINATION_STATE_KEY, ROW_SELECTION_STATE_KEY, SORTING_STATE_KEY, } from "./modus-table.constants";
import { ModusTableColumnDropIndicator, ModusTableColumnDragItem } from "./parts/columnHeader/modus-table-column-drag-item";
import { ModusTablePagination } from "./parts/modus-table-pagination";
import { ModusTableFooter } from "./parts/modus-table-footer";
import { TableHeaderDragDrop } from "./utilities/table-header-drag-drop.utility";
import ModusTableCore from "./modus-table.core";
import { ModusTableHeader } from "./parts/modus-table-header";
import { ModusTableBody } from "./parts/modus-table-body";
import { createGuid } from "../../utils/utils";
/**
 * @slot customFooter - Slot for custom footer.
 * @slot groupLeft - Slot for custom toolbar options added to the left.
 * @slot groupRight - Slot for custom toolbar options added to the right.
 */
export class ModusTable {
    constructor() {
        this.classByDensity = new Map([
            ['relaxed', 'density-relaxed'],
            ['comfortable', 'density-comfortable'],
            ['compact', 'density-compact'],
        ]);
        this.frozenColumns = [];
        this.isColumnResizing = false;
        this.onMouseMove = (event) => this.handleDragOver(event);
        this.onKeyDown = (event) => this.handleKeyDown(event);
        this.onMouseUp = () => this.handleDrop();
        this.columns = undefined;
        this.columnResize = false;
        this.columnReorder = false;
        this.data = undefined;
        this.density = 'relaxed';
        this.displayOptions = {
            borderless: false,
            cellBorderless: false,
        };
        this.hover = false;
        this.fullWidth = false;
        this.maxHeight = undefined;
        this.maxWidth = undefined;
        this.pageSizeList = PAGINATION_DEFAULT_SIZES;
        this.pagination = undefined;
        this.rowActions = [];
        this.rowsExpandable = false;
        this.rowSelection = false;
        this.manualPaginationOptions = undefined;
        this.manualSortingOptions = undefined;
        this.rowSelectionOptions = {
            multiple: false,
            subRowSelection: false,
        };
        this.showSortIconOnHover = false;
        this.sort = false;
        this.sortIconStyle = 'alphabetical';
        this.summaryRow = false;
        this.toolbar = false;
        this.toolbarOptions = null;
        this.defaultSort = undefined;
        this.wrapText = false;
        this.itemDragState = undefined;
        this.dragAndDropObj = new TableHeaderDragDrop();
        this.tableState = {
            columnSizing: {},
            columnSizingInfo: {},
            expanded: null,
            sorting: [],
            pagination: {
                pageIndex: 0,
                pageSize: this.pageSizeList[0],
            },
            columnVisibility: {},
            columnOrder: [],
            rowSelection: {},
        };
        this.tableCore = undefined;
        this.cells = [];
    }
    onColumnsChange(newVal) {
        var _a, _b;
        (_a = this.tableCore) === null || _a === void 0 ? void 0 : _a.setOptions('columns', (_b = newVal) !== null && _b !== void 0 ? _b : []);
    }
    onColumnResizeChange(newVal) {
        var _a;
        (_a = this.tableCore) === null || _a === void 0 ? void 0 : _a.setOptions('enableColumnResizing', newVal);
    }
    onColumnReorderChange() {
        this.tableCore.setState('columnOrder', this.tableState.columnOrder);
    }
    onDataChange(newVal) {
        var _a, _b;
        if (this.pagination && !this.manualPaginationOptions) {
            const maxPageIndex = Math.ceil(this.data.length / this.tableState.pagination.pageSize) - 1;
            if (this.tableState.pagination.pageIndex > maxPageIndex) {
                this.tableState.pagination.pageIndex = maxPageIndex >= 0 ? maxPageIndex : 0;
            }
        }
        (_a = this.tableCore) === null || _a === void 0 ? void 0 : _a.setState('pagination', Object.assign(Object.assign({}, this.tableState.pagination), { pageIndex: this.tableState.pagination.pageIndex, pageSize: this.pagination ? this.tableState.pagination.pageSize : this.data.length }));
        (_b = this.tableCore) === null || _b === void 0 ? void 0 : _b.setOptions('data', newVal);
    }
    onPaginationChange(newVal) {
        var _a;
        if (newVal) {
            this.tableState.pagination.pageIndex = 0;
            this.tableState.pagination.pageSize = this.pageSizeList[0];
        }
        (_a = this.tableCore) === null || _a === void 0 ? void 0 : _a.setState('pagination', {
            pageIndex: 0,
            pageSize: newVal === true ? this.pageSizeList[0] : this.data.length,
        });
    }
    onRowsExpandableChange(newVal) {
        if (newVal) {
            this.freezeColumn(this.tableState.columnOrder[0]);
        }
    }
    onRowSlectionChange(newVal) {
        this.tableCore.setOptions('enableRowSelection', newVal);
    }
    onManualPaginationOptionsChange(newVal) {
        var _a, _b, _c, _d, _e;
        if (Object.keys(newVal).length === 0) {
            (_a = this.tableCore) === null || _a === void 0 ? void 0 : _a.setOptions('manualPagination', false);
            (_b = this.tableCore) === null || _b === void 0 ? void 0 : _b.setState('pagination', {
                pageIndex: 0,
                pageSize: this.pageSizeList[0],
            });
        }
        else {
            (_c = this.tableCore) === null || _c === void 0 ? void 0 : _c.setOptions('pageCount', newVal.pageCount);
            (_d = this.tableCore) === null || _d === void 0 ? void 0 : _d.setOptions('manualPagination', true);
            (_e = this.tableCore) === null || _e === void 0 ? void 0 : _e.setState('pagination', {
                pageIndex: newVal.currentPageIndex - 1,
                pageSize: newVal.currentPageSize,
            });
        }
    }
    onManualSortOptionsChange(newVal, oldVal) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        if ((newVal === null || newVal === void 0 ? void 0 : newVal.currentSortingState.length) === 0) {
            if (oldVal && oldVal.currentSortingState.length > 0) {
                (_a = this.tableCore) === null || _a === void 0 ? void 0 : _a.setOptions('manualSorting', true);
                (_b = this.tableCore) === null || _b === void 0 ? void 0 : _b.setState('sorting', newVal.currentSortingState);
                this.manualSortingOptions = Object.assign({}, newVal);
            }
        }
        else if (((_c = newVal === null || newVal === void 0 ? void 0 : newVal.currentSortingState[0]) === null || _c === void 0 ? void 0 : _c.id) !== ((_d = oldVal === null || oldVal === void 0 ? void 0 : oldVal.currentSortingState[0]) === null || _d === void 0 ? void 0 : _d.id) ||
            ((_e = newVal === null || newVal === void 0 ? void 0 : newVal.currentSortingState[0]) === null || _e === void 0 ? void 0 : _e.desc) !== ((_f = oldVal === null || oldVal === void 0 ? void 0 : oldVal.currentSortingState[0]) === null || _f === void 0 ? void 0 : _f.desc)) {
            (_g = this.tableCore) === null || _g === void 0 ? void 0 : _g.setOptions('manualSorting', true);
            (_h = this.tableCore) === null || _h === void 0 ? void 0 : _h.setState('sorting', newVal.currentSortingState);
            this.manualSortingOptions = Object.assign({}, newVal);
        }
    }
    onRowSelectionOptionsChange(newVal, oldVal) {
        var _a, _b, _c;
        if (newVal.multiple !== oldVal.multiple ||
            newVal.subRowSelection !== oldVal.subRowSelection ||
            newVal.preSelectedRows !== oldVal.preSelectedRows) {
            (_a = this.tableCore) === null || _a === void 0 ? void 0 : _a.setOptions('enableMultiRowSelection', newVal.multiple);
            (_b = this.tableCore) === null || _b === void 0 ? void 0 : _b.setState('rowSelection', newVal.preSelectedRows);
            (_c = this.tableCore) === null || _c === void 0 ? void 0 : _c.setState('subRowSelection', newVal.subRowSelection);
        }
    }
    onSortChange(newVal) {
        var _a;
        (_a = this.tableCore) === null || _a === void 0 ? void 0 : _a.setOptions('enableSorting', newVal);
    }
    onToolbarOptionsChange(newVal) {
        var _a;
        (_a = this.tableCore) === null || _a === void 0 ? void 0 : _a.setOptions('enableHiding', !!(newVal === null || newVal === void 0 ? void 0 : newVal.columnsVisibility));
        this.onRowsExpandableChange(this.rowsExpandable);
    }
    onDefaultSortChange(newVal) {
        var _a, _b, _c;
        if (!(((_b = (_a = this.manualSortingOptions) === null || _a === void 0 ? void 0 : _a.currentSortingState) === null || _b === void 0 ? void 0 : _b.length) > 0)) {
            (_c = this.tableCore) === null || _c === void 0 ? void 0 : _c.setState('sorting', [newVal]);
        }
    }
    handleItemDragState(newValue, oldValue) {
        if (oldValue && newValue && oldValue === newValue && this.columnReorder)
            return;
        if (newValue) {
            document.addEventListener('mousemove', this.onMouseMove);
            document.addEventListener('mouseup', this.onMouseUp);
            document.addEventListener('keydown', this.onKeyDown);
        }
        else {
            document.removeEventListener('mousemove', this.onMouseMove);
            document.removeEventListener('mouseup', this.onMouseUp);
            document.removeEventListener('keydown', this.onKeyDown);
        }
    }
    /** Updates the cells state by querying the shadow DOM for modus-table-cell-main elements.*/
    updateCells() {
        this.cells = Array.from(this.element.shadowRoot.querySelectorAll('modus-table-cell-main'));
    }
    componentWillLoad() {
        var _a, _b, _c;
        this._id = this.element.id || `modus-table-${createGuid()}`;
        this.columns = (_a = this.columns) === null || _a === void 0 ? void 0 : _a.map((column) => {
            var _a;
            return (Object.assign(Object.assign({}, column), { sortingFn: (_a = column.sortingFn) !== null && _a !== void 0 ? _a : 'alphanumeric' }));
        });
        const initialTableState = {
            columnOrder: (_b = this.columns) === null || _b === void 0 ? void 0 : _b.map((column) => column.id),
            rowSelection: this.getPreselectedRowState(),
        };
        if ((_c = this.manualPaginationOptions) === null || _c === void 0 ? void 0 : _c.currentPageSize) {
            initialTableState.pagination = Object.assign(Object.assign({}, this.tableState.pagination), { pageSize: this.manualPaginationOptions.currentPageSize });
        }
        this.setTableState(initialTableState);
        this.onRowsExpandableChange(this.rowsExpandable);
        this.initializeTable();
    }
    componentWillRender() {
        this._context = this.getTableContext();
    }
    /**
     * Returns data of a column.
     * @param accessorKey : Column name as key.
     * @returns : Column data as Array or empty array.
     */
    async getColumnData(accessorKey) {
        const columns = this.tableCore.getTableInstance().getAllLeafColumns();
        let rowData = [];
        for (let i = 0; i < columns.length; i++) {
            if (columns[i].columnDef['accessorKey'] === accessorKey) {
                rowData = this.tableCore.getTableInstance().options.data.map((row) => row[accessorKey]);
                break;
            }
        }
        return rowData;
    }
    /**
     * Returns whether a cell is editable based on row index and column ID.
     * @param rowIndex The index of the row.
     * @param columnId The ID of the column.
     * @returns Boolean indicating if the cell is editable.
     */
    async getEditableCell(rowIndex, columnId) {
        this.updateCells();
        // Find the specific cell to edit
        const cellToEdit = this.cells.find((cell) => cell.cell.row.index.toString() === rowIndex && cell.cell.column.id === columnId);
        if (!cellToEdit) {
            return;
        }
        await cellToEdit.handleCellEdit(rowIndex, columnId);
    }
    /**
     * Toggle the table column visibility
     * @param columnId Column id
     * @param show Boolean value decides to visibility of column
     */
    async toggleColumnVisibility(columnId, show) {
        this.tableCore
            .getTableInstance()
            .getAllLeafColumns()
            .forEach((column) => {
            if (column.id === columnId) {
                column.toggleVisibility(show);
            }
        });
    }
    documentClickHandler(event) {
        if (event.defaultPrevented) {
            return;
        }
        // Deactivating the column resizing mode if other click events happened
        this.tableCore.getTableInstance().setColumnSizingInfo({
            startOffset: null,
            startSize: null,
            deltaOffset: null,
            deltaPercentage: null,
            isResizingColumn: null,
            columnSizingStart: [],
        });
    }
    freezeColumn(columnId) {
        var _a;
        this.frozenColumns.push(columnId);
        if ((_a = this.toolbarOptions) === null || _a === void 0 ? void 0 : _a.columnsVisibility) {
            this.toolbarOptions.columnsVisibility.requiredColumns = [
                ...this.toolbarOptions.columnsVisibility.requiredColumns,
                ...this.frozenColumns,
            ];
        }
    }
    getRowId(originalRow, index, parent) {
        if (Object.prototype.hasOwnProperty.call(originalRow, 'id'))
            return originalRow.id;
        if (parent)
            return `${parent.id}.${index}`;
        return `${index}`;
    }
    getRowActionsWithOverflow() {
        if (this.rowActions) {
            const sortedActions = this.rowActions.sort((a, b) => a.index - b.index);
            const visibleLimit = sortedActions.length < 5 ? 4 : 3;
            const actionButtons = sortedActions.slice(0, visibleLimit);
            const overflowMenu = sortedActions.slice(visibleLimit).map((action) => (Object.assign(Object.assign({}, action), { isOverflow: true })));
            return [...actionButtons, ...overflowMenu];
        }
        return null;
    }
    getTableContext() {
        return {
            element: this.element,
            data: this.data,
            density: this.density,
            sort: this.sort,
            sortIconStyle: this.sortIconStyle,
            componentId: this._id,
            hover: this.hover,
            pagination: this.pagination,
            pageSizeList: this.pageSizeList,
            manualPaginationOptions: this.manualPaginationOptions,
            rowActions: this.getRowActionsWithOverflow(),
            rowSelection: this.rowSelection,
            rowSelectionOptions: this.rowSelectionOptions,
            rowsExpandable: this.rowsExpandable,
            columns: this.columns,
            columnReorder: this.columnReorder,
            columnResize: this.columnResize,
            rowSelectionChange: this.rowSelectionChange,
            rowExpanded: this.rowExpanded,
            rowActionClick: this.rowActionClick,
            sortChange: this.sortChange,
            paginationChange: this.paginationChange,
            columnSizingChange: this.columnSizingChange,
            columnVisibilityChange: this.columnVisibilityChange,
            columnOrderChange: this.columnOrderChange,
            cellValueChange: this.cellValueChange,
            cellLinkClick: this.cellLinkClick,
            showSortIconOnHover: this.showSortIconOnHover,
            displayOptions: this.displayOptions,
            toolbarOptions: this.toolbarOptions,
            toolbar: this.toolbar,
            summaryRow: this.summaryRow,
            fullWidth: this.fullWidth,
            maxHeight: this.maxHeight,
            maxWidth: this.maxWidth,
            frozenColumns: this.frozenColumns,
            isColumnResizing: this.isColumnResizing,
            tableCore: this.tableCore,
            tableInstance: this.tableCore.getTableInstance(),
            wrapText: this.wrapText,
            onColumnsChange: this.onColumnsChange,
            onColumnResizeChange: this.onColumnResizeChange,
            onColumnReorderChange: this.onColumnReorderChange,
            onDataChange: this.onDataChange,
            onRowsExpandableChange: this.onRowsExpandableChange,
            onRowSelectionOptionsChange: this.onRowSelectionOptionsChange,
            onSortChange: this.onSortChange,
            onToolbarOptionsChange: this.onToolbarOptionsChange,
            getRowId: this.getRowId,
            updateData: this.updateData.bind(this),
        };
    }
    handleDragStart(event, draggedColumnId, elementRef, mouseInteracted) {
        var _a, _b;
        if (this.columnReorder &&
            !this.isColumnResizing &&
            !((_a = this.itemDragState) === null || _a === void 0 ? void 0 : _a.dropColumnId) && // On Enter key press, two functions are called handleDragStart and handleKeyDown, if dropColumnId is present we ignore handleDragStart.
            ((_b = this.itemDragState) === null || _b === void 0 ? void 0 : _b.draggedColumnId) !== draggedColumnId // If same item is selected we don't update itemDragState.
        ) {
            if (this.frozenColumns.includes(draggedColumnId)) {
                return;
            }
            this.itemDragState = null;
            this.dragAndDropObj.setValues(this.tableState.columnOrder, this.columnReorder, this.isColumnResizing, this.element, this.tableCore.getTableInstance(), this.itemDragState, this.frozenColumns);
            this.dragAndDropObj.handleDragStart(event, draggedColumnId, elementRef, mouseInteracted);
            /**
             * SetTimeout
             * If we select another header, after selecting a header for reorder creates an issue(Both selection using keyboard). When tab key is used this issue will not occur.
             * Which displays both the headers in the ModusTableDragItem component, as we are using appendChild.
             * To resolved this issue we have used setTimeout to delay the updating of dragContent is itemDragState.
             * The same issue can be reproduced when a header is selected using keyboard and then one clicks on another header using mouse.
             */
            setTimeout(() => {
                this.itemDragState = Object.assign({}, this.dragAndDropObj.itemDragState);
            }, 10);
        }
    }
    handleDragOver(event) {
        this.dragAndDropObj.handleDragOver(event);
        this.itemDragState = this.dragAndDropObj.itemDragState;
    }
    handleKeyDown(event) {
        this.itemDragState = null;
        this.dragAndDropObj.handleKeyDown(event);
        this.setTableState({ columnOrder: this.dragAndDropObj.columnOrder });
        this.itemDragState = this.dragAndDropObj.itemDragState;
    }
    handleDrop() {
        this.dragAndDropObj.handleDrop();
        this.setTableState({ columnOrder: this.dragAndDropObj.columnOrder });
        this.columnOrderChange.emit(this.dragAndDropObj.columnOrder);
        this.itemDragState = null;
    }
    getPreselectedRowState() {
        var _a;
        const selection = {};
        (_a = this.rowSelectionOptions.preSelectedRows) === null || _a === void 0 ? void 0 : _a.forEach((row) => (selection[row] = true));
        return selection;
    }
    initializeTable() {
        var _a, _b;
        this.tableCore = new ModusTableCore(Object.assign(Object.assign(Object.assign({ data: (_a = this.data) !== null && _a !== void 0 ? _a : [], columns: this.columns, columnResize: this.columnResize, sort: this.sort, pagination: this.pagination, pageSizeList: this.pageSizeList, rowSelection: this.rowSelection, rowSelectionOptions: this.rowSelectionOptions, columnOrder: this.columnReorder ? this.tableState.columnOrder : [], toolbarOptions: this.toolbarOptions, preSelectedRows: this.getPreselectedRowState(), defaultSort: this.defaultSort, currentPageSize: (_b = this.manualPaginationOptions) === null || _b === void 0 ? void 0 : _b.currentPageSize }, (this.manualPaginationOptions && {
            manualPagination: true,
            pageCount: this.manualPaginationOptions.pageCount,
        })), (this.manualSortingOptions && {
            manualSorting: true,
            sortingState: this.manualSortingOptions.currentSortingState,
        })), { getRowId: (originalRow, index, parent) => this.getRowId(originalRow, index, parent),
            // setData: (updater: Updater<unknown[]>) => this.updateData(updater),
            setExpanded: (updater) => this.updateTableCore(updater, EXPANDED_STATE_KEY, this.rowExpanded), setSorting: (updater) => this.updateTableCore(updater, SORTING_STATE_KEY, this.sortChange), setRowSelection: (updater) => this.updateRowSelection(updater), setPagination: (updater) => this.updateTableCore(updater, PAGINATION_STATE_KEY, this.paginationChange), setColumnSizing: (updater) => this.updateTableCore(updater, COLUMN_SIZING_STATE_KEY, this.columnSizingChange), setColumnSizingInfo: (updater) => this.updateColumnSizingInfo(updater), setColumnVisibility: (updater) => this.updateTableCore(updater, COLUMN_VISIBILITY_STATE_KEY, this.columnVisibilityChange), setColumnOrder: (updater) => {
                this.updateTableCore(updater, COLUMN_ORDER_STATE_KEY);
            } }));
    }
    setTableState(state) {
        this.tableState = Object.assign(Object.assign({}, this.tableState), state);
    }
    updateTableCore(updater, key, event = null) {
        const newTableState = Object.assign({}, this.tableState);
        newTableState[key] = this.tableCore.getState(updater, this.tableState[key]);
        /**
         * Maintaining a local state of the table is necessary for the component to re-render and stay consistent with the internal state of Tanstack table.
         */
        this.setTableState(newTableState);
        this.tableCore.setState(key, this.tableState[key]);
        if (event)
            event.emit(this.tableState[key]);
    }
    updateData(updater, context) {
        this.data = this.tableCore.getState(updater, this.data);
        this.tableCore.setState('data', this.data);
        this.cellValueChange.emit(Object.assign(Object.assign({}, context), { data: this.data }));
    }
    updateRowSelection(updater) {
        this.updateTableCore(updater, ROW_SELECTION_STATE_KEY);
        this.rowSelectionChange.emit(this.tableCore
            .getTableInstance()
            .getSelectedRowModel()
            .flatRows.map((row) => {
            row.original['id'] = row.id;
            return row.original;
        }));
    }
    updateColumnSizingInfo(updater) {
        this.updateTableCore(updater, COLUMN_SIZING_INFO_STATE_KEY);
        this.isColumnResizing = !this.tableState.columnSizingInfo.isResizingColumn ? false : true;
    }
    renderToolBar() {
        return (this.toolbar &&
            this.toolbarOptions && (h("modus-table-toolbar", { context: this._context }, h("div", { slot: "group-left" }, h("slot", { name: "groupLeft" })), h("div", { slot: "group-right" }, h("slot", { name: "groupRight" })))));
    }
    renderMain() {
        const { displayOptions: { borderless, cellBorderless }, } = this._context;
        const tableContainerClass = {
            'table-container': true,
            borderless: borderless,
        };
        return (h(Fragment, null, h("div", { class: tableContainerClass, style: { maxHeight: this.maxHeight } }, this.renderTable(), !this.fullWidth && (h("modus-table-filler-column", { container: this.element, "summary-row": this.summaryRow, "cell-borderless": cellBorderless }))), h("slot", { name: "customFooter" })));
    }
    renderTable() {
        var _a, _b;
        const { tableInstance: { getTotalSize }, } = this._context;
        const totalSize = getTotalSize();
        const tableMainClass = `
      ${((_a = this.displayOptions) === null || _a === void 0 ? void 0 : _a.borderless) ? 'borderless' : ''}
      ${((_b = this.displayOptions) === null || _b === void 0 ? void 0 : _b.cellBorderless) ? 'cell-borderless' : ''}
      ${this.classByDensity.get(this.density)}
    `;
        const tableStyle = this.fullWidth
            ? { width: '100%', tableLayout: 'fixed' }
            : totalSize > 0
                ? { width: `${totalSize}px`, tableLayout: 'fixed' }
                : { tableLayout: 'fixed' };
        return (h("table", { "data-test-id": "main-table", class: tableMainClass, style: tableStyle }, this.renderTableHeader(), this.renderTableBody(), this.renderTableFooter()));
    }
    renderTableHeader() {
        const setColumnResizing = (val) => (this.isColumnResizing = val);
        const getColumnResizing = () => this.isColumnResizing;
        const onDragStart = (event, id, elementRef, mouseInteracted) => this.handleDragStart(event, id, elementRef, mouseInteracted);
        return (h(ModusTableHeader, { context: this._context, setColumnResizing: setColumnResizing, getColumnResizing: getColumnResizing, onDragStart: onDragStart }));
    }
    renderTableBody() {
        return h(ModusTableBody, { context: this._context });
    }
    renderTableFooter() {
        return this.summaryRow ? h(ModusTableFooter, { context: this._context }) : null;
    }
    renderPagination() {
        return this.pagination && h(ModusTablePagination, { context: this._context });
    }
    render() {
        var _a;
        return (h(Host, { key: 'dc057c6d1aceaae575f3bb65ba64a79c06115462', id: this._id }, h("div", { key: 'a2d8bbbe6dc0ac54854b4cf2c4b7b1792c203d93', style: { maxWidth: this.maxWidth } }, this.renderToolBar(), this.renderMain(), this.renderPagination(), h(ModusTableColumnDragItem, { key: 'b82f64eda607d40a45a76c91775b08a0efa36355', draggingState: this.itemDragState }), h(ModusTableColumnDropIndicator, { key: 'fdbb963ae68a35fba7f18da219ccc6ee1e053f5a', position: (_a = this.itemDragState) === null || _a === void 0 ? void 0 : _a.dropIndicator }), h("modus-table-row-actions-menu", { key: 'ac765be499f848eb2c155015aeb2e7a73edbd3a0', context: this._context }))));
    }
    static get is() { return "modus-table"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["modus-table.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modus-table.css"]
        };
    }
    static get properties() {
        return {
            "columns": {
                "type": "unknown",
                "mutable": true,
                "complexType": {
                    "original": "ModusTableColumn<unknown>[]",
                    "resolved": "ModusTableColumn<unknown, unknown>[]",
                    "references": {
                        "ModusTableColumn": {
                            "location": "import",
                            "path": "./models/modus-table.models",
                            "id": "src/components/modus-table/models/modus-table.models.ts::ModusTableColumn"
                        }
                    }
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(Required) To display headers in the table."
                }
            },
            "columnResize": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "column-resize",
                "reflect": false,
                "defaultValue": "false"
            },
            "columnReorder": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(Optional) To allow column reordering."
                },
                "attribute": "column-reorder",
                "reflect": false,
                "defaultValue": "false"
            },
            "data": {
                "type": "unknown",
                "mutable": true,
                "complexType": {
                    "original": "unknown[]",
                    "resolved": "unknown[]",
                    "references": {}
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(Required) To display data in the table."
                }
            },
            "density": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'relaxed' | 'comfortable' | 'compact'",
                    "resolved": "\"comfortable\" | \"compact\" | \"relaxed\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The density of the table."
                },
                "attribute": "density",
                "reflect": false,
                "defaultValue": "'relaxed'"
            },
            "displayOptions": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "ModusTableDisplayOptions",
                    "resolved": "ModusTableDisplayOptions",
                    "references": {
                        "ModusTableDisplayOptions": {
                            "location": "import",
                            "path": "./models/modus-table.models",
                            "id": "src/components/modus-table/models/modus-table.models.ts::ModusTableDisplayOptions"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "(Optional) To control display options of table."
                },
                "defaultValue": "{\n    borderless: false,\n    cellBorderless: false,\n  }"
            },
            "hover": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(Optional) To enable row hover in table."
                },
                "attribute": "hover",
                "reflect": false,
                "defaultValue": "false"
            },
            "fullWidth": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "full-width",
                "reflect": false,
                "defaultValue": "false"
            },
            "maxHeight": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(Optional) To display a vertical scrollbar when the height is exceeded."
                },
                "attribute": "max-height",
                "reflect": false
            },
            "maxWidth": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(Optional) To display a horizontal scrollbar when the width is exceeded."
                },
                "attribute": "max-width",
                "reflect": false
            },
            "pageSizeList": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "number[]",
                    "resolved": "number[]",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "defaultValue": "PAGINATION_DEFAULT_SIZES"
            },
            "pagination": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "pagination",
                "reflect": false
            },
            "rowActions": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "ModusTableRowAction[]",
                    "resolved": "ModusTableRowAction[]",
                    "references": {
                        "ModusTableRowAction": {
                            "location": "import",
                            "path": "./models/modus-table.models",
                            "id": "src/components/modus-table/models/modus-table.models.ts::ModusTableRowAction"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(Optional) Actions that can be performed on each row. A maximum of 4 icons will be shown, including overflow menu and expand icons."
                },
                "defaultValue": "[]"
            },
            "rowsExpandable": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(Optional) To display expanded rows."
                },
                "attribute": "rows-expandable",
                "reflect": false,
                "defaultValue": "false"
            },
            "rowSelection": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(Optional) To display checkbox."
                },
                "attribute": "row-selection",
                "reflect": false,
                "defaultValue": "false"
            },
            "manualPaginationOptions": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "ModusTableManualPaginationOptions",
                    "resolved": "ModusTableManualPaginationOptions",
                    "references": {
                        "ModusTableManualPaginationOptions": {
                            "location": "import",
                            "path": "./models/modus-table.models",
                            "id": "src/components/modus-table/models/modus-table.models.ts::ModusTableManualPaginationOptions"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(Optional) To enable manual pagination mode. When enabled, the table will not automatically paginate rows, instead will expect the current page index and other details to be passed."
                }
            },
            "manualSortingOptions": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "ModusTableManualSortingOptions",
                    "resolved": "ModusTableManualSortingOptions",
                    "references": {
                        "ModusTableManualSortingOptions": {
                            "location": "import",
                            "path": "./models/modus-table.models",
                            "id": "src/components/modus-table/models/modus-table.models.ts::ModusTableManualSortingOptions"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(Optional) To set modus-table in manual sorting mode."
                }
            },
            "rowSelectionOptions": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "ModusTableRowSelectionOptions",
                    "resolved": "ModusTableRowSelectionOptions",
                    "references": {
                        "ModusTableRowSelectionOptions": {
                            "location": "import",
                            "path": "./models/modus-table.models",
                            "id": "src/components/modus-table/models/modus-table.models.ts::ModusTableRowSelectionOptions"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(Optional) To control multiple row selection."
                },
                "defaultValue": "{\n    multiple: false,\n    subRowSelection: false,\n  }"
            },
            "showSortIconOnHover": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(Optional) To display sort icon on hover."
                },
                "attribute": "show-sort-icon-on-hover",
                "reflect": false,
                "defaultValue": "false"
            },
            "sort": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(Optional) To sort data in table."
                },
                "attribute": "sort",
                "reflect": false,
                "defaultValue": "false"
            },
            "sortIconStyle": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'alphabetical' | 'directional'",
                    "resolved": "\"alphabetical\" | \"directional\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(Optional) To display a-z or arrow sort icons."
                },
                "attribute": "sort-icon-style",
                "reflect": false,
                "defaultValue": "'alphabetical'"
            },
            "summaryRow": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(Optional) To display summary row."
                },
                "attribute": "summary-row",
                "reflect": false,
                "defaultValue": "false"
            },
            "toolbar": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(Optional) To display a toolbar for the table."
                },
                "attribute": "toolbar",
                "reflect": false,
                "defaultValue": "false"
            },
            "toolbarOptions": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "ModusTableToolbarOptions | null",
                    "resolved": "ModusTableToolbarOptions",
                    "references": {
                        "ModusTableToolbarOptions": {
                            "location": "import",
                            "path": "./models/modus-table.models",
                            "id": "src/components/modus-table/models/modus-table.models.ts::ModusTableToolbarOptions"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(Optional) To display a toolbar, which allows access to table operations like hiding columns."
                },
                "defaultValue": "null"
            },
            "defaultSort": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "ModusTableColumnSort",
                    "resolved": "ColumnSort",
                    "references": {
                        "ModusTableColumnSort": {
                            "location": "import",
                            "path": "./models/modus-table.models",
                            "id": "src/components/modus-table/models/modus-table.models.ts::ModusTableColumnSort"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(Optional) To set the default sorting for the table."
                }
            },
            "wrapText": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(Optional) To wrap text that overflows the cell."
                },
                "attribute": "wrap-text",
                "reflect": false,
                "defaultValue": "false"
            }
        };
    }
    static get states() {
        return {
            "itemDragState": {},
            "dragAndDropObj": {},
            "tableState": {},
            "tableCore": {},
            "cells": {}
        };
    }
    static get events() {
        return [{
                "method": "cellValueChange",
                "name": "cellValueChange",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Emits the cell value that was edited"
                },
                "complexType": {
                    "original": "ModusTableCellValueChange",
                    "resolved": "ModusTableCellValueChange",
                    "references": {
                        "ModusTableCellValueChange": {
                            "location": "import",
                            "path": "./models/modus-table.models",
                            "id": "src/components/modus-table/models/modus-table.models.ts::ModusTableCellValueChange"
                        }
                    }
                }
            }, {
                "method": "cellLinkClick",
                "name": "cellLinkClick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Emits the link that was clicked"
                },
                "complexType": {
                    "original": "ModusTableCellLink",
                    "resolved": "ModusTableCellLink",
                    "references": {
                        "ModusTableCellLink": {
                            "location": "import",
                            "path": "./models/modus-table.models",
                            "id": "src/components/modus-table/models/modus-table.models.ts::ModusTableCellLink"
                        }
                    }
                }
            }, {
                "method": "columnOrderChange",
                "name": "columnOrderChange",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Emits columns in the updated order"
                },
                "complexType": {
                    "original": "ModusTableColumnOrderState",
                    "resolved": "string[]",
                    "references": {
                        "ModusTableColumnOrderState": {
                            "location": "import",
                            "path": "./models/modus-table.models",
                            "id": "src/components/modus-table/models/modus-table.models.ts::ModusTableColumnOrderState"
                        }
                    }
                }
            }, {
                "method": "columnSizingChange",
                "name": "columnSizingChange",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Emits latest column size"
                },
                "complexType": {
                    "original": "ModusTableColumnSizingState",
                    "resolved": "{ [x: string]: number; }",
                    "references": {
                        "ModusTableColumnSizingState": {
                            "location": "import",
                            "path": "./models/modus-table.models",
                            "id": "src/components/modus-table/models/modus-table.models.ts::ModusTableColumnSizingState"
                        }
                    }
                }
            }, {
                "method": "columnVisibilityChange",
                "name": "columnVisibilityChange",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Emits visibility state of each column"
                },
                "complexType": {
                    "original": "ModusTableColumnVisibilityState",
                    "resolved": "{ [x: string]: boolean; }",
                    "references": {
                        "ModusTableColumnVisibilityState": {
                            "location": "import",
                            "path": "./models/modus-table.models",
                            "id": "src/components/modus-table/models/modus-table.models.ts::ModusTableColumnVisibilityState"
                        }
                    }
                }
            }, {
                "method": "rowActionClick",
                "name": "rowActionClick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires when a row action is clicked."
                },
                "complexType": {
                    "original": "ModusTableRowActionClick",
                    "resolved": "ModusTableRowActionClick",
                    "references": {
                        "ModusTableRowActionClick": {
                            "location": "import",
                            "path": "./models/modus-table.models",
                            "id": "src/components/modus-table/models/modus-table.models.ts::ModusTableRowActionClick"
                        }
                    }
                }
            }, {
                "method": "rowExpanded",
                "name": "rowExpanded",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Emits expanded state of the columns"
                },
                "complexType": {
                    "original": "ModusTableExpandedState",
                    "resolved": "boolean | { [x: string]: boolean; }",
                    "references": {
                        "ModusTableExpandedState": {
                            "location": "import",
                            "path": "./models/modus-table.models",
                            "id": "src/components/modus-table/models/modus-table.models.ts::ModusTableExpandedState"
                        }
                    }
                }
            }, {
                "method": "rowSelectionChange",
                "name": "rowSelectionChange",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Emits rows selected"
                },
                "complexType": {
                    "original": "unknown",
                    "resolved": "unknown",
                    "references": {}
                }
            }, {
                "method": "sortChange",
                "name": "sortChange",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Emits column sort order"
                },
                "complexType": {
                    "original": "ModusTableSortingState",
                    "resolved": "ColumnSort[]",
                    "references": {
                        "ModusTableSortingState": {
                            "location": "import",
                            "path": "./models/modus-table.models",
                            "id": "src/components/modus-table/models/modus-table.models.ts::ModusTableSortingState"
                        }
                    }
                }
            }, {
                "method": "paginationChange",
                "name": "paginationChange",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Emits selected page index and size"
                },
                "complexType": {
                    "original": "ModusTablePaginationState",
                    "resolved": "PaginationState",
                    "references": {
                        "ModusTablePaginationState": {
                            "location": "import",
                            "path": "./models/modus-table.models",
                            "id": "src/components/modus-table/models/modus-table.models.ts::ModusTablePaginationState"
                        }
                    }
                }
            }];
    }
    static get methods() {
        return {
            "getColumnData": {
                "complexType": {
                    "signature": "(accessorKey: string) => Promise<unknown[]>",
                    "parameters": [{
                            "name": "accessorKey",
                            "type": "string",
                            "docs": ": Column name as key."
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "Column": {
                            "location": "import",
                            "path": "@tanstack/table-core",
                            "id": ""
                        }
                    },
                    "return": "Promise<unknown[]>"
                },
                "docs": {
                    "text": "Returns data of a column.",
                    "tags": [{
                            "name": "param",
                            "text": "accessorKey : Column name as key."
                        }, {
                            "name": "returns",
                            "text": ": Column data as Array or empty array."
                        }]
                }
            },
            "getEditableCell": {
                "complexType": {
                    "signature": "(rowIndex: string, columnId: string) => Promise<void>",
                    "parameters": [{
                            "name": "rowIndex",
                            "type": "string",
                            "docs": "The index of the row."
                        }, {
                            "name": "columnId",
                            "type": "string",
                            "docs": "The ID of the column."
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Returns whether a cell is editable based on row index and column ID.",
                    "tags": [{
                            "name": "param",
                            "text": "rowIndex The index of the row."
                        }, {
                            "name": "param",
                            "text": "columnId The ID of the column."
                        }, {
                            "name": "returns",
                            "text": "Boolean indicating if the cell is editable."
                        }]
                }
            },
            "toggleColumnVisibility": {
                "complexType": {
                    "signature": "(columnId: string, show: boolean) => Promise<void>",
                    "parameters": [{
                            "name": "columnId",
                            "type": "string",
                            "docs": "Column id"
                        }, {
                            "name": "show",
                            "type": "boolean",
                            "docs": "Boolean value decides to visibility of column"
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Toggle the table column visibility",
                    "tags": [{
                            "name": "param",
                            "text": "columnId Column id"
                        }, {
                            "name": "param",
                            "text": "show Boolean value decides to visibility of column"
                        }]
                }
            }
        };
    }
    static get elementRef() { return "element"; }
    static get watchers() {
        return [{
                "propName": "columns",
                "methodName": "onColumnsChange"
            }, {
                "propName": "columnResize",
                "methodName": "onColumnResizeChange"
            }, {
                "propName": "columnReorder",
                "methodName": "onColumnReorderChange"
            }, {
                "propName": "data",
                "methodName": "onDataChange"
            }, {
                "propName": "pagination",
                "methodName": "onPaginationChange"
            }, {
                "propName": "rowsExpandable",
                "methodName": "onRowsExpandableChange"
            }, {
                "propName": "rowSelection",
                "methodName": "onRowSlectionChange"
            }, {
                "propName": "manualPaginationOptions",
                "methodName": "onManualPaginationOptionsChange"
            }, {
                "propName": "manualSortingOptions",
                "methodName": "onManualSortOptionsChange"
            }, {
                "propName": "rowSelectionOptions",
                "methodName": "onRowSelectionOptionsChange"
            }, {
                "propName": "sort",
                "methodName": "onSortChange"
            }, {
                "propName": "toolbarOptions",
                "methodName": "onToolbarOptionsChange"
            }, {
                "propName": "defaultSort",
                "methodName": "onDefaultSortChange"
            }, {
                "propName": "itemDragState",
                "methodName": "handleItemDragState"
            }];
    }
    static get listeners() {
        return [{
                "name": "click",
                "method": "documentClickHandler",
                "target": "document",
                "capture": false,
                "passive": false
            }];
    }
}
