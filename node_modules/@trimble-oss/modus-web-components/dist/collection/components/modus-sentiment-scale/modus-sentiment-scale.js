// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { h } from "@stencil/core";
import { SMILEYS_TYPE_MAP, THUMBS_TYPE_MAP, THUMB_SENTIMENT_TYPE, SMILEY_SENTIMENT_TYPE, } from "./modus-sentiment-scale.constants";
import { SentimentIconMap } from "./SentimentIconMap";
export class ModusSentimentScale {
    constructor() {
        this.ariaLabel = undefined;
        this.type = 'smileys';
        this.disabled = false;
        this.selected = undefined;
    }
    getSentimentScaleMap() {
        if (this.type === THUMB_SENTIMENT_TYPE) {
            return THUMBS_TYPE_MAP;
        }
        else if (this.type === SMILEY_SENTIMENT_TYPE) {
            return SMILEYS_TYPE_MAP;
        }
        return null;
    }
    handleSentimentClick(selected) {
        if (!this.disabled) {
            this.selected = selected;
            this.sentimentSelection.emit(selected);
        }
    }
    handleKeyDown(event, id) {
        if (event.code.toUpperCase() !== 'ENTER') {
            return;
        }
        this.handleSentimentClick(id);
    }
    render() {
        const tabIndexValue = this.disabled ? -1 : 0;
        const iconsMap = this.getSentimentScaleMap();
        let containerClass = `${this.type + '-container'} ${this.disabled ? ' disabled' : ''}`;
        return (h("div", { key: '761003c811ba9eb61083c18cc721b1c287e91033', class: "sentiment-scale-container", "aria-disabled": this.disabled ? 'true' : undefined, "aria-label": this.ariaLabel || undefined, role: "group" }, iconsMap &&
            Array.from(iconsMap).map(([key, value]) => {
                const isIconSelected = key === this.selected;
                let iconName = key;
                if (isIconSelected) {
                    containerClass = `${containerClass} selected`;
                }
                else {
                    iconName = `${key}-outlined`;
                    containerClass = `${containerClass.replace('selected', '')} `;
                }
                return (h("div", { "aria-label": value, "aria-selected": isIconSelected ? isIconSelected.toString() : undefined, role: "button", tabIndex: tabIndexValue, class: containerClass, onClick: () => this.handleSentimentClick(key), onKeyDown: (event) => this.handleKeyDown(event, key) }, h(SentimentIconMap, { icon: iconName, size: `${this.type === THUMB_SENTIMENT_TYPE ? '32' : '24'}` })));
            })));
    }
    static get is() { return "modus-sentiment-scale"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["modus-sentiment-scale.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modus-sentiment-scale.css"]
        };
    }
    static get properties() {
        return {
            "ariaLabel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string | null",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The sentiment scale's aria-label."
                },
                "attribute": "aria-label",
                "reflect": false
            },
            "type": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "ModusSentimentScaleType",
                    "resolved": "\"smileys\" | \"thumbs\"",
                    "references": {
                        "ModusSentimentScaleType": {
                            "location": "import",
                            "path": "./modus-sentiment-scale.models",
                            "id": "src/components/modus-sentiment-scale/modus-sentiment-scale.models.tsx::ModusSentimentScaleType"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The type of icons to be displayed."
                },
                "attribute": "type",
                "reflect": false,
                "defaultValue": "'smileys'"
            },
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether the sentiment scale is disabled."
                },
                "attribute": "disabled",
                "reflect": false,
                "defaultValue": "false"
            }
        };
    }
    static get states() {
        return {
            "selected": {}
        };
    }
    static get events() {
        return [{
                "method": "sentimentSelection",
                "name": "sentimentSelection",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires the selected sentiment."
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }];
    }
}
