// eslint-disable-next-line
import { h, Host } from "@stencil/core";
export class ModusToolbar {
    constructor() {
        this.ariaLabel = undefined;
        this.disabled = undefined;
    }
    createButton(child) {
        const className = 'modus-button';
        const iconOnly = child.getAttribute('icon-only');
        const ariaLabel = child.getAttribute('aria-label') || 'button';
        const label = child.textContent ? child.textContent.trim() : '';
        return (h("modus-button", { ariaLabel: ariaLabel, "button-style": "borderless", color: "secondary", class: className, disabled: this.disabled, "icon-only": iconOnly }, label));
    }
    renderButtons() {
        const children = Array.from(this.host.children);
        const buttons = children.map((child) => {
            if (child.tagName === 'MODUS-BUTTON') {
                return this.createButton(child);
            }
            else if (child.tagName === 'MODUS-TOOLTIP') {
                const tooltipChild = child.children[0];
                const tooltipText = child.getAttribute('text');
                const tooltipPosition = child.getAttribute('position');
                if (tooltipChild && tooltipChild.tagName === 'MODUS-BUTTON') {
                    return (h("modus-tooltip", { text: tooltipText, position: tooltipPosition }, this.createButton(tooltipChild)));
                }
            }
            else {
                return h("modus-divider", null);
            }
        });
        return buttons;
    }
    render() {
        return (h(Host, { key: 'e4df2e713914a285bba30e91f31523a86427eb77', "aria-label": this.ariaLabel || undefined, role: "toolbar" }, this.renderButtons()));
    }
    static get is() { return "modus-toolbar"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["modus-toolbar.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modus-toolbar.css"]
        };
    }
    static get properties() {
        return {
            "ariaLabel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string | null",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The button's aria-label."
                },
                "attribute": "aria-label",
                "reflect": false
            },
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Disables the button."
                },
                "attribute": "disabled",
                "reflect": false
            }
        };
    }
    static get elementRef() { return "host"; }
}
