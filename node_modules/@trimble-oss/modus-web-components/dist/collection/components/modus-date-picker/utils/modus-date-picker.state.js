import { ISO_DATE_FORMAT } from "../../modus-date-input/utils/modus-date-input.formatter";
export default class ModusDatePickerState {
    constructor(el) {
        var _a;
        this.isOpen = false;
        this.element = el;
        this.element.showCalendarIcon = ((_a = this.element.showCalendarIcon) === null || _a === void 0 ? void 0 : _a.toString().toUpperCase()) !== 'FALSE';
        this.max = this.parseDate(this.element.max);
        this.min = this.parseDate(this.element.min);
        this.refresh();
    }
    getDate() {
        return this.date;
    }
    getMaxDateAllowed() {
        return this.max;
    }
    getMinDateAllowed() {
        return this.min;
    }
    setDate(val) {
        // Converting to ISO8601 'yyyy-mm-dd' format
        if (Number(val)) {
            const year = val.getFullYear();
            const month = (val.getMonth() + 1).toString().padStart(2, '0'); // Zero based number system for months
            const date = val.getDate().toString().padStart(2, '0');
            this.element.value = `${year}-${month}-${date}`;
            this.element.errorText = null;
            this.element.focusInput();
            this.date = val;
        }
    }
    setError(message = null) {
        this.element.errorText = message;
    }
    validateInput() {
        this.element.validate();
    }
    refresh() {
        this.date = this.parseDate(this.element.value);
    }
    parseDate(date) {
        if (!date) {
            return null;
        }
        // Note: Modus Date Input component's value is always in 'yyyy-mm-dd' format
        const dateISORegex = new RegExp(ISO_DATE_FORMAT);
        const parse = dateISORegex.exec(date);
        if (parse) {
            // first element returns the whole date string
            parse.shift();
            return new Date(parseFloat(parse[0]), parseFloat(parse[1]) - 1, // Zero based number system for months
            parseFloat(parse[2]));
        }
        return null;
    }
    toggleCalendar(val = null) {
        this.isOpen = val !== null ? val : !this.isOpen;
    }
    isCalendarOpen() {
        return this.isOpen;
    }
}
