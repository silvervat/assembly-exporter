// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { h } from "@stencil/core";
import { IconCheckCircle } from "../../icons/svgs/icon-check-circle";
import { IconError } from "../../icons/svgs/icon-error";
import { IconInfo } from "../../icons/svgs/icon-info";
import { IconWarning } from "../../icons/svgs/icon-warning";
import { IconClose } from "../../icons/svgs/icon-close";
export class ModusAlert {
    constructor() {
        this.classByType = new Map([
            ['error', 'type-error'],
            ['info', 'type-info'],
            ['info-gray', 'type-info-gray'],
            ['info-gray-dark', 'type-info-gray-dark'],
            ['success', 'type-success'],
            ['warning', 'type-warning'],
        ]);
        this.infoTypes = ['info', 'info-gray', 'info-gray-dark'];
        this.ariaLabel = undefined;
        this.buttonAriaLabel = undefined;
        this.buttonText = undefined;
        this.dismissible = undefined;
        this.message = undefined;
        this.type = 'info';
    }
    elementKeyupHandler(event) {
        switch (event.code) {
            case 'Escape':
                if (!this.dismissible) {
                    return;
                }
                this.dismissClick.emit();
                break;
        }
    }
    render() {
        var _a, _b, _c;
        const iconSize = '24';
        const MAX_LENGTH = 300;
        const className = {
            alert: true,
            'with-action-button': (this.dismissible && ((_a = this.buttonText) === null || _a === void 0 ? void 0 : _a.length) > 0) || ((_b = this.buttonText) === null || _b === void 0 ? void 0 : _b.length) > 0,
        };
        const typeClass = this.classByType.get(this.type);
        if (typeClass != undefined) {
            className[typeClass] = true;
        }
        return (h("div", { key: '6387fc2db69237ee764673542b75d14e13553481', "aria-label": this.ariaLabel || undefined, class: className, role: "alert" }, h("div", { key: '8b108f38bcafbfe4ac4e2e1301de1fb129ce73aa', class: "icon" }, this.type === 'error' ? h(IconError, { size: iconSize }) : null, this.infoTypes.includes(this.type) ? h(IconInfo, { size: iconSize }) : null, this.type === 'success' ? h(IconCheckCircle, { size: iconSize }) : null, this.type === 'warning' ? h(IconWarning, { size: iconSize }) : null), h("div", { key: '9d7ae86209877e66cb7b4f9cf2bd2faf892f6e26', class: "message" }, this.message && this.message.length > MAX_LENGTH ? `${this.message.substring(0, MAX_LENGTH)}...` : this.message, h("slot", { key: '5e3d771ecbaa77d96b72be774f7939ae67db6bd7' })), h("div", { key: '125451a1aa87b14901085aef746e492e4fc915e1', class: "alert-buttons-container" }, ((_c = this.buttonText) === null || _c === void 0 ? void 0 : _c.length) > 0 && (h("modus-button", { class: "action-button", buttonStyle: "outline", color: "secondary", size: "medium", ariaLabel: this.buttonAriaLabel, onButtonClick: () => this.actionClick.emit(), onKeyDown: (e) => this.handleKeyDown(e, 'action') }, this.buttonText)), this.dismissible && (h("div", { class: "icon-close-container", "aria-label": "Dismiss alert", role: "button", tabIndex: 0, onClick: () => this.dismissClick.emit(), onKeyDown: (e) => this.handleKeyDown(e, 'dismiss') }, h(IconClose, { size: "18" }))))));
    }
    handleKeyDown(e, buttonType) {
        if (e.key.toUpperCase() === 'ENTER') {
            if (buttonType === 'dismiss') {
                this.dismissClick.emit();
                return;
            }
            this.actionClick.emit();
        }
    }
    static get is() { return "modus-alert"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["modus-alert.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modus-alert.css"]
        };
    }
    static get properties() {
        return {
            "ariaLabel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string | null",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The alert's aria-label."
                },
                "attribute": "aria-label",
                "reflect": false
            },
            "buttonAriaLabel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string | null",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The button's aria-label."
                },
                "attribute": "button-aria-label",
                "reflect": false
            },
            "buttonText": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string | null",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The button's text"
                },
                "attribute": "button-text",
                "reflect": false
            },
            "dismissible": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether the alert has a dismiss button"
                },
                "attribute": "dismissible",
                "reflect": false
            },
            "message": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The alert message"
                },
                "attribute": "message",
                "reflect": false
            },
            "type": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'error' | 'info' | 'info-gray' | 'info-gray-dark' | 'success' | 'warning'",
                    "resolved": "\"error\" | \"info\" | \"info-gray\" | \"info-gray-dark\" | \"success\" | \"warning\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The type of alert, sets the color and icon to render"
                },
                "attribute": "type",
                "reflect": false,
                "defaultValue": "'info'"
            }
        };
    }
    static get events() {
        return [{
                "method": "dismissClick",
                "name": "dismissClick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires when the alert is dismissed"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "actionClick",
                "name": "actionClick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that firest when the action button is clicked"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }];
    }
    static get listeners() {
        return [{
                "name": "keyup",
                "method": "elementKeyupHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
}
