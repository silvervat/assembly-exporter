import { h, // eslint-disable-line @typescript-eslint/no-unused-vars
 } from "@stencil/core";
import { ModusIconMap } from "../../icons/ModusIconMap";
import DateInputFormatter from "./utils/modus-date-input.formatter";
export class ModusDateInput {
    constructor() {
        this.classBySize = new Map([
            ['medium', 'medium'],
            ['large', 'large'],
        ]);
        this._dateInputId = `date-input-${Math.random().toString().slice(2, 7)}`;
        this._altFormatters = [];
        // TODO: Auto formatting for single tokens 'm' and 'd' is tricky because user can input double digits
        this.autoFormat = false;
        this.allowedCharsRegex = undefined;
        this.ariaLabel = undefined;
        this.autoFocusInput = undefined;
        this.disabled = undefined;
        this.disableValidation = undefined;
        this.errorText = undefined;
        this.fillerDate = undefined;
        this.format = 'mm/dd/yyyy';
        this.altFormats = undefined;
        this.helperText = undefined;
        this.label = undefined;
        this.placeholder = undefined;
        this.readOnly = undefined;
        this.required = undefined;
        this.showCalendarIcon = undefined;
        this.size = 'medium';
        this.type = 'single';
        this.validText = undefined;
        this.min = undefined;
        this.max = undefined;
        this.value = undefined;
        this._dateDisplay = undefined;
    }
    handleFillerDateChange(val) {
        this._formatter = new DateInputFormatter(val, this.format);
    }
    handleFormatChange(val) {
        this._formatter = new DateInputFormatter(this.fillerDate, val);
        this.handleValueChange(this.value);
    }
    handleAltFormatsChange(altFormats) {
        if (!altFormats) {
            return;
        }
        this._altFormatters = altFormats
            .split('|')
            .map((format) => format.trim())
            .filter(Boolean)
            .map((format) => new DateInputFormatter(this.fillerDate, format));
    }
    handleValueChange(val) {
        if (!this._isEditing) {
            this._dateDisplay = this._formatter.formatDisplayString(val);
        }
        this.valueChange.emit({
            value: val,
            type: this.type,
            inputString: this._dateDisplay,
        });
    }
    componentWillLoad() {
        this.handleFormatChange(this.format);
        this.handleAltFormatsChange(this.altFormats);
        this._dateDisplay = this._formatter.formatDisplayString(this.value);
        this.setDefaultAllowedKeysRegex(this.autoFormat);
    }
    /** Methods */
    /** Focus the input. */
    async focusInput() {
        this._dateInput.focus();
    }
    /** Validate the input. */
    async validate() {
        this.validateInput(this._dateDisplay);
    }
    /** Handlers */
    handleCalendarClick() {
        this.calendarIconClicked.emit({
            value: this.value,
            type: this.type,
            inputString: this._dateDisplay,
        });
    }
    handleDefaultKeyDown(e, callback) {
        const code = e.code.toUpperCase();
        if (code === 'ENTER' || code === 'SPACE')
            callback();
    }
    handleBlur() {
        this._isEditing = false;
        this.updateDateFromAltFormats();
        this.validateInput(this._dateDisplay);
        this.dateInputBlur.emit({
            value: this.value,
            type: this.type,
            inputString: this._dateDisplay,
        });
    }
    handleInputKeyPress(event) {
        const keyIsValid = this.keyIsValidDateCharacter(event.key);
        if (!keyIsValid) {
            event.preventDefault();
        }
        return keyIsValid;
    }
    handleInputKeyDown(event) {
        if (event.key.toLowerCase() === 'enter') {
            this.handleBlur();
        }
    }
    handleOnInput(event) {
        var _a;
        this._isEditing = true;
        event.stopPropagation();
        event.preventDefault();
        const inputString = (_a = event.currentTarget) === null || _a === void 0 ? void 0 : _a.value;
        this._dateDisplay = inputString;
        this.value = this._formatter.parseDisplayString(inputString.trim());
    }
    // Helpers
    clearValidation() {
        this.errorText = null;
    }
    /** Check if the input string matches any of the alternative formats. */
    updateDateFromAltFormats() {
        if (this.value) {
            this._dateDisplay = this._formatter.formatDisplayString(this.value);
            return;
        }
        if (!this._dateDisplay)
            return;
        const displayDate = this._dateDisplay.trim();
        // if there is no value for the default format, check the alternative formats
        for (const formatter of this._altFormatters) {
            const result = formatter.parseDisplayString(displayDate);
            if (result) {
                this._dateDisplay = this._formatter.formatDisplayString(result);
                this.value = result;
                return;
            }
        }
    }
    keyIsValidDateCharacter(key) {
        if (!this.allowedCharsRegex)
            return true;
        const dateCharacterRegex = new RegExp(this.allowedCharsRegex);
        return dateCharacterRegex.test(key);
    }
    setDefaultAllowedKeysRegex(autoFormat) {
        if (!this.allowedCharsRegex) {
            this.allowedCharsRegex = autoFormat ? /\d/gi : /.*/;
        }
    }
    validateInput(inputString) {
        if (this.disableValidation)
            return;
        if (!inputString) {
            if (this.required) {
                this.errorText = 'Required';
                this.valueError.emit(this.errorText);
            }
            else {
                this.clearValidation();
            }
        }
        else if (!this.value) {
            this.errorText = 'Invalid date';
            this.valueError.emit(this.errorText);
        }
        else {
            this.validateMinMax();
        }
    }
    validateMinMax() {
        const min = this._formatter.parseIsoToDate(this.min);
        const max = this._formatter.parseIsoToDate(this.max);
        const value = this._formatter.parseIsoToDate(this.value);
        if (min && min > value) {
            min.setUTCDate(min.getDate() - 1);
            this.errorText = `Select a date after ${this._formatter.formatDisplayString(min.toISOString())}`;
            this.valueError.emit(this.errorText);
        }
        else if (max && max < value) {
            max.setUTCDate(max.getDate() + 1);
            this.errorText = `Select a date before ${this._formatter.formatDisplayString(max.toISOString())}`;
            this.valueError.emit(this.errorText);
        }
        else {
            this.clearValidation();
        }
    }
    render() {
        var _a;
        const className = `modus-date-input ${this.disabled ? 'disabled' : ''}`;
        return (h("div", { key: 'bf68b3a862d5ac7dafaf157720b5a6c6d0c0b0b2', class: className }, this.label || this.required ? (h("div", { class: "label-container" }, this.label ? h("label", { htmlFor: this._dateInputId }, this.label) : null, this.required ? h("span", { class: "required" }, "*") : null, this.helperText ? h("label", { class: "sub-text helper" }, this.helperText) : null)) : null, h("div", { key: 'ab7291ae18d2e9b83930142fff070068fbc49b01', class: `input-container ${this.errorText ? 'error' : this.validText ? 'valid' : ''} ${this.classBySize.get(this.size)}`, part: `input-container ${this.errorText ? 'error' : this.validText ? 'valid' : ''}` }, h("input", { key: 'a6cfc3cf6dc78f1a76d65635ec34ccecf96ddd36', "aria-invalid": !!this.errorText, "aria-label": this.ariaLabel || undefined, "aria-required": (_a = this.required) === null || _a === void 0 ? void 0 : _a.toString(), autofocus: this.autoFocusInput, class: { 'has-right-icon': this.showCalendarIcon }, disabled: this.disabled, id: this._dateInputId, onBlur: () => this.handleBlur(), onInput: (event) => this.handleOnInput(event), onKeyPress: (e) => this.handleInputKeyPress(e), onKeyDown: (e) => this.handleInputKeyDown(e), placeholder: this.placeholder, readonly: this.readOnly, ref: (el) => (this._dateInput = el), tabIndex: 0, type: "text", value: this._dateDisplay }), this.showCalendarIcon && (h("span", { class: "icons", tabIndex: 0, onKeyDown: (e) => this.handleDefaultKeyDown(e, () => this.handleCalendarClick()), onClick: () => this.handleCalendarClick(), role: "button", "aria-label": "Open calendar" }, h(ModusIconMap, { icon: "calendar", size: "16" })))), h("div", { key: '97083a2b1e4c71cb48a98b7e4d6ff2b714378730', class: "sub-text", part: "sub-text" }, this.errorText ? (h("label", { class: "error" }, this.errorText)) : this.validText ? (h("label", { class: "valid" }, this.validText)) : null)));
    }
    static get is() { return "modus-date-input"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["modus-date-input.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modus-date-input.css"]
        };
    }
    static get properties() {
        return {
            "allowedCharsRegex": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "RegExp | string",
                    "resolved": "RegExp | string",
                    "references": {
                        "RegExp": {
                            "location": "global",
                            "id": "global::RegExp"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Regular expression to allow characters while typing the input."
                },
                "attribute": "allowed-chars-regex",
                "reflect": false
            },
            "ariaLabel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string | null",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's aria-label."
                },
                "attribute": "aria-label",
                "reflect": false
            },
            "autoFocusInput": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Sets autofocus on the input."
                },
                "attribute": "auto-focus-input",
                "reflect": false
            },
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether the input is disabled."
                },
                "attribute": "disabled",
                "reflect": false
            },
            "disableValidation": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Disables default validation for the date input."
                },
                "attribute": "disable-validation",
                "reflect": false
            },
            "errorText": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Custom error text displayed for the input."
                },
                "attribute": "error-text",
                "reflect": false
            },
            "fillerDate": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Filler date is used as fillers for parts not in the display format when constructing a full date string, for 'value'. It must be in the ISO String format YYYY-MM-DD. Default is {current year}-01-01."
                },
                "attribute": "filler-date",
                "reflect": false
            },
            "format": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Format string for the date input. Default 'mm/dd/yyyy'.\nUse 'm','mm' for month, 'd','dd' for date and 'yy','yyyy' for year with any separator that is not a regular expression."
                },
                "attribute": "format",
                "reflect": false,
                "defaultValue": "'mm/dd/yyyy'"
            },
            "altFormats": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Alternative formats string for the date input split by | separator.\nUse 'm','mm' for month, 'd','dd' for date and 'yy','yyyy' for year with any separator that is not a regular expression."
                },
                "attribute": "alt-formats",
                "reflect": false
            },
            "helperText": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Custom helper text displayed below the input."
                },
                "attribute": "helper-text",
                "reflect": false
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's label."
                },
                "attribute": "label",
                "reflect": false
            },
            "placeholder": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's placeholder text."
                },
                "attribute": "placeholder",
                "reflect": false
            },
            "readOnly": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether the input's content is read-only"
                },
                "attribute": "read-only",
                "reflect": false
            },
            "required": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether the input is required."
                },
                "attribute": "required",
                "reflect": false
            },
            "showCalendarIcon": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Show a calendar icon. Note: Clicking on this icon will only emit an event `calendarIconClicked`."
                },
                "attribute": "show-calendar-icon",
                "reflect": false
            },
            "size": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'medium' | 'large'",
                    "resolved": "\"large\" | \"medium\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's size."
                },
                "attribute": "size",
                "reflect": false,
                "defaultValue": "'medium'"
            },
            "type": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "ModusDateInputType",
                    "resolved": "\"end\" | \"single\" | \"start\"",
                    "references": {
                        "ModusDateInputType": {
                            "location": "import",
                            "path": "./utils/modus-date-input.models",
                            "id": "src/components/modus-date-input/utils/modus-date-input.models.tsx::ModusDateInputType"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Denotes what type of date and the types are 'start','end','single'. Required when using `modus-date-picker`."
                },
                "attribute": "type",
                "reflect": false,
                "defaultValue": "'single'"
            },
            "validText": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's valid state text."
                },
                "attribute": "valid-text",
                "reflect": false
            },
            "min": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The minimum date allowed. The date is formatted according to ISO8601 'yyyy-mm-dd'."
                },
                "attribute": "min",
                "reflect": false
            },
            "max": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The maximum date allowed. The date is formatted according to ISO8601 'yyyy-mm-dd'."
                },
                "attribute": "max",
                "reflect": false
            },
            "value": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) A string representing the date entered to the input. The date is formatted according to ISO8601 'yyyy-mm-dd'. The displayed date format will differ from the 'value'."
                },
                "attribute": "value",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "_dateDisplay": {}
        };
    }
    static get events() {
        return [{
                "method": "calendarIconClicked",
                "name": "calendarIconClicked",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires on calendar icon click."
                },
                "complexType": {
                    "original": "ModusDateInputEventDetails",
                    "resolved": "ModusDateInputEventDetails",
                    "references": {
                        "ModusDateInputEventDetails": {
                            "location": "import",
                            "path": "./utils/modus-date-input.models",
                            "id": "src/components/modus-date-input/utils/modus-date-input.models.tsx::ModusDateInputEventDetails"
                        }
                    }
                }
            }, {
                "method": "dateInputBlur",
                "name": "dateInputBlur",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires on input value out of focus."
                },
                "complexType": {
                    "original": "ModusDateInputEventDetails",
                    "resolved": "ModusDateInputEventDetails",
                    "references": {
                        "ModusDateInputEventDetails": {
                            "location": "import",
                            "path": "./utils/modus-date-input.models",
                            "id": "src/components/modus-date-input/utils/modus-date-input.models.tsx::ModusDateInputEventDetails"
                        }
                    }
                }
            }, {
                "method": "valueChange",
                "name": "valueChange",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires on input value change."
                },
                "complexType": {
                    "original": "ModusDateInputEventDetails",
                    "resolved": "ModusDateInputEventDetails",
                    "references": {
                        "ModusDateInputEventDetails": {
                            "location": "import",
                            "path": "./utils/modus-date-input.models",
                            "id": "src/components/modus-date-input/utils/modus-date-input.models.tsx::ModusDateInputEventDetails"
                        }
                    }
                }
            }, {
                "method": "valueError",
                "name": "valueError",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires on value error."
                },
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                }
            }];
    }
    static get methods() {
        return {
            "focusInput": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Focus the input.",
                    "tags": []
                }
            },
            "validate": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Validate the input.",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "element"; }
    static get watchers() {
        return [{
                "propName": "fillerDate",
                "methodName": "handleFillerDateChange"
            }, {
                "propName": "format",
                "methodName": "handleFormatChange"
            }, {
                "propName": "altFormats",
                "methodName": "handleAltFormatsChange"
            }, {
                "propName": "value",
                "methodName": "handleValueChange"
            }];
    }
}
