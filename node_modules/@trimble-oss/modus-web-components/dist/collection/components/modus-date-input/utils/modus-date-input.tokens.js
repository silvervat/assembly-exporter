const monthsFull = [
    'January',
    'February',
    'March',
    'April',
    'May',
    'June',
    'July',
    'August',
    'September',
    'October',
    'November',
    'December',
];
const monthsShort = monthsFull.map((m) => m.substring(0, 3));
function pad(val) {
    if (val < 10)
        return `0${val}`;
    return val.toString();
}
//date.toLocaleString('en-US', { month: 'short' })
export const Tokens = {
    mmmm: { regex: `(${monthsFull.join('|')})`, type: 'month' },
    mmm: { regex: `(${monthsShort.join('|')})`, type: 'month' },
    mm: { regex: '(1[0-2]|0?[1-9])', type: 'month' },
    m: { regex: '(1[0-2]|0?[1-9])', type: 'month' },
    dd: { regex: '(3[01]|0?[1-9]|[12][0-9])', type: 'date' },
    d: { regex: '(3[01]|0?[1-9]|[12][0-9])', type: 'date' },
    yy: { regex: '(\\d{2})', type: 'year' },
    yyyy: { regex: '(\\d{4})', type: 'year' },
};
export const TokenFormatting = {
    m: function (val) {
        return `${val}`;
    },
    mm: function (val) {
        return pad(val);
    },
    mmm: function (val) {
        return monthsShort[val - 1];
    },
    mmmm: function (val) {
        return monthsFull[val - 1];
    },
    d: function (val) {
        return `${val}`;
    },
    dd: function (val) {
        return pad(val);
    },
    yy: function (val) {
        return pad(val).substring(2);
    },
    yyyy: function (val, fillerYear) {
        if (val < 100) {
            const fill = fillerYear || new Date().getFullYear();
            return `${String(fill).substring(0, 2)}${pad(val)}`;
        }
        else
            return `${val}`;
    },
};
const defaultParser = function (val) {
    return parseFloat(val);
};
export const TokenParser = {
    m: defaultParser,
    mm: defaultParser,
    mmm: function (val) {
        return monthsShort.findIndex((m) => m.toUpperCase() === (val === null || val === void 0 ? void 0 : val.toUpperCase())) + 1;
    },
    mmmm: function (val) {
        return monthsFull.findIndex((m) => m.toUpperCase() === (val === null || val === void 0 ? void 0 : val.toUpperCase())) + 1;
    },
    d: defaultParser,
    dd: defaultParser,
    yy: defaultParser,
    yyyy: defaultParser,
};
