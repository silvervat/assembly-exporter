/* eslint-disable @typescript-eslint/no-unused-vars */
import { h } from "@stencil/core";
import { createGuid, generateElementId } from "../../utils/utils";
export class ModusSelect {
    constructor() {
        this.selectId = generateElementId() + '_select';
        this.classBySize = new Map([
            ['medium', 'medium'],
            ['large', 'large'],
        ]);
        this.ariaLabel = undefined;
        this.disabled = undefined;
        this.errorText = undefined;
        this.helperText = undefined;
        this.label = undefined;
        this.options = [];
        this.optionsDisplayProp = undefined;
        this.placeholder = 'Please Select';
        this.required = undefined;
        this.size = 'medium';
        this.validText = undefined;
        this.value = undefined;
        this.internalValue = undefined;
        this.optionIdMap = new Map();
    }
    handleValueChange(newValue) {
        this.internalValue = newValue;
    }
    /** Focus the input. */
    async focusInput() {
        this.selectInput.focus();
    }
    connectedCallback() {
        this.internalValue = this.value;
    }
    handleOptionSelect(option) {
        this.valueChange.emit(option);
    }
    handleSelectChange(event) {
        const target = event.target;
        const selectedId = target.value;
        const option = this.optionIdMap.get(selectedId);
        this.handleOptionSelect(option);
    }
    renderSubText() {
        if (this.errorText) {
            return h("label", { class: "sub-text error" }, this.errorText);
        }
        else if (this.validText) {
            return h("label", { class: "sub-text valid" }, this.validText);
        }
        else if (this.helperText) {
            return h("label", { class: "sub-text helper" }, this.helperText);
        }
        return null;
    }
    renderLabel() {
        return this.label || this.required ? (h("div", { class: "label-container" }, this.label ? h("label", { htmlFor: this.selectId }, this.label) : null, this.required ? h("span", { class: "required" }, "*") : null)) : null;
    }
    renderOptions() {
        var _a;
        return (_a = this.options) === null || _a === void 0 ? void 0 : _a.map((option) => {
            const optionId = createGuid();
            this.optionIdMap.set(optionId, option);
            return (h("option", { value: optionId, key: optionId, selected: option === this.internalValue }, option[this.optionsDisplayProp]));
        });
    }
    render() {
        var _a;
        const selectClass = `${this.classBySize.get(this.size)} ${this.errorText ? 'error' : this.validText ? 'valid' : this.disabled ? 'disabled' : ''}`;
        return (h("div", { key: '7d7af883b684c5f73670fa3423d2e994c740627a', class: this.disabled ? 'disabled' : undefined }, this.renderLabel(), h("span", { key: '034f3f8ffe4f7b5fba92feb904ee94da4958d7ea', class: "input-container" }, h("select", { key: '7bdf01255ec7aa2ed756cd72f6b52b408e67b6e2', part: "input", ref: (el) => (this.selectInput = el), disabled: this.disabled, id: this.selectId, class: selectClass, "aria-label": this.ariaLabel || undefined, onBlur: (e) => this.inputBlur.emit(e), onChange: (event) => {
                this.handleSelectChange(event);
            }, "aria-invalid": !!this.errorText, "aria-required": (_a = this.required) === null || _a === void 0 ? void 0 : _a.toString() }, h("option", { key: '0911199be88ca56fb9ff1c063d9dede8c224c97a', value: "", disabled: true, selected: true }, this.placeholder), this.renderOptions()), this.renderSubText())));
    }
    static get is() { return "modus-select"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["modus-select.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modus-select.css"]
        };
    }
    static get properties() {
        return {
            "ariaLabel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string | null",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The select's aria-label."
                },
                "attribute": "aria-label",
                "reflect": false
            },
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether the input is disabled."
                },
                "attribute": "disabled",
                "reflect": false
            },
            "errorText": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's error text."
                },
                "attribute": "error-text",
                "reflect": false
            },
            "helperText": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's helper text."
                },
                "attribute": "helper-text",
                "reflect": false
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input label."
                },
                "attribute": "label",
                "reflect": false
            },
            "options": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "unknown[]",
                    "resolved": "unknown[]",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The options for the dropdown list."
                },
                "defaultValue": "[]"
            },
            "optionsDisplayProp": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The options property to render in the dropdown list."
                },
                "attribute": "options-display-prop",
                "reflect": false
            },
            "placeholder": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's placeholder."
                },
                "attribute": "placeholder",
                "reflect": false,
                "defaultValue": "'Please Select'"
            },
            "required": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether the input is required."
                },
                "attribute": "required",
                "reflect": false
            },
            "size": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'medium' | 'large'",
                    "resolved": "\"large\" | \"medium\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's size."
                },
                "attribute": "size",
                "reflect": false,
                "defaultValue": "'medium'"
            },
            "validText": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input's valid text."
                },
                "attribute": "valid-text",
                "reflect": false
            },
            "value": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "unknown",
                    "resolved": "unknown",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The input value."
                }
            }
        };
    }
    static get states() {
        return {
            "internalValue": {},
            "optionIdMap": {}
        };
    }
    static get events() {
        return [{
                "method": "valueChange",
                "name": "valueChange",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires on input value change."
                },
                "complexType": {
                    "original": "unknown",
                    "resolved": "unknown",
                    "references": {}
                }
            }, {
                "method": "inputBlur",
                "name": "inputBlur",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires on input blur."
                },
                "complexType": {
                    "original": "FocusEvent",
                    "resolved": "FocusEvent",
                    "references": {
                        "FocusEvent": {
                            "location": "global",
                            "id": "global::FocusEvent"
                        }
                    }
                }
            }];
    }
    static get methods() {
        return {
            "focusInput": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Focus the input.",
                    "tags": []
                }
            }
        };
    }
    static get watchers() {
        return [{
                "propName": "value",
                "methodName": "handleValueChange"
            }];
    }
}
