export class ModusDataTableUtilities {
    static convertToTColumns(columns) {
        return columns === null || columns === void 0 ? void 0 : columns.map((column) => {
            var _a, _b, _c, _d, _e, _f, _g;
            return {
                align: (_a = column.align) !== null && _a !== void 0 ? _a : 'left',
                display: (_b = column.display) !== null && _b !== void 0 ? _b : column,
                id: (_e = (_c = column.id) !== null && _c !== void 0 ? _c : (_d = column.display) === null || _d === void 0 ? void 0 : _d.toLocaleLowerCase()) !== null && _e !== void 0 ? _e : column.toLocaleLowerCase(),
                readonly: (_f = column.readonly) !== null && _f !== void 0 ? _f : false,
                width: (_g = column.width) !== null && _g !== void 0 ? _g : '',
            };
        });
    }
    static convertToTRows(data, columns) {
        if ((data === null || data === void 0 ? void 0 : data.length) && !Array.isArray(data[0])) {
            return data;
        }
        return data === null || data === void 0 ? void 0 : data.map((row) => {
            var _a, _b;
            const tRows = {
                _id: (_a = row._id) !== null && _a !== void 0 ? _a : '',
                _selected: (_b = row._selected) !== null && _b !== void 0 ? _b : false,
            };
            row.forEach((cell, rowIndex) => {
                tRows[columns[rowIndex].id] = cell;
            });
            return tRows;
        });
    }
    static sortData(data, columnId, direction) {
        const dataCopy = [...data];
        if (direction === 'asc') {
            return dataCopy.sort((row1, row2) => {
                if (row1[columnId]['_type'] === 'badge') {
                    return row1[columnId].text > row2[columnId].text
                        ? 1
                        : -1;
                }
                if (row1[columnId]['_type'] === 'link') {
                    return row1[columnId].display > row2[columnId].display
                        ? 1
                        : -1;
                }
                return row1[columnId] > row2[columnId] ? 1 : -1;
            });
        }
        else {
            return dataCopy.sort((row1, row2) => {
                if (row1[columnId]['_type'] === 'badge') {
                    return row1[columnId].text > row2[columnId].text
                        ? -1
                        : 1;
                }
                if (row1[columnId]['_type'] === 'link') {
                    return row1[columnId].display > row2[columnId].display
                        ? -1
                        : 1;
                }
                return row1[columnId] > row2[columnId] ? -1 : 1;
            });
        }
    }
}
