// eslint-disable-next-line
import { h } from "@stencil/core";
import { ModusDataTableUtilities } from "./modus-data-table.utilities";
import { ModusDataTableHeader } from "./parts/modus-data-table-header";
import { ModusDataTableCellLinkPart } from "./parts/modus-data-table-cell-link-part";
import { ModusDataTableCellBadgePart } from "./parts/modus-data-table-cell-badge-part";
import { ModusDataTableRowActionDropdown } from "./parts/modus-data-table-row-action-dropdown";
export class ModusDataTable {
    constructor() {
        this.classBySize = new Map([
            ['small', 'size-small'],
            ['large', 'size-large'],
        ]);
        this.columns = undefined;
        this.data = undefined;
        this.displayOptions = {
            animateRowActionsDropdown: false,
            borderless: true,
            cellBorderless: true,
            rowStripe: false,
            size: 'large',
        };
        this.rowActions = [];
        this.selectionOptions = {
            canSelect: false,
            checkboxSelection: false,
        };
        this.sortOptions = {
            canSort: false,
            serverSide: false,
        };
        this.allSelected = false;
        this.sortState = {
            columnId: '',
            direction: 'none',
        };
    }
    dataChanged(_, oldValue) {
        var _a;
        this.originalData = (_a = this.originalData) !== null && _a !== void 0 ? _a : ModusDataTableUtilities.convertToTRows(oldValue, this.columns);
    }
    componentWillLoad() {
        this.convertColumnsAndRows();
        this.updateAllSelected();
    }
    componentDidLoad() {
        this.originalData = ModusDataTableUtilities.convertToTRows(this.data, this.columns);
    }
    componentWillUpdate() {
        this.convertColumnsAndRows();
    }
    convertColumnsAndRows() {
        this.columns = ModusDataTableUtilities.convertToTColumns(this.columns);
        this.data = ModusDataTableUtilities.convertToTRows(this.data, this.columns);
    }
    emitSelection() {
        this.selection.emit(this.data.filter((row) => row._selected).map((row) => row._id));
    }
    handleCheckboxClick(rowId) {
        this.data = this.data.map((row) => {
            return Object.assign(Object.assign({}, row), { _selected: row._id === rowId ? !row._selected : row._selected });
        });
        this.updateAllSelected();
        this.emitSelection();
    }
    handleColumnHeaderClick(columnId) {
        if (!this.sortOptions.canSort) {
            return;
        }
        if (columnId === this.sortState.columnId) {
            this.sortState = Object.assign(Object.assign({}, this.sortState), { direction: this.sortState.direction === 'asc' ? 'desc' : this.sortState.direction === 'desc' ? 'none' : 'asc' });
        }
        else {
            this.sortState = Object.assign(Object.assign({}, this.sortState), { direction: 'asc', columnId: columnId });
        }
        this.sort.emit({
            columnId: this.sortState.columnId,
            direction: this.sortState.direction,
        });
        if (!this.sortOptions.serverSide) {
            this.data =
                this.sortState.direction === 'none'
                    ? this.originalData.map((originalRow) => {
                        return Object.assign(Object.assign({}, originalRow), { _selected: this.data.find((dataRow) => dataRow._id === originalRow._id)._selected });
                    })
                    : ModusDataTableUtilities.sortData(this.data, this.sortState.columnId, this.sortState.direction);
            this.updateAllSelected();
        }
    }
    handleHeaderCheckboxClick(selectAll) {
        this.data = this.data.map((row) => {
            return Object.assign(Object.assign({}, row), { _selected: selectAll });
        });
        this.emitSelection();
    }
    handleRowClick(rowId) {
        if (!this.selectionOptions.canSelect || this.selectionOptions.checkboxSelection) {
            return;
        }
        this.data = this.data.map((row) => {
            return Object.assign(Object.assign({}, row), { _selected: row._id === rowId ? !row._selected : row._selected });
        });
        this.emitSelection();
    }
    handleRowDoubleClick(rowId) {
        this.rowDoubleClick.emit(rowId);
    }
    updateAllSelected() {
        var _a;
        this.allSelected = (_a = this.data) === null || _a === void 0 ? void 0 : _a.every((row) => row._selected);
    }
    render() {
        var _a, _b, _c;
        const className = `
      ${this.displayOptions.borderless ? 'borderless' : ''}
      ${this.displayOptions.cellBorderless ? 'cell-borderless' : ''}
      ${this.displayOptions.rowStripe ? 'row-stripe' : ''}
      ${this.classBySize.get(this.displayOptions.size)}
    `;
        return (h("table", { key: 'bb903b6dd2d3c5aa025b858f9a26a66ff1248cac', class: className }, h("colgroup", { key: 'afd0ce04b4c068839824ddc648e42e6241459752' }, this.selectionOptions.canSelect && this.selectionOptions.checkboxSelection && h("col", { style: { width: '34px' } }), (_a = this.columns) === null || _a === void 0 ? void 0 :
            _a.map((column) => h("col", { style: { width: column.width } })), !!this.rowActions.length && h("col", { style: { width: '34px' } })), h("thead", { key: '6f9c407f63ff0817314f3d665bde71ac52c51601' }, h("tr", { key: '8947edd43bb022c4d4ad350a10c4cd573fbcd2c1' }, this.selectionOptions.canSelect && this.selectionOptions.checkboxSelection && (h("th", null, h("div", { class: "column-header align-center" }, h("modus-checkbox", { checked: this.allSelected, onCheckboxClick: (e) => this.handleHeaderCheckboxClick(e.detail) })))), (_b = this.columns) === null || _b === void 0 ? void 0 :
            _b.map((column) => (h(ModusDataTableHeader, { column: column, onColumnHeaderClick: (id) => this.handleColumnHeaderClick(id), sortOptions: this.sortOptions, sortState: this.sortState }))), !!this.rowActions.length && h("th", null))), h("tbody", { key: 'e9c4b28917968636b3813f9d7561a527ed0a6d86' }, (_c = this.data) === null || _c === void 0 ? void 0 : _c.map((row) => {
            var _a;
            return (h("tr", { onClick: () => this.handleRowClick(row._id), onDblClick: () => this.handleRowDoubleClick(row._id) }, this.selectionOptions.canSelect && this.selectionOptions.checkboxSelection && (h("td", { class: `align-center ${row._selected ? 'selected' : ''}`, onClick: (e) => e.stopPropagation(), onDblClick: (e) => e.stopPropagation() }, h("div", null, h("modus-checkbox", { checked: row._selected, onCheckboxClick: () => this.handleCheckboxClick(row._id) })))), (_a = this.columns) === null || _a === void 0 ? void 0 :
                _a.map((column) => {
                    var _a, _b, _c, _d;
                    return (h("td", { class: `align-${column.align} ${column.readonly ? 'readonly' : ''} ${row._selected ? 'selected' : ''}` }, ((_a = row[column.id]) === null || _a === void 0 ? void 0 : _a._type) === 'link' && (h(ModusDataTableCellLinkPart, { link: row[column.id], onLinkClick: () => this.cellLinkClick.emit(row[column.id]) })), ((_b = row[column.id]) === null || _b === void 0 ? void 0 : _b._type) === 'badge' && h(ModusDataTableCellBadgePart, { badge: row[column.id] }), !((_c = row[column.id]) === null || _c === void 0 ? void 0 : _c._type) && ((_d = row[column.id]) === null || _d === void 0 ? void 0 : _d.toString())));
                }), !!this.rowActions.length && (h("td", { class: `align-center ${row._selected ? 'selected' : ''}`, onClick: (e) => e.stopPropagation(), onDblClick: (e) => e.stopPropagation() }, h(ModusDataTableRowActionDropdown, { actions: this.rowActions, animateDropdown: this.displayOptions.animateRowActionsDropdown, onRowActionClick: (actionId, rowId) => this.rowActionClick.emit({ actionId, rowId }), rowId: row._id })))));
        }))));
    }
    static get is() { return "modus-data-table"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["modus-data-table.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modus-data-table.css"]
        };
    }
    static get properties() {
        return {
            "columns": {
                "type": "unknown",
                "mutable": true,
                "complexType": {
                    "original": "string[] | TColumn[]",
                    "resolved": "TColumn[] | string[]",
                    "references": {
                        "TColumn": {
                            "location": "import",
                            "path": "./modus-data-table.models",
                            "id": "src/components/modus-data-table/modus-data-table.models.ts::TColumn"
                        }
                    }
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                }
            },
            "data": {
                "type": "unknown",
                "mutable": true,
                "complexType": {
                    "original": "TCell[][] | TRow[]",
                    "resolved": "TCell[][] | TRow[]",
                    "references": {
                        "TCell": {
                            "location": "import",
                            "path": "./modus-data-table.models",
                            "id": "src/components/modus-data-table/modus-data-table.models.ts::TCell"
                        },
                        "TRow": {
                            "location": "import",
                            "path": "./modus-data-table.models",
                            "id": "src/components/modus-data-table/modus-data-table.models.ts::TRow"
                        }
                    }
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                }
            },
            "displayOptions": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "ModusDataTableDisplayOptions",
                    "resolved": "ModusDataTableDisplayOptions",
                    "references": {
                        "ModusDataTableDisplayOptions": {
                            "location": "import",
                            "path": "./modus-data-table.models",
                            "id": "src/components/modus-data-table/modus-data-table.models.ts::ModusDataTableDisplayOptions"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Options for data table display."
                },
                "defaultValue": "{\n    animateRowActionsDropdown: false,\n    borderless: true,\n    cellBorderless: true,\n    rowStripe: false,\n    size: 'large',\n  }"
            },
            "rowActions": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "ModusDataTableRowAction[]",
                    "resolved": "ModusDataTableRowAction[]",
                    "references": {
                        "ModusDataTableRowAction": {
                            "location": "import",
                            "path": "./modus-data-table.models",
                            "id": "src/components/modus-data-table/modus-data-table.models.ts::ModusDataTableRowAction"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Actions that can be performed on each row."
                },
                "defaultValue": "[]"
            },
            "selectionOptions": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "ModusDataTableSelectionOptions",
                    "resolved": "ModusDataTableSelectionOptions",
                    "references": {
                        "ModusDataTableSelectionOptions": {
                            "location": "import",
                            "path": "./modus-data-table.models",
                            "id": "src/components/modus-data-table/modus-data-table.models.ts::ModusDataTableSelectionOptions"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Options for data table item selection."
                },
                "defaultValue": "{\n    canSelect: false,\n    checkboxSelection: false,\n  }"
            },
            "sortOptions": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "ModusDataTableSortOptions",
                    "resolved": "ModusDataTableSortOptions",
                    "references": {
                        "ModusDataTableSortOptions": {
                            "location": "import",
                            "path": "./modus-data-table.models",
                            "id": "src/components/modus-data-table/modus-data-table.models.ts::ModusDataTableSortOptions"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Options for data table column sort."
                },
                "defaultValue": "{\n    canSort: false,\n    serverSide: false,\n  }"
            }
        };
    }
    static get states() {
        return {
            "allSelected": {},
            "sortState": {}
        };
    }
    static get events() {
        return [{
                "method": "cellLinkClick",
                "name": "cellLinkClick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires on cell link click."
                },
                "complexType": {
                    "original": "ModusDataTableCellLink",
                    "resolved": "ModusDataTableCellLink",
                    "references": {
                        "ModusDataTableCellLink": {
                            "location": "import",
                            "path": "./modus-data-table.models",
                            "id": "src/components/modus-data-table/modus-data-table.models.ts::ModusDataTableCellLink"
                        }
                    }
                }
            }, {
                "method": "rowDoubleClick",
                "name": "rowDoubleClick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires on row double click."
                },
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                }
            }, {
                "method": "selection",
                "name": "selection",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires on selection change."
                },
                "complexType": {
                    "original": "string[]",
                    "resolved": "string[]",
                    "references": {}
                }
            }, {
                "method": "sort",
                "name": "sort",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires on column sort."
                },
                "complexType": {
                    "original": "ModusDataTableSortEvent",
                    "resolved": "ModusDataTableSortEvent",
                    "references": {
                        "ModusDataTableSortEvent": {
                            "location": "import",
                            "path": "./modus-data-table.models",
                            "id": "src/components/modus-data-table/modus-data-table.models.ts::ModusDataTableSortEvent"
                        }
                    }
                }
            }, {
                "method": "rowActionClick",
                "name": "rowActionClick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires when a row action is clicked."
                },
                "complexType": {
                    "original": "ModusDataTableRowActionClickEvent",
                    "resolved": "ModusDataTableRowActionClickEvent",
                    "references": {
                        "ModusDataTableRowActionClickEvent": {
                            "location": "import",
                            "path": "./modus-data-table.models",
                            "id": "src/components/modus-data-table/modus-data-table.models.ts::ModusDataTableRowActionClickEvent"
                        }
                    }
                }
            }];
    }
    static get watchers() {
        return [{
                "propName": "data",
                "methodName": "dataChanged"
            }];
    }
}
