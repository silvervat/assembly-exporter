import { h, // eslint-disable-line @typescript-eslint/no-unused-vars
 } from "@stencil/core";
import { createPopper } from "@popperjs/core";
export class ModusActionBar {
    constructor() {
        this.showOverflowMenu = false;
        this.actions = undefined;
        this.size = 'medium';
        this.visibleItemCount = 3;
    }
    componentWillLoad() {
        this.processChildren();
    }
    componentDidRender() {
        this.initializePopper();
    }
    handleGlobalFocus(event) {
        if (!(event.target instanceof HTMLElement)) {
            return;
        }
        const isMoreVerticalBtnTarget = event.target.localName === 'modus-tree-view-item';
        // Check if the focus is moving outside the component and if not clicked on the ellipsis button.
        if (!this.el.contains(event.target) && !isMoreVerticalBtnTarget && this.showOverflowMenu) {
            this.closeOverflowMenu();
        }
    }
    processChildren() {
        const actionItemsChildren = this.el.querySelectorAll('modus-action-item');
        if (actionItemsChildren.length > 0) {
            const actionItems = Array.from(actionItemsChildren);
            this.actions = actionItems.map((item) => ({
                id: item.getAttribute('id'),
                icon: item.getAttribute('icon'),
                label: item.textContent.trim(),
            }));
        }
    }
    initializePopper() {
        this.popperInstance = createPopper(this.overflowButtonElement, this.overflowMenuElement, {
            placement: 'bottom-end',
        });
    }
    handleKeyDown(event, action) {
        if (event && event.key !== 'Enter' && event.key !== ' ') {
            return;
        }
        this.handleButtonClick(event, action);
    }
    handleOverflowClick(event) {
        event.preventDefault();
        event.stopPropagation();
        this.toggleOverflowMenu();
    }
    handleOverflowKeyDown(event) {
        if (event && event.key !== 'Enter' && event.key !== ' ') {
            return;
        }
        this.handleOverflowClick(event);
    }
    handleButtonClick(event, action) {
        event.preventDefault();
        event.stopPropagation();
        this.actionBarClick.emit({ actionId: action.id });
        if (this.showOverflowMenu) {
            this.closeOverflowMenu();
        }
    }
    toggleOverflowMenu() {
        this.showOverflowMenu = !this.showOverflowMenu;
        if (this.showOverflowMenu) {
            this.popperInstance.update();
        }
    }
    closeOverflowMenu() {
        this.showOverflowMenu = false;
    }
    render() {
        const visibleActions = this.actions.length > this.visibleItemCount ? this.actions.slice(0, this.visibleItemCount - 1) : this.actions;
        const overflowActions = this.actions.length > this.visibleItemCount ? this.actions.slice(this.visibleItemCount - 1) : null;
        return (h("div", { key: 'e02cb0ae28cefc61170f22ad384fed9cea70af7b', class: "modus-action-bar" }, visibleActions.map((action) => (h("modus-tooltip", { text: action.label }, h("modus-button", { "icon-only": action.icon, buttonStyle: "borderless", color: "secondary", size: this.size, onClick: (event) => this.handleButtonClick(event, action), onKeyDown: (event) => this.handleKeyDown(event, action) }, action.label)))), this.actions.length > this.visibleItemCount && (h("modus-button", { ref: (el) => (this.overflowButtonElement = el), "icon-only": "more_vertical", buttonStyle: "borderless", color: "secondary", size: this.size, onClick: (event) => this.handleOverflowClick(event), onKeyDown: (event) => this.handleOverflowKeyDown(event) })), this.showOverflowMenu && (h("div", { style: { width: '200px', display: this.showOverflowMenu ? 'block' : 'none' }, class: "overflow-menu", ref: (el) => (this.overflowMenuElement = el) }, h("modus-list", null, overflowActions.map((action) => (h("modus-list-item", { size: this.size === 'small' ? 'condensed' : 'standard', onClick: (event) => this.handleButtonClick(event, action), onKeyDown: (event) => this.handleKeyDown(event, action), leftIcon: action.icon }, action.label))))))));
    }
    static get is() { return "modus-action-bar"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["modus-action-bar.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modus-action-bar.css"]
        };
    }
    static get properties() {
        return {
            "actions": {
                "type": "unknown",
                "mutable": true,
                "complexType": {
                    "original": "ModusActionBarOptions[]",
                    "resolved": "ModusActionBarOptions[]",
                    "references": {
                        "ModusActionBarOptions": {
                            "location": "local",
                            "path": "/home/runner/work/modus-web-components/modus-web-components/stencil-workspace/src/components/modus-action-bar/modus-action-bar.tsx",
                            "id": "src/components/modus-action-bar/modus-action-bar.tsx::ModusActionBarOptions"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) List of actions"
                }
            },
            "size": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'small' | 'medium' | 'large'",
                    "resolved": "\"large\" | \"medium\" | \"small\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The size of the action items."
                },
                "attribute": "size",
                "reflect": false,
                "defaultValue": "'medium'"
            },
            "visibleItemCount": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Total number of icons to show"
                },
                "attribute": "visible-item-count",
                "reflect": false,
                "defaultValue": "3"
            }
        };
    }
    static get states() {
        return {
            "showOverflowMenu": {}
        };
    }
    static get events() {
        return [{
                "method": "actionBarClick",
                "name": "actionBarClick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "(optional) An event that fires on action item click."
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "el"; }
    static get listeners() {
        return [{
                "name": "focusin",
                "method": "handleGlobalFocus",
                "target": "document",
                "capture": false,
                "passive": false
            }, {
                "name": "mouseup",
                "method": "handleGlobalFocus",
                "target": "document",
                "capture": false,
                "passive": true
            }];
    }
}
