// eslint-disable-next-line
import { h } from "@stencil/core";
export class ModusSwitch {
    constructor() {
        this.ariaLabel = undefined;
        this.checked = false;
        this.disabled = undefined;
        this.label = undefined;
        this.size = 'medium';
    }
    elementKeydownHandler(event) {
        switch (event.code) {
            case 'Enter':
                this.handleSwitchClick();
                break;
        }
    }
    elementKeyupHandler(event) {
        switch (event.code) {
            case 'Space':
                this.handleSwitchClick();
                break;
        }
    }
    handleSwitchClick() {
        if (this.disabled) {
            return;
        }
        this.updateChecked();
        this.switchClick.emit(this.checked);
    }
    updateChecked() {
        this.checked = !this.checked;
        this.checkboxInput.checked = this.checked;
    }
    render() {
        const containerClassName = `modus-switch ${this.disabled ? 'disabled' : ''} ${this.size}`;
        const switchClassName = `switch ${this.checked ? 'checked' : ''}`;
        return (h("div", { key: '74e0f4c43bc6858f0a55d65fe3b967cdb955d39b', class: containerClassName, onClick: () => this.handleSwitchClick(), tabIndex: this.disabled ? -1 : 0 }, h("div", { key: 'a68e5bfbee07e56d67014c1e0f6e36403dbdb9e1', class: switchClassName }, h("span", { key: '7c38ffe05f1baff87ca079f2bef69d5d58791810', class: `slider` })), h("input", { key: '452aed83bbe12daf81fc74eeb2b2538279b0b7d5', "aria-checked": String(this.checked), "aria-disabled": this.disabled ? 'true' : undefined, "aria-label": this.ariaLabel || undefined, checked: this.checked, disabled: this.disabled, ref: (el) => (this.checkboxInput = el), role: "switch", type: "checkbox" }), this.label ? h("label", null, this.label) : null));
    }
    static get is() { return "modus-switch"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["modus-switch.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modus-switch.css"]
        };
    }
    static get properties() {
        return {
            "ariaLabel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string | null",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The switch's aria-label."
                },
                "attribute": "aria-label",
                "reflect": false
            },
            "checked": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether the switch is checked."
                },
                "attribute": "checked",
                "reflect": false,
                "defaultValue": "false"
            },
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether the switch is disabled."
                },
                "attribute": "disabled",
                "reflect": false
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The switch label."
                },
                "attribute": "label",
                "reflect": false
            },
            "size": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'small' | 'medium'",
                    "resolved": "\"medium\" | \"small\"",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "(optional) The size of the radiobutton."
                },
                "attribute": "size",
                "reflect": false,
                "defaultValue": "'medium'"
            }
        };
    }
    static get events() {
        return [{
                "method": "switchClick",
                "name": "switchClick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires on switch click."
                },
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                }
            }];
    }
    static get listeners() {
        return [{
                "name": "keydown",
                "method": "elementKeydownHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "keyup",
                "method": "elementKeyupHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
}
