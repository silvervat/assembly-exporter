// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { h, Fragment } from "@stencil/core";
import { ModusIconMap } from "../../icons/ModusIconMap";
export class ModusButton {
    constructor() {
        this.classByButtonStyle = new Map([
            ['borderless', 'style-borderless'],
            ['fill', 'style-fill'],
            ['outline', 'style-outline'],
        ]);
        this.classByColor = new Map([
            ['danger', 'color-danger'],
            ['primary', 'color-primary'],
            ['secondary', 'color-secondary'],
            ['tertiary', 'color-tertiary'],
            ['dark', 'color-dark'],
        ]);
        this.classBySize = new Map([
            ['small', 'size-small'],
            ['medium', 'size-medium'],
            ['large', 'size-large'],
        ]);
        this.ariaDisabled = undefined;
        this.ariaLabel = undefined;
        this.buttonStyle = 'fill';
        this.color = 'primary';
        this.disabled = undefined;
        this.iconOnly = undefined;
        this.leftIcon = undefined;
        this.rightIcon = undefined;
        this.size = 'medium';
        this.showCaret = undefined;
        this.type = 'button';
        this.isActive = undefined;
        this.pressed = undefined;
    }
    /** Focus the Button */
    async focusButton() {
        var _a;
        (_a = this.buttonRef) === null || _a === void 0 ? void 0 : _a.focus();
        return Promise.resolve();
    }
    /** Set the button to active or inactive */
    async setActive(isActive) {
        this.isActive = isActive;
    }
    elementKeyupHandler(event) {
        switch (event.code) {
            case 'Space':
                this.buttonClick.emit();
                break;
        }
    }
    renderIconWithText() {
        return (h(Fragment, null, this.leftIcon && (h("span", { class: "icon left-icon" }, h(ModusIconMap, { icon: this.leftIcon }))), h("span", { class: "label" }, h("slot", null)), this.rightIcon && !this.showCaret && (h("span", { class: "icon right-icon" }, h(ModusIconMap, { icon: this.rightIcon })))));
    }
    renderIconOnly() {
        return (h("span", { class: "icon" }, h(ModusIconMap, { icon: this.iconOnly })));
    }
    render() {
        const className = `${this.classBySize.get(this.size)} ${this.classByColor.get(this.color)} ${this.classByButtonStyle.get(this.buttonStyle)} ${this.iconOnly ? 'icon-only' : ''} ${this.showCaret ? 'has-caret' : ''} ${this.isActive ? ' active' : ''}`;
        return (h("button", { key: '7a75a381d94fa0c6d8d9ec451a80155008ce3583', "aria-disabled": this.ariaDisabled ? this.ariaDisabled : this.disabled ? 'true' : undefined, "aria-label": this.ariaLabel || undefined, "aria-pressed": this.pressed ? 'true' : undefined, class: className, disabled: this.disabled, onClick: () => {
                if (!this.disabled) {
                    this.buttonClick.emit();
                    if (this.type === 'toggle') {
                        this.isActive = !this.isActive;
                    }
                }
            }, onKeyDown: () => (this.pressed = true), onKeyUp: () => (this.pressed = false), onMouseDown: () => (this.pressed = true), onMouseUp: () => (this.pressed = false), ref: (el) => (this.buttonRef = el), type: this.type }, this.iconOnly ? this.renderIconOnly() : this.renderIconWithText(), this.showCaret && h(ModusIconMap, { size: "24", icon: "caret_down" })));
    }
    static get is() { return "modus-button"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["modus-button.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modus-button.css"]
        };
    }
    static get properties() {
        return {
            "ariaDisabled": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string | null",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The button's aria-disabled state."
                },
                "attribute": "aria-disabled",
                "reflect": false
            },
            "ariaLabel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string | null",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The button's aria-label."
                },
                "attribute": "aria-label",
                "reflect": false
            },
            "buttonStyle": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "ButtonStyle",
                    "resolved": "\"borderless\" | \"fill\" | \"outline\"",
                    "references": {
                        "ButtonStyle": {
                            "location": "import",
                            "path": "./modus-button.models",
                            "id": "src/components/modus-button/modus-button.models.ts::ButtonStyle"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The style of the button"
                },
                "attribute": "button-style",
                "reflect": true,
                "defaultValue": "'fill'"
            },
            "color": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "ButtonColor",
                    "resolved": "\"danger\" | \"primary\" | \"secondary\" | \"tertiary\"",
                    "references": {
                        "ButtonColor": {
                            "location": "import",
                            "path": "./modus-button.models",
                            "id": "src/components/modus-button/modus-button.models.ts::ButtonColor"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The color of the button"
                },
                "attribute": "color",
                "reflect": true,
                "defaultValue": "'primary'"
            },
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Disables the button."
                },
                "attribute": "disabled",
                "reflect": true
            },
            "iconOnly": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Takes the icon name and renders an icon-only button."
                },
                "attribute": "icon-only",
                "reflect": false
            },
            "leftIcon": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Takes the icon name and shows the icon aligned to the left of the button text."
                },
                "attribute": "left-icon",
                "reflect": false
            },
            "rightIcon": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Takes the icon name and shows the icon aligned to the right of the button text."
                },
                "attribute": "right-icon",
                "reflect": false
            },
            "size": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "ButtonSize",
                    "resolved": "\"large\" | \"medium\" | \"small\"",
                    "references": {
                        "ButtonSize": {
                            "location": "import",
                            "path": "./modus-button.models",
                            "id": "src/components/modus-button/modus-button.models.ts::ButtonSize"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The size of the button."
                },
                "attribute": "size",
                "reflect": false,
                "defaultValue": "'medium'"
            },
            "showCaret": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Shows a caret icon right side of the button."
                },
                "attribute": "show-caret",
                "reflect": false
            },
            "type": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "ButtonType",
                    "resolved": "\"button\" | \"reset\" | \"submit\" | \"toggle\"",
                    "references": {
                        "ButtonType": {
                            "location": "import",
                            "path": "./modus-button.models",
                            "id": "src/components/modus-button/modus-button.models.ts::ButtonType"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(Optional) Button types"
                },
                "attribute": "type",
                "reflect": false,
                "defaultValue": "'button'"
            }
        };
    }
    static get states() {
        return {
            "isActive": {},
            "pressed": {}
        };
    }
    static get events() {
        return [{
                "method": "buttonClick",
                "name": "buttonClick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "(optional) An event that fires on button click."
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }];
    }
    static get methods() {
        return {
            "focusButton": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Focus the Button",
                    "tags": []
                }
            },
            "setActive": {
                "complexType": {
                    "signature": "(isActive: boolean) => Promise<void>",
                    "parameters": [{
                            "name": "isActive",
                            "type": "boolean",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Set the button to active or inactive",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get listeners() {
        return [{
                "name": "keyup",
                "method": "elementKeyupHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
}
