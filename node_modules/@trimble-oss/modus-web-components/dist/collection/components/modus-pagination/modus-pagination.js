import { h, } from "@stencil/core";
import { PaginationDirection } from "./enums/pagination-direction.enum";
import { IconChevronLeft } from "../../icons/generated-icons/IconChevronLeft";
import { IconChevronRight } from "../../icons/generated-icons/IconChevronRight";
export class ModusPagination {
    activePageWatch(newValue, oldValue) {
        if (newValue !== oldValue) {
            this.pageChange.emit(newValue);
        }
    }
    constructor() {
        this.chevronSizeBySize = new Map([
            ['small', '16'],
            ['medium', '20'],
            ['large', '24'],
        ]);
        this.classBySize = new Map([
            ['small', 'small'],
            ['medium', 'medium'],
            ['large', 'large'],
        ]);
        this.ariaLabel = undefined;
        this.activePage = 1;
        this.maxPage = undefined;
        this.minPage = undefined;
        this.prevPageButtonText = undefined;
        this.nextPageButtonText = undefined;
        this.size = 'medium';
        this.pages = undefined;
        this.setPages();
    }
    componentWillRender() {
        if (this.activePage === undefined || isNaN(this.activePage)) {
            this.activePage = 1;
        }
        this.setPages();
    }
    setPages() {
        const pages = [];
        const ellipsis = '...';
        // Always show the first page.
        this.maxPage > 1 && pages.push(this.minPage);
        if (this.maxPage - this.minPage < 7) {
            // No need for ellipsis for 7 pages - push all of them.
            for (let i = this.minPage + 1; i < this.maxPage; i++) {
                pages.push(i);
            }
        }
        else {
            if (this.activePage - this.minPage < 4) {
                // One of the first 4 pages is active.
                [1, 2, 3, 4].map((val) => pages.push(this.minPage + val));
                pages.push(ellipsis);
            }
            else if (this.maxPage - this.activePage < 4) {
                // One of the last 4 pages is active.
                pages.push(ellipsis);
                [4, 3, 2, 1].map((val) => pages.push(this.maxPage - val));
            }
            else {
                // The active page is somewhere in the middle.
                pages.push(ellipsis);
                [-1, 0, 1].map((val) => pages.push(this.activePage + val));
                pages.push(ellipsis);
            }
        }
        // Always show the last page.
        pages.push(this.maxPage);
        this.pages = pages;
    }
    handleChevronClick(direction) {
        if (direction === PaginationDirection.Previous && this.activePage !== this.minPage) {
            this.activePage--;
        }
        else if (direction === PaginationDirection.Next && this.activePage !== this.maxPage) {
            this.activePage++;
        }
    }
    handleChevronKeydown(event, direction) {
        if (event.key.toLowerCase() === 'enter') {
            this.handleChevronClick(direction);
            event.preventDefault();
        }
    }
    handlePageKeydown(event, page) {
        if (event.key.toLowerCase() === 'enter') {
            this.handlePageClick(page);
            event.preventDefault();
        }
    }
    handlePageClick(page) {
        if (!isNaN(page)) {
            this.activePage = page;
        }
    }
    renderPreviousPageControl() {
        return (this.maxPage - this.minPage >= 7 && (h("li", null, h("button", { "aria-label": "Previous", class: `${this.activePage != this.minPage ? 'hoverable' : 'disabled'}`, disabled: this.activePage === this.minPage, onClick: () => this.handleChevronClick(PaginationDirection.Previous), onKeyDown: (event) => this.handleChevronKeydown(event, PaginationDirection.Previous) }, this.prevPageButtonText ? (h("span", { "data-test-id": "prev-button-text" }, this.prevPageButtonText)) : (h(IconChevronLeft, { size: this.chevronSizeBySize.get(this.size) }))))));
    }
    renderNextPageControl() {
        return (this.maxPage - this.minPage >= 7 && (h("li", null, h("button", { "aria-label": "Next", class: `${this.activePage != this.maxPage ? 'hoverable' : 'disabled'}`, disabled: this.activePage === this.maxPage, onClick: () => this.handleChevronClick(PaginationDirection.Next), onKeyDown: (event) => this.handleChevronKeydown(event, PaginationDirection.Next) }, this.nextPageButtonText ? (h("span", { "data-test-id": "next-button-text" }, this.nextPageButtonText)) : (h(IconChevronRight, { size: this.chevronSizeBySize.get(this.size) }))))));
    }
    renderPageNumbers() {
        return this.pages.map((page) => {
            const isCurrentPage = page === this.activePage;
            if (page === '...') {
                return (h("li", null, h("button", { class: `${!isNaN(+page) ? 'hoverable' : ''}`, tabIndex: -1 }, page)));
            }
            return (h("li", null, h("button", { "aria-current": isCurrentPage ? 'page' : null, class: `${page === this.activePage ? 'active' : ''} ${!isNaN(+page) ? 'hoverable' : ''}`, onClick: () => this.handlePageClick(+page), onKeyDown: (event) => this.handlePageKeydown(event, +page) }, page)));
        });
    }
    render() {
        return (h("nav", { key: '74cddfd08be69283bb88db957497ed88f4593906', "aria-label": this.ariaLabel || undefined, class: `${this.classBySize.get(this.size)}` }, h("ul", { key: '892927c0a9a450e2678db22809454830023963c7' }, this.renderPreviousPageControl(), this.renderPageNumbers(), this.renderNextPageControl())));
    }
    static get is() { return "modus-pagination"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["modus-pagination.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modus-pagination.css"]
        };
    }
    static get properties() {
        return {
            "ariaLabel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string | null",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "aria-label",
                "reflect": false
            },
            "activePage": {
                "type": "number",
                "mutable": true,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "active-page",
                "reflect": false,
                "defaultValue": "1"
            },
            "maxPage": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "max-page",
                "reflect": false
            },
            "minPage": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "min-page",
                "reflect": false
            },
            "prevPageButtonText": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "prev-page-button-text",
                "reflect": false
            },
            "nextPageButtonText": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "next-page-button-text",
                "reflect": false
            },
            "size": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'large' | 'medium' | 'small'",
                    "resolved": "\"large\" | \"medium\" | \"small\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "attribute": "size",
                "reflect": false,
                "defaultValue": "'medium'"
            }
        };
    }
    static get states() {
        return {
            "pages": {}
        };
    }
    static get events() {
        return [{
                "method": "pageChange",
                "name": "pageChange",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires on page change."
                },
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                }
            }];
    }
    static get watchers() {
        return [{
                "propName": "activePage",
                "methodName": "activePageWatch"
            }];
    }
}
